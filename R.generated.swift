//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `PrimaryMainVC`, and contains static references to 1 segues.
    struct primaryMainVC {
      /// Segue identifier `signup`.
      static let signup: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PrimaryMainVC, SignupVC> = Rswift.StoryboardSegueIdentifier(identifier: "signup")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `signup`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signup(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PrimaryMainVC, SignupVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.primaryMainVC.signup, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `RestaurantMenuVC`, and contains static references to 2 segues.
    struct restaurantMenuVC {
      /// Segue identifier `idenRestMenu`.
      static let idenRestMenu: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RestaurantMenuVC, ResMenuVC> = Rswift.StoryboardSegueIdentifier(identifier: "idenRestMenu")
      /// Segue identifier `idenRestReview`.
      static let idenRestReview: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RestaurantMenuVC, ResReviewVC> = Rswift.StoryboardSegueIdentifier(identifier: "idenRestReview")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `idenRestMenu`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func idenRestMenu(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RestaurantMenuVC, ResMenuVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.restaurantMenuVC.idenRestMenu, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `idenRestReview`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func idenRestReview(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RestaurantMenuVC, ResReviewVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.restaurantMenuVC.idenRestReview, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `linkColor`.
    static let linkColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "linkColor")
    /// Color `theme_color`.
    static let theme_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "theme_color")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "linkColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func linkColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.linkColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "theme_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func theme_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.theme_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "linkColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func linkColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.linkColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "theme_color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func theme_color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.theme_color.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `Cairo-Black.ttf`.
    static let cairoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-Black", pathExtension: "ttf")
    /// Resource file `Cairo-Bold.ttf`.
    static let cairoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-Bold", pathExtension: "ttf")
    /// Resource file `Cairo-ExtraLight.ttf`.
    static let cairoExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-ExtraLight", pathExtension: "ttf")
    /// Resource file `Cairo-Light.ttf`.
    static let cairoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-Light", pathExtension: "ttf")
    /// Resource file `Cairo-Regular.ttf`.
    static let cairoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-Regular", pathExtension: "ttf")
    /// Resource file `Cairo-SemiBold.ttf`.
    static let cairoSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Cairo-SemiBold", pathExtension: "ttf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `OFL.txt`.
    static let oflTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "OFL", pathExtension: "txt")

    /// `bundle.url(forResource: "Cairo-Black", withExtension: "ttf")`
    static func cairoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-Bold", withExtension: "ttf")`
    static func cairoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-ExtraLight", withExtension: "ttf")`
    static func cairoExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-Light", withExtension: "ttf")`
    static func cairoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-Regular", withExtension: "ttf")`
    static func cairoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Cairo-SemiBold", withExtension: "ttf")`
    static func cairoSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cairoSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OFL", withExtension: "txt")`
    static func oflTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oflTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 6 fonts.
  struct font: Rswift.Validatable {
    /// Font `Cairo-Black`.
    static let cairoBlack = Rswift.FontResource(fontName: "Cairo-Black")
    /// Font `Cairo-Bold`.
    static let cairoBold = Rswift.FontResource(fontName: "Cairo-Bold")
    /// Font `Cairo-ExtraLight`.
    static let cairoExtraLight = Rswift.FontResource(fontName: "Cairo-ExtraLight")
    /// Font `Cairo-Light`.
    static let cairoLight = Rswift.FontResource(fontName: "Cairo-Light")
    /// Font `Cairo-Regular`.
    static let cairoRegular = Rswift.FontResource(fontName: "Cairo-Regular")
    /// Font `Cairo-SemiBold`.
    static let cairoSemiBold = Rswift.FontResource(fontName: "Cairo-SemiBold")

    /// `UIFont(name: "Cairo-Black", size: ...)`
    static func cairoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoBlack, size: size)
    }

    /// `UIFont(name: "Cairo-Bold", size: ...)`
    static func cairoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoBold, size: size)
    }

    /// `UIFont(name: "Cairo-ExtraLight", size: ...)`
    static func cairoExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoExtraLight, size: size)
    }

    /// `UIFont(name: "Cairo-Light", size: ...)`
    static func cairoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoLight, size: size)
    }

    /// `UIFont(name: "Cairo-Regular", size: ...)`
    static func cairoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoRegular, size: size)
    }

    /// `UIFont(name: "Cairo-SemiBold", size: ...)`
    static func cairoSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: cairoSemiBold, size: size)
    }

    static func validate() throws {
      if R.font.cairoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Black' could not be loaded, is 'Cairo-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Bold' could not be loaded, is 'Cairo-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-ExtraLight' could not be loaded, is 'Cairo-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Light' could not be loaded, is 'Cairo-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-Regular' could not be loaded, is 'Cairo-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.cairoSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Cairo-SemiBold' could not be loaded, is 'Cairo-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 52 images.
  struct image {
    /// Image `RR_banner_1612440144`.
    static let rr_banner_1612440144 = Rswift.ImageResource(bundle: R.hostingBundle, name: "RR_banner_1612440144")
    /// Image `back_black`.
    static let back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_black")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `bag`.
    static let bag = Rswift.ImageResource(bundle: R.hostingBundle, name: "bag")
    /// Image `cart_ic`.
    static let cart_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart_ic")
    /// Image `cart`.
    static let cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "cart")
    /// Image `check_box_fill_18pt`.
    static let check_box_fill_18pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_box_fill_18pt")
    /// Image `check_box_nill_18pt`.
    static let check_box_nill_18pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_box_nill_18pt")
    /// Image `clocation`.
    static let clocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "clocation")
    /// Image `cutlery`.
    static let cutlery = Rswift.ImageResource(bundle: R.hostingBundle, name: "cutlery")
    /// Image `cutleryy`.
    static let cutleryy = Rswift.ImageResource(bundle: R.hostingBundle, name: "cutleryy")
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `delivery_marker`.
    static let delivery_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "delivery_marker")
    /// Image `downarrow`.
    static let downarrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downarrow")
    /// Image `drop_marker`.
    static let drop_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "drop_marker")
    /// Image `favoritefill`.
    static let favoritefill = Rswift.ImageResource(bundle: R.hostingBundle, name: "favoritefill")
    /// Image `favoritenill`.
    static let favoritenill = Rswift.ImageResource(bundle: R.hostingBundle, name: "favoritenill")
    /// Image `favourite_unsel`.
    static let favourite_unsel = Rswift.ImageResource(bundle: R.hostingBundle, name: "favourite_unsel")
    /// Image `flame_logo`.
    static let flame_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "flame_logo")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `home_sel`.
    static let home_sel = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_sel")
    /// Image `iTunesArtwork`.
    static let iTunesArtwork = Rswift.ImageResource(bundle: R.hostingBundle, name: "iTunesArtwork")
    /// Image `ic_02`.
    static let ic_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_02")
    /// Image `ic_03`.
    static let ic_03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_03")
    /// Image `ic_04`.
    static let ic_04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_04")
    /// Image `ic_05`.
    static let ic_05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_05")
    /// Image `ic_06`.
    static let ic_06 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_06")
    /// Image `ic_07`.
    static let ic_07 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_07")
    /// Image `kebabsville`.
    static let kebabsville = Rswift.ImageResource(bundle: R.hostingBundle, name: "kebabsville")
    /// Image `kebeb`.
    static let kebeb = Rswift.ImageResource(bundle: R.hostingBundle, name: "kebeb")
    /// Image `location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "location")
    /// Image `map_unsel`.
    static let map_unsel = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_unsel")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `next`.
    static let next = Rswift.ImageResource(bundle: R.hostingBundle, name: "next")
    /// Image `noti`.
    static let noti = Rswift.ImageResource(bundle: R.hostingBundle, name: "noti")
    /// Image `order_unsel`.
    static let order_unsel = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_unsel")
    /// Image `pencil`.
    static let pencil = Rswift.ImageResource(bundle: R.hostingBundle, name: "pencil")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `radio_check`.
    static let radio_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_check")
    /// Image `radio_uncheck`.
    static let radio_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_uncheck")
    /// Image `restaurant_marker`.
    static let restaurant_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "restaurant_marker")
    /// Image `right`.
    static let right = Rswift.ImageResource(bundle: R.hostingBundle, name: "right")
    /// Image `shopping-bag`.
    static let shoppingBag = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopping-bag")
    /// Image `side_menu_unsel`.
    static let side_menu_unsel = Rswift.ImageResource(bundle: R.hostingBundle, name: "side_menu_unsel")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `uncheck`.
    static let uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "uncheck")
    /// Image `uparrow`.
    static let uparrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "uparrow")
    /// Image `user_icon`.
    static let user_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_icon")
    /// Image `user_marker`.
    static let user_marker = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_marker")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RR_banner_1612440144", bundle: ..., traitCollection: ...)`
    static func rr_banner_1612440144(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rr_banner_1612440144, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_black", bundle: ..., traitCollection: ...)`
    static func back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bag", bundle: ..., traitCollection: ...)`
    static func bag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart", bundle: ..., traitCollection: ...)`
    static func cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cart_ic", bundle: ..., traitCollection: ...)`
    static func cart_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_box_fill_18pt", bundle: ..., traitCollection: ...)`
    static func check_box_fill_18pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_box_fill_18pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_box_nill_18pt", bundle: ..., traitCollection: ...)`
    static func check_box_nill_18pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_box_nill_18pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clocation", bundle: ..., traitCollection: ...)`
    static func clocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cutlery", bundle: ..., traitCollection: ...)`
    static func cutlery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cutlery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cutleryy", bundle: ..., traitCollection: ...)`
    static func cutleryy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cutleryy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delivery_marker", bundle: ..., traitCollection: ...)`
    static func delivery_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delivery_marker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downarrow", bundle: ..., traitCollection: ...)`
    static func downarrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downarrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "drop_marker", bundle: ..., traitCollection: ...)`
    static func drop_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.drop_marker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favoritefill", bundle: ..., traitCollection: ...)`
    static func favoritefill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoritefill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favoritenill", bundle: ..., traitCollection: ...)`
    static func favoritenill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoritenill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favourite_unsel", bundle: ..., traitCollection: ...)`
    static func favourite_unsel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favourite_unsel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flame_logo", bundle: ..., traitCollection: ...)`
    static func flame_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flame_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_sel", bundle: ..., traitCollection: ...)`
    static func home_sel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_sel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iTunesArtwork", bundle: ..., traitCollection: ...)`
    static func iTunesArtwork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iTunesArtwork, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_02", bundle: ..., traitCollection: ...)`
    static func ic_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_03", bundle: ..., traitCollection: ...)`
    static func ic_03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_04", bundle: ..., traitCollection: ...)`
    static func ic_04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_04, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_05", bundle: ..., traitCollection: ...)`
    static func ic_05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_05, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_06", bundle: ..., traitCollection: ...)`
    static func ic_06(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_06, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_07", bundle: ..., traitCollection: ...)`
    static func ic_07(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_07, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kebabsville", bundle: ..., traitCollection: ...)`
    static func kebabsville(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kebabsville, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kebeb", bundle: ..., traitCollection: ...)`
    static func kebeb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kebeb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_unsel", bundle: ..., traitCollection: ...)`
    static func map_unsel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_unsel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "next", bundle: ..., traitCollection: ...)`
    static func next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noti", bundle: ..., traitCollection: ...)`
    static func noti(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noti, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_unsel", bundle: ..., traitCollection: ...)`
    static func order_unsel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_unsel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pencil", bundle: ..., traitCollection: ...)`
    static func pencil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pencil, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radio_check", bundle: ..., traitCollection: ...)`
    static func radio_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radio_uncheck", bundle: ..., traitCollection: ...)`
    static func radio_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "restaurant_marker", bundle: ..., traitCollection: ...)`
    static func restaurant_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restaurant_marker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right", bundle: ..., traitCollection: ...)`
    static func right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopping-bag", bundle: ..., traitCollection: ...)`
    static func shoppingBag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shoppingBag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "side_menu_unsel", bundle: ..., traitCollection: ...)`
    static func side_menu_unsel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.side_menu_unsel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uncheck", bundle: ..., traitCollection: ...)`
    static func uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uparrow", bundle: ..., traitCollection: ...)`
    static func uparrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uparrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_icon", bundle: ..., traitCollection: ...)`
    static func user_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_marker", bundle: ..., traitCollection: ...)`
    static func user_marker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_marker, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 29 nibs.
  struct nib {
    /// Nib `AddressCell`.
    static let addressCell = _R.nib._AddressCell()
    /// Nib `AvailableDriverCell`.
    static let availableDriverCell = _R.nib._AvailableDriverCell()
    /// Nib `BannerCell`.
    static let bannerCell = _R.nib._BannerCell()
    /// Nib `CartCell`.
    static let cartCell = _R.nib._CartCell()
    /// Nib `CartsCell`.
    static let cartsCell = _R.nib._CartsCell()
    /// Nib `CategoryCell`.
    static let categoryCell = _R.nib._CategoryCell()
    /// Nib `DemoCell`.
    static let demoCell = _R.nib._DemoCell()
    /// Nib `DrvOrderCell`.
    static let drvOrderCell = _R.nib._DrvOrderCell()
    /// Nib `ExtraItemCell`.
    static let extraItemCell = _R.nib._ExtraItemCell()
    /// Nib `LeftSideMenu`.
    static let leftSideMenu = _R.nib._LeftSideMenu()
    /// Nib `MyEarningCell`.
    static let myEarningCell = _R.nib._MyEarningCell()
    /// Nib `NotificationCell`.
    static let notificationCell = _R.nib._NotificationCell()
    /// Nib `OfferCell`.
    static let offerCell = _R.nib._OfferCell()
    /// Nib `OrderCell`.
    static let orderCell = _R.nib._OrderCell()
    /// Nib `ProductCell`.
    static let productCell = _R.nib._ProductCell()
    /// Nib `ProductCheckCell`.
    static let productCheckCell = _R.nib._ProductCheckCell()
    /// Nib `ProductMenuCell`.
    static let productMenuCell = _R.nib._ProductMenuCell()
    /// Nib `ProductPlusMinusCell`.
    static let productPlusMinusCell = _R.nib._ProductPlusMinusCell()
    /// Nib `ProductPrintCell`.
    static let productPrintCell = _R.nib._ProductPrintCell()
    /// Nib `ProductRadioCell`.
    static let productRadioCell = _R.nib._ProductRadioCell()
    /// Nib `ProductTblCell`.
    static let productTblCell = _R.nib._ProductTblCell()
    /// Nib `ResOpenOrderCell`.
    static let resOpenOrderCell = _R.nib._ResOpenOrderCell()
    /// Nib `ResOpenOrderItemCell`.
    static let resOpenOrderItemCell = _R.nib._ResOpenOrderItemCell()
    /// Nib `RestChooseTimeCell`.
    static let restChooseTimeCell = _R.nib._RestChooseTimeCell()
    /// Nib `RestUpdProfileCell`.
    static let restUpdProfileCell = _R.nib._RestUpdProfileCell()
    /// Nib `RestaurantReviewCell`.
    static let restaurantReviewCell = _R.nib._RestaurantReviewCell()
    /// Nib `SizeCell`.
    static let sizeCell = _R.nib._SizeCell()
    /// Nib `SubAmountCell`.
    static let subAmountCell = _R.nib._SubAmountCell()
    /// Nib `TopRatedCell`.
    static let topRatedCell = _R.nib._TopRatedCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddressCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addressCell) instead")
    static func addressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AvailableDriverCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.availableDriverCell) instead")
    static func availableDriverCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.availableDriverCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BannerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bannerCell) instead")
    static func bannerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bannerCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartCell) instead")
    static func cartCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CartsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cartsCell) instead")
    static func cartsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cartsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryCell) instead")
    static func categoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DemoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.demoCell) instead")
    static func demoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.demoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DrvOrderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.drvOrderCell) instead")
    static func drvOrderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.drvOrderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExtraItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.extraItemCell) instead")
    static func extraItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.extraItemCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LeftSideMenu", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.leftSideMenu) instead")
    static func leftSideMenu(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.leftSideMenu)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyEarningCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myEarningCell) instead")
    static func myEarningCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myEarningCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationCell) instead")
    static func notificationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OfferCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.offerCell) instead")
    static func offerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.offerCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderCell) instead")
    static func orderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productCell) instead")
    static func productCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductCheckCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productCheckCell) instead")
    static func productCheckCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productCheckCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductMenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productMenuCell) instead")
    static func productMenuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productMenuCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductPlusMinusCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productPlusMinusCell) instead")
    static func productPlusMinusCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productPlusMinusCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductPrintCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productPrintCell) instead")
    static func productPrintCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productPrintCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductRadioCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productRadioCell) instead")
    static func productRadioCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productRadioCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductTblCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productTblCell) instead")
    static func productTblCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productTblCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ResOpenOrderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.resOpenOrderCell) instead")
    static func resOpenOrderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resOpenOrderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ResOpenOrderItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.resOpenOrderItemCell) instead")
    static func resOpenOrderItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resOpenOrderItemCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RestChooseTimeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.restChooseTimeCell) instead")
    static func restChooseTimeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.restChooseTimeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RestUpdProfileCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.restUpdProfileCell) instead")
    static func restUpdProfileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.restUpdProfileCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RestaurantReviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.restaurantReviewCell) instead")
    static func restaurantReviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.restaurantReviewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SizeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sizeCell) instead")
    static func sizeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sizeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SubAmountCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subAmountCell) instead")
    static func subAmountCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subAmountCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TopRatedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.topRatedCell) instead")
    static func topRatedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.topRatedCell)
    }
    #endif

    static func addressCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressCell? {
      return R.nib.addressCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressCell
    }

    static func availableDriverCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AvailableDriverCell? {
      return R.nib.availableDriverCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AvailableDriverCell
    }

    static func bannerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BannerCell? {
      return R.nib.bannerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BannerCell
    }

    static func cartCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartCell? {
      return R.nib.cartCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartCell
    }

    static func cartsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartsCell? {
      return R.nib.cartsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartsCell
    }

    static func categoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCell? {
      return R.nib.categoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCell
    }

    static func demoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DemoCell? {
      return R.nib.demoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DemoCell
    }

    static func drvOrderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DrvOrderCell? {
      return R.nib.drvOrderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DrvOrderCell
    }

    static func extraItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExtraItemCell? {
      return R.nib.extraItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExtraItemCell
    }

    static func leftSideMenu(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeftSideMenu? {
      return R.nib.leftSideMenu.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftSideMenu
    }

    static func myEarningCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyEarningCell? {
      return R.nib.myEarningCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyEarningCell
    }

    static func notificationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
      return R.nib.notificationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
    }

    static func offerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferCell? {
      return R.nib.offerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferCell
    }

    static func orderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderCell? {
      return R.nib.orderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderCell
    }

    static func productCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCell? {
      return R.nib.productCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCell
    }

    static func productCheckCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCheckCell? {
      return R.nib.productCheckCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCheckCell
    }

    static func productMenuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductMenuCell? {
      return R.nib.productMenuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductMenuCell
    }

    static func productPlusMinusCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductPlusMinusCell? {
      return R.nib.productPlusMinusCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductPlusMinusCell
    }

    static func productPrintCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductPrintCell? {
      return R.nib.productPrintCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductPrintCell
    }

    static func productRadioCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductRadioCell? {
      return R.nib.productRadioCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductRadioCell
    }

    static func productTblCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductTblCell? {
      return R.nib.productTblCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductTblCell
    }

    static func resOpenOrderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResOpenOrderCell? {
      return R.nib.resOpenOrderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResOpenOrderCell
    }

    static func resOpenOrderItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResOpenOrderItemCell? {
      return R.nib.resOpenOrderItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResOpenOrderItemCell
    }

    static func restChooseTimeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestChooseTimeCell? {
      return R.nib.restChooseTimeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestChooseTimeCell
    }

    static func restUpdProfileCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestUpdProfileCell? {
      return R.nib.restUpdProfileCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestUpdProfileCell
    }

    static func restaurantReviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestaurantReviewCell? {
      return R.nib.restaurantReviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestaurantReviewCell
    }

    static func sizeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SizeCell? {
      return R.nib.sizeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SizeCell
    }

    static func subAmountCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubAmountCell? {
      return R.nib.subAmountCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubAmountCell
    }

    static func topRatedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopRatedCell? {
      return R.nib.topRatedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopRatedCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 30 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddressCell`.
    static let addressCell: Rswift.ReuseIdentifier<AddressCell> = Rswift.ReuseIdentifier(identifier: "AddressCell")
    /// Reuse identifier `AvailableDriverCell`.
    static let availableDriverCell: Rswift.ReuseIdentifier<AvailableDriverCell> = Rswift.ReuseIdentifier(identifier: "AvailableDriverCell")
    /// Reuse identifier `BannerCell`.
    static let bannerCell: Rswift.ReuseIdentifier<BannerCell> = Rswift.ReuseIdentifier(identifier: "BannerCell")
    /// Reuse identifier `CartCell`.
    static let cartCell: Rswift.ReuseIdentifier<CartCell> = Rswift.ReuseIdentifier(identifier: "CartCell")
    /// Reuse identifier `CartsCell`.
    static let cartsCell: Rswift.ReuseIdentifier<CartsCell> = Rswift.ReuseIdentifier(identifier: "CartsCell")
    /// Reuse identifier `CategoryCell`.
    static let categoryCell: Rswift.ReuseIdentifier<CategoryCell> = Rswift.ReuseIdentifier(identifier: "CategoryCell")
    /// Reuse identifier `DemoCell`.
    static let demoCell: Rswift.ReuseIdentifier<DemoCell> = Rswift.ReuseIdentifier(identifier: "DemoCell")
    /// Reuse identifier `DrvOrderCell`.
    static let drvOrderCell: Rswift.ReuseIdentifier<DrvOrderCell> = Rswift.ReuseIdentifier(identifier: "DrvOrderCell")
    /// Reuse identifier `ExtraItemCell`.
    static let extraItemCell: Rswift.ReuseIdentifier<ExtraItemCell> = Rswift.ReuseIdentifier(identifier: "ExtraItemCell")
    /// Reuse identifier `LeftSideMenu`.
    static let leftSideMenu: Rswift.ReuseIdentifier<LeftSideMenu> = Rswift.ReuseIdentifier(identifier: "LeftSideMenu")
    /// Reuse identifier `MyEarningCell`.
    static let myEarningCell: Rswift.ReuseIdentifier<MyEarningCell> = Rswift.ReuseIdentifier(identifier: "MyEarningCell")
    /// Reuse identifier `NotificationCell`.
    static let notificationCell: Rswift.ReuseIdentifier<NotificationCell> = Rswift.ReuseIdentifier(identifier: "NotificationCell")
    /// Reuse identifier `OfferCell`.
    static let offerCell: Rswift.ReuseIdentifier<OfferCell> = Rswift.ReuseIdentifier(identifier: "OfferCell")
    /// Reuse identifier `OrderCell`.
    static let orderCell: Rswift.ReuseIdentifier<OrderCell> = Rswift.ReuseIdentifier(identifier: "OrderCell")
    /// Reuse identifier `ProductCell`.
    static let productCell: Rswift.ReuseIdentifier<ProductCell> = Rswift.ReuseIdentifier(identifier: "ProductCell")
    /// Reuse identifier `ProductCheckCell`.
    static let productCheckCell: Rswift.ReuseIdentifier<ProductCheckCell> = Rswift.ReuseIdentifier(identifier: "ProductCheckCell")
    /// Reuse identifier `ProductMenuCell`.
    static let productMenuCell: Rswift.ReuseIdentifier<ProductMenuCell> = Rswift.ReuseIdentifier(identifier: "ProductMenuCell")
    /// Reuse identifier `ProductPlusMinusCell`.
    static let productPlusMinusCell: Rswift.ReuseIdentifier<ProductPlusMinusCell> = Rswift.ReuseIdentifier(identifier: "ProductPlusMinusCell")
    /// Reuse identifier `ProductPrintCell`.
    static let productPrintCell: Rswift.ReuseIdentifier<ProductPrintCell> = Rswift.ReuseIdentifier(identifier: "ProductPrintCell")
    /// Reuse identifier `ProductRadioCell`.
    static let productRadioCell: Rswift.ReuseIdentifier<ProductRadioCell> = Rswift.ReuseIdentifier(identifier: "ProductRadioCell")
    /// Reuse identifier `ProductTblCell`.
    static let productTblCell: Rswift.ReuseIdentifier<ProductTblCell> = Rswift.ReuseIdentifier(identifier: "ProductTblCell")
    /// Reuse identifier `ResOpenOrderCell`.
    static let resOpenOrderCell: Rswift.ReuseIdentifier<ResOpenOrderCell> = Rswift.ReuseIdentifier(identifier: "ResOpenOrderCell")
    /// Reuse identifier `ResOpenOrderItemCell`.
    static let resOpenOrderItemCell: Rswift.ReuseIdentifier<ResOpenOrderItemCell> = Rswift.ReuseIdentifier(identifier: "ResOpenOrderItemCell")
    /// Reuse identifier `RestChooseTimeCell`.
    static let restChooseTimeCell: Rswift.ReuseIdentifier<RestChooseTimeCell> = Rswift.ReuseIdentifier(identifier: "RestChooseTimeCell")
    /// Reuse identifier `RestUpdProfileCell`.
    static let restUpdProfileCell: Rswift.ReuseIdentifier<RestUpdProfileCell> = Rswift.ReuseIdentifier(identifier: "RestUpdProfileCell")
    /// Reuse identifier `RestaurantReviewCell`.
    static let restaurantReviewCell: Rswift.ReuseIdentifier<RestaurantReviewCell> = Rswift.ReuseIdentifier(identifier: "RestaurantReviewCell")
    /// Reuse identifier `SizeCell`.
    static let sizeCell: Rswift.ReuseIdentifier<SizeCell> = Rswift.ReuseIdentifier(identifier: "SizeCell")
    /// Reuse identifier `SubAmountCell`.
    static let subAmountCell: Rswift.ReuseIdentifier<SubAmountCell> = Rswift.ReuseIdentifier(identifier: "SubAmountCell")
    /// Reuse identifier `TopRatedCell`.
    static let topRatedCell: Rswift.ReuseIdentifier<TopRatedCell> = Rswift.ReuseIdentifier(identifier: "TopRatedCell")
    /// Reuse identifier `searchLocationCell`.
    static let searchLocationCell: Rswift.ReuseIdentifier<SearchLocationCell> = Rswift.ReuseIdentifier(identifier: "searchLocationCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 13 localization tables.
  struct string {
    /// This `R.string.availableDriverCell` struct is generated, and contains static references to 4 localization keys.
    struct availableDriverCell {
      /// en translation: Availabel
      ///
      /// Locales: en, da
      static let mrC0LHiText = Rswift.StringResource(key: "4mr-c0-lHi.text", tableName: "AvailableDriverCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Click to assign
      ///
      /// Locales: en, da
      static let hWH4Z8HcNormalTitle = Rswift.StringResource(key: "hWH-4Z-8Hc.normalTitle", tableName: "AvailableDriverCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, da
      static let mpEF8WLText = Rswift.StringResource(key: "5Mp-eF-8WL.text", tableName: "AvailableDriverCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, da
      static let wQzUlJCbText = Rswift.StringResource(key: "wQz-Ul-JCb.text", tableName: "AvailableDriverCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)

      /// en translation: Availabel
      ///
      /// Locales: en, da
      static func mrC0LHiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4mr-c0-lHi.text", tableName: "AvailableDriverCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AvailableDriverCell", preferredLanguages: preferredLanguages) else {
          return "4mr-c0-lHi.text"
        }

        return NSLocalizedString("4mr-c0-lHi.text", tableName: "AvailableDriverCell", bundle: bundle, comment: "")
      }

      /// en translation: Click to assign
      ///
      /// Locales: en, da
      static func hWH4Z8HcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hWH-4Z-8Hc.normalTitle", tableName: "AvailableDriverCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AvailableDriverCell", preferredLanguages: preferredLanguages) else {
          return "hWH-4Z-8Hc.normalTitle"
        }

        return NSLocalizedString("hWH-4Z-8Hc.normalTitle", tableName: "AvailableDriverCell", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, da
      static func mpEF8WLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Mp-eF-8WL.text", tableName: "AvailableDriverCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AvailableDriverCell", preferredLanguages: preferredLanguages) else {
          return "5Mp-eF-8WL.text"
        }

        return NSLocalizedString("5Mp-eF-8WL.text", tableName: "AvailableDriverCell", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, da
      static func wQzUlJCbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wQz-Ul-JCb.text", tableName: "AvailableDriverCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AvailableDriverCell", preferredLanguages: preferredLanguages) else {
          return "wQz-Ul-JCb.text"
        }

        return NSLocalizedString("wQz-Ul-JCb.text", tableName: "AvailableDriverCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.cartCell` struct is generated, and contains static references to 9 localization keys.
    struct cartCell {
      /// en translation: +
      ///
      /// Locales: en, da
      static let dvBXQMQaNormalTitle = Rswift.StringResource(key: "dvB-XQ-MQa.normalTitle", tableName: "CartCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: -
      ///
      /// Locales: en, da
      static let cd7lPuYNormalTitle = Rswift.StringResource(key: "3CD-7l-puY.normalTitle", tableName: "CartCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 0
      ///
      /// Locales: en, da
      static let hlXGMLMText = Rswift.StringResource(key: "8Hl-xG-MLM.text", tableName: "CartCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 00
      ///
      /// Locales: en, da
      static let e9iCwLreText = Rswift.StringResource(key: "E9i-cw-lre.text", tableName: "CartCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: en, da
      static let rdMSZ1NText = Rswift.StringResource(key: "8rd-mS-z1N.text", tableName: "CartCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Apply Offer
      ///
      /// Locales: en, da
      static let m6U6jRoUNormalTitle = Rswift.StringResource(key: "m6U-6j-RoU.normalTitle", tableName: "CartCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Category Name
      ///
      /// Locales: en, da
      static let i68PBBZVText = Rswift.StringResource(key: "I68-PB-BZV.text", tableName: "CartCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Product Name
      ///
      /// Locales: en, da
      static let jabOHXt4Text = Rswift.StringResource(key: "jab-OH-xt4.text", tableName: "CartCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: lorem ipsum
      ///
      /// Locales: en, da
      static let d292RJQNText = Rswift.StringResource(key: "d29-2R-JQN.text", tableName: "CartCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)

      /// en translation: +
      ///
      /// Locales: en, da
      static func dvBXQMQaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dvB-XQ-MQa.normalTitle", tableName: "CartCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartCell", preferredLanguages: preferredLanguages) else {
          return "dvB-XQ-MQa.normalTitle"
        }

        return NSLocalizedString("dvB-XQ-MQa.normalTitle", tableName: "CartCell", bundle: bundle, comment: "")
      }

      /// en translation: -
      ///
      /// Locales: en, da
      static func cd7lPuYNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3CD-7l-puY.normalTitle", tableName: "CartCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartCell", preferredLanguages: preferredLanguages) else {
          return "3CD-7l-puY.normalTitle"
        }

        return NSLocalizedString("3CD-7l-puY.normalTitle", tableName: "CartCell", bundle: bundle, comment: "")
      }

      /// en translation: 0
      ///
      /// Locales: en, da
      static func hlXGMLMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8Hl-xG-MLM.text", tableName: "CartCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartCell", preferredLanguages: preferredLanguages) else {
          return "8Hl-xG-MLM.text"
        }

        return NSLocalizedString("8Hl-xG-MLM.text", tableName: "CartCell", bundle: bundle, comment: "")
      }

      /// en translation: 00
      ///
      /// Locales: en, da
      static func e9iCwLreText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("E9i-cw-lre.text", tableName: "CartCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartCell", preferredLanguages: preferredLanguages) else {
          return "E9i-cw-lre.text"
        }

        return NSLocalizedString("E9i-cw-lre.text", tableName: "CartCell", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: en, da
      static func rdMSZ1NText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8rd-mS-z1N.text", tableName: "CartCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartCell", preferredLanguages: preferredLanguages) else {
          return "8rd-mS-z1N.text"
        }

        return NSLocalizedString("8rd-mS-z1N.text", tableName: "CartCell", bundle: bundle, comment: "")
      }

      /// en translation: Apply Offer
      ///
      /// Locales: en, da
      static func m6U6jRoUNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m6U-6j-RoU.normalTitle", tableName: "CartCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartCell", preferredLanguages: preferredLanguages) else {
          return "m6U-6j-RoU.normalTitle"
        }

        return NSLocalizedString("m6U-6j-RoU.normalTitle", tableName: "CartCell", bundle: bundle, comment: "")
      }

      /// en translation: Category Name
      ///
      /// Locales: en, da
      static func i68PBBZVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I68-PB-BZV.text", tableName: "CartCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartCell", preferredLanguages: preferredLanguages) else {
          return "I68-PB-BZV.text"
        }

        return NSLocalizedString("I68-PB-BZV.text", tableName: "CartCell", bundle: bundle, comment: "")
      }

      /// en translation: Product Name
      ///
      /// Locales: en, da
      static func jabOHXt4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jab-OH-xt4.text", tableName: "CartCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartCell", preferredLanguages: preferredLanguages) else {
          return "jab-OH-xt4.text"
        }

        return NSLocalizedString("jab-OH-xt4.text", tableName: "CartCell", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum
      ///
      /// Locales: en, da
      static func d292RJQNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("d29-2R-JQN.text", tableName: "CartCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartCell", preferredLanguages: preferredLanguages) else {
          return "d29-2R-JQN.text"
        }

        return NSLocalizedString("d29-2R-JQN.text", tableName: "CartCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.cartsCell` struct is generated, and contains static references to 9 localization keys.
    struct cartsCell {
      /// en translation: +
      ///
      /// Locales: en, da
      static let sbhM8TdbNormalTitle = Rswift.StringResource(key: "sbh-m8-tdb.normalTitle", tableName: "CartsCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: -
      ///
      /// Locales: en, da
      static let q3i1yVi0NormalTitle = Rswift.StringResource(key: "Q3i-1y-vi0.normalTitle", tableName: "CartsCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 0
      ///
      /// Locales: en, da
      static let torQ0BgeText = Rswift.StringResource(key: "tor-q0-Bge.text", tableName: "CartsCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 00
      ///
      /// Locales: en, da
      static let uxCyNZWText = Rswift.StringResource(key: "4Ux-Cy-nZW.text", tableName: "CartsCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: en, da
      static let iD3Md7Text = Rswift.StringResource(key: "15i-d3-md7.text", tableName: "CartsCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Apply Offer
      ///
      /// Locales: en, da
      static let vfqYyZnyNormalTitle = Rswift.StringResource(key: "Vfq-Yy-Zny.normalTitle", tableName: "CartsCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Category Name
      ///
      /// Locales: en, da
      static let s7qVMSnOText = Rswift.StringResource(key: "S7q-VM-SnO.text", tableName: "CartsCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Product Name
      ///
      /// Locales: en, da
      static let dWVM4VApText = Rswift.StringResource(key: "dWV-M4-VAp.text", tableName: "CartsCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: lorem ipsum
      ///
      /// Locales: en, da
      static let kphxdPvOText = Rswift.StringResource(key: "KPH-XD-pvO.text", tableName: "CartsCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)

      /// en translation: +
      ///
      /// Locales: en, da
      static func sbhM8TdbNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sbh-m8-tdb.normalTitle", tableName: "CartsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartsCell", preferredLanguages: preferredLanguages) else {
          return "sbh-m8-tdb.normalTitle"
        }

        return NSLocalizedString("sbh-m8-tdb.normalTitle", tableName: "CartsCell", bundle: bundle, comment: "")
      }

      /// en translation: -
      ///
      /// Locales: en, da
      static func q3i1yVi0NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Q3i-1y-vi0.normalTitle", tableName: "CartsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartsCell", preferredLanguages: preferredLanguages) else {
          return "Q3i-1y-vi0.normalTitle"
        }

        return NSLocalizedString("Q3i-1y-vi0.normalTitle", tableName: "CartsCell", bundle: bundle, comment: "")
      }

      /// en translation: 0
      ///
      /// Locales: en, da
      static func torQ0BgeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tor-q0-Bge.text", tableName: "CartsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartsCell", preferredLanguages: preferredLanguages) else {
          return "tor-q0-Bge.text"
        }

        return NSLocalizedString("tor-q0-Bge.text", tableName: "CartsCell", bundle: bundle, comment: "")
      }

      /// en translation: 00
      ///
      /// Locales: en, da
      static func uxCyNZWText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Ux-Cy-nZW.text", tableName: "CartsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartsCell", preferredLanguages: preferredLanguages) else {
          return "4Ux-Cy-nZW.text"
        }

        return NSLocalizedString("4Ux-Cy-nZW.text", tableName: "CartsCell", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: en, da
      static func iD3Md7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("15i-d3-md7.text", tableName: "CartsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartsCell", preferredLanguages: preferredLanguages) else {
          return "15i-d3-md7.text"
        }

        return NSLocalizedString("15i-d3-md7.text", tableName: "CartsCell", bundle: bundle, comment: "")
      }

      /// en translation: Apply Offer
      ///
      /// Locales: en, da
      static func vfqYyZnyNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vfq-Yy-Zny.normalTitle", tableName: "CartsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartsCell", preferredLanguages: preferredLanguages) else {
          return "Vfq-Yy-Zny.normalTitle"
        }

        return NSLocalizedString("Vfq-Yy-Zny.normalTitle", tableName: "CartsCell", bundle: bundle, comment: "")
      }

      /// en translation: Category Name
      ///
      /// Locales: en, da
      static func s7qVMSnOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("S7q-VM-SnO.text", tableName: "CartsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartsCell", preferredLanguages: preferredLanguages) else {
          return "S7q-VM-SnO.text"
        }

        return NSLocalizedString("S7q-VM-SnO.text", tableName: "CartsCell", bundle: bundle, comment: "")
      }

      /// en translation: Product Name
      ///
      /// Locales: en, da
      static func dWVM4VApText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dWV-M4-VAp.text", tableName: "CartsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartsCell", preferredLanguages: preferredLanguages) else {
          return "dWV-M4-VAp.text"
        }

        return NSLocalizedString("dWV-M4-VAp.text", tableName: "CartsCell", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum
      ///
      /// Locales: en, da
      static func kphxdPvOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KPH-XD-pvO.text", tableName: "CartsCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "CartsCell", preferredLanguages: preferredLanguages) else {
          return "KPH-XD-pvO.text"
        }

        return NSLocalizedString("KPH-XD-pvO.text", tableName: "CartsCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.drvOrderCell` struct is generated, and contains static references to 18 localization keys.
    struct drvOrderCell {
      /// en translation: $10
      ///
      /// Locales: en, da
      static let p669GG0BText = Rswift.StringResource(key: "P66-9G-g0B.text", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 2021-04-20 07:08:15
      ///
      /// Locales: en, da
      static let gxqAGVd1Text = Rswift.StringResource(key: "gxq-AG-vd1.text", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 4.5
      ///
      /// Locales: en, da
      static let mShHW2QVText = Rswift.StringResource(key: "mSh-hW-2QV.text", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Accept
      ///
      /// Locales: en, da
      static let daEFJQe6NormalTitle = Rswift.StringResource(key: "daE-fJ-qe6.normalTitle", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Delivered
      ///
      /// Locales: en, da
      static let s9xMzIZNText = Rswift.StringResource(key: "S9x-Mz-IZN.text", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: ITEMS
      ///
      /// Locales: en, da
      static let xUgWv3kcText = Rswift.StringResource(key: "XUg-wv-3kc.text", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Notify User to Arrived
      ///
      /// Locales: en, da
      static let tu9eAe4NormalTitle = Rswift.StringResource(key: "5Tu-9e-ae4.normalTitle", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: ORDERED ON
      ///
      /// Locales: en, da
      static let mmwBrF2zText = Rswift.StringResource(key: "MMW-Br-f2z.text", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Open
      ///
      /// Locales: en, da
      static let t9RaLyaText = Rswift.StringResource(key: "9t9-Ra-lya.text", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Order Id: 1
      ///
      /// Locales: en, da
      static let orpODYhPText = Rswift.StringResource(key: "Orp-OD-yhP.text", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Print bill
      ///
      /// Locales: en, da
      static let rTLPe9MeNormalTitle = Rswift.StringResource(key: "rTL-pe-9Me.normalTitle", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Reject
      ///
      /// Locales: en, da
      static let sfBJ8P0DNormalTitle = Rswift.StringResource(key: "sfB-j8-p0D.normalTitle", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: See on map
      ///
      /// Locales: en, da
      static let emZMvSM6NormalTitle = Rswift.StringResource(key: "emZ-Mv-sM6.normalTitle", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Test Item
      ///
      /// Locales: en, da
      static let bPCeWV8Text = Rswift.StringResource(key: "6bP-ce-wV8.text", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Test Item
      ///
      /// Locales: en, da
      static let j5TA2EeoText = Rswift.StringResource(key: "j5T-a2-eeo.text", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Total: $10
      ///
      /// Locales: en, da
      static let ly5O12BwText = Rswift.StringResource(key: "ly5-o1-2Bw.text", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: en, da
      static let lx0UnSaqText = Rswift.StringResource(key: "Lx0-Un-Saq.text", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: en, da
      static let wRjIKQ66Text = Rswift.StringResource(key: "WRj-iK-Q66.text", tableName: "DrvOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)

      /// en translation: $10
      ///
      /// Locales: en, da
      static func p669GG0BText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("P66-9G-g0B.text", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "P66-9G-g0B.text"
        }

        return NSLocalizedString("P66-9G-g0B.text", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: 2021-04-20 07:08:15
      ///
      /// Locales: en, da
      static func gxqAGVd1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gxq-AG-vd1.text", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "gxq-AG-vd1.text"
        }

        return NSLocalizedString("gxq-AG-vd1.text", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: 4.5
      ///
      /// Locales: en, da
      static func mShHW2QVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mSh-hW-2QV.text", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "mSh-hW-2QV.text"
        }

        return NSLocalizedString("mSh-hW-2QV.text", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Accept
      ///
      /// Locales: en, da
      static func daEFJQe6NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("daE-fJ-qe6.normalTitle", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "daE-fJ-qe6.normalTitle"
        }

        return NSLocalizedString("daE-fJ-qe6.normalTitle", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Delivered
      ///
      /// Locales: en, da
      static func s9xMzIZNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("S9x-Mz-IZN.text", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "S9x-Mz-IZN.text"
        }

        return NSLocalizedString("S9x-Mz-IZN.text", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: ITEMS
      ///
      /// Locales: en, da
      static func xUgWv3kcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XUg-wv-3kc.text", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "XUg-wv-3kc.text"
        }

        return NSLocalizedString("XUg-wv-3kc.text", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Notify User to Arrived
      ///
      /// Locales: en, da
      static func tu9eAe4NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Tu-9e-ae4.normalTitle", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "5Tu-9e-ae4.normalTitle"
        }

        return NSLocalizedString("5Tu-9e-ae4.normalTitle", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: ORDERED ON
      ///
      /// Locales: en, da
      static func mmwBrF2zText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MMW-Br-f2z.text", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "MMW-Br-f2z.text"
        }

        return NSLocalizedString("MMW-Br-f2z.text", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Open
      ///
      /// Locales: en, da
      static func t9RaLyaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9t9-Ra-lya.text", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "9t9-Ra-lya.text"
        }

        return NSLocalizedString("9t9-Ra-lya.text", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Order Id: 1
      ///
      /// Locales: en, da
      static func orpODYhPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Orp-OD-yhP.text", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "Orp-OD-yhP.text"
        }

        return NSLocalizedString("Orp-OD-yhP.text", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Print bill
      ///
      /// Locales: en, da
      static func rTLPe9MeNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rTL-pe-9Me.normalTitle", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "rTL-pe-9Me.normalTitle"
        }

        return NSLocalizedString("rTL-pe-9Me.normalTitle", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Reject
      ///
      /// Locales: en, da
      static func sfBJ8P0DNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sfB-j8-p0D.normalTitle", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "sfB-j8-p0D.normalTitle"
        }

        return NSLocalizedString("sfB-j8-p0D.normalTitle", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: See on map
      ///
      /// Locales: en, da
      static func emZMvSM6NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emZ-Mv-sM6.normalTitle", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "emZ-Mv-sM6.normalTitle"
        }

        return NSLocalizedString("emZ-Mv-sM6.normalTitle", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Test Item
      ///
      /// Locales: en, da
      static func bPCeWV8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6bP-ce-wV8.text", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "6bP-ce-wV8.text"
        }

        return NSLocalizedString("6bP-ce-wV8.text", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Test Item
      ///
      /// Locales: en, da
      static func j5TA2EeoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("j5T-a2-eeo.text", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "j5T-a2-eeo.text"
        }

        return NSLocalizedString("j5T-a2-eeo.text", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Total: $10
      ///
      /// Locales: en, da
      static func ly5O12BwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ly5-o1-2Bw.text", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "ly5-o1-2Bw.text"
        }

        return NSLocalizedString("ly5-o1-2Bw.text", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: en, da
      static func lx0UnSaqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lx0-Un-Saq.text", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "Lx0-Un-Saq.text"
        }

        return NSLocalizedString("Lx0-Un-Saq.text", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: en, da
      static func wRjIKQ66Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WRj-iK-Q66.text", tableName: "DrvOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "DrvOrderCell", preferredLanguages: preferredLanguages) else {
          return "WRj-iK-Q66.text"
        }

        return NSLocalizedString("WRj-iK-Q66.text", tableName: "DrvOrderCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 154 localization keys.
    struct localizable {
      /// en translation: About us
      ///
      /// Locales: en, da
      static let aboutUs = Rswift.StringResource(key: "About us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Action Code
      ///
      /// Locales: en, da
      static let actionCode = Rswift.StringResource(key: "Action Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Add Details
      ///
      /// Locales: en, da
      static let addDetails = Rswift.StringResource(key: "Add Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Address Deleted successfully
      ///
      /// Locales: en, da
      static let addressDeletedSuccessfully = Rswift.StringResource(key: "Address Deleted successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Address:
      ///
      /// Locales: en, da
      static let address = Rswift.StringResource(key: "Address:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Alert
      ///
      /// Locales: en, da
      static let alert = Rswift.StringResource(key: "Alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en, da
      static let amount = Rswift.StringResource(key: "Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: App is available in Alaryan branch
      ///
      /// Locales: en, da
      static let appIsAvailableInAlaryanBranch = Rswift.StringResource(key: "App is available in Alaryan branch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Apply Offer
      ///
      /// Locales: en, da
      static let applyOffer = Rswift.StringResource(key: "Apply Offer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Are you sure you want to log out?
      ///
      /// Locales: en, da
      static let areYouSureYouWantToLogOut = Rswift.StringResource(key: "Are you sure you want to log out?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Are you sure, you want to delete account
      ///
      /// Locales: en, da
      static let areYouSureYouWantToDeleteAccount = Rswift.StringResource(key: "Are you sure, you want to delete account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Assigned Driver
      ///
      /// Locales: en, da
      static let assignedDriver = Rswift.StringResource(key: "Assigned Driver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Available Driver
      ///
      /// Locales: en, da
      static let availableDriver = Rswift.StringResource(key: "Available Driver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Camera
      ///
      /// Locales: en, da
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, da
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Cart deleted successfully
      ///
      /// Locales: en, da
      static let cartDeletedSuccessfully = Rswift.StringResource(key: "Cart deleted successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Cart updated successfully
      ///
      /// Locales: en, da
      static let cartUpdatedSuccessfully = Rswift.StringResource(key: "Cart updated successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Change Language
      ///
      /// Locales: en, da
      static let changeLanguage = Rswift.StringResource(key: "Change Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, da
      static let changePassword = Rswift.StringResource(key: "Change Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Check
      ///
      /// Locales: en, da
      static let check = Rswift.StringResource(key: "Check", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Choose Language
      ///
      /// Locales: en, da
      static let chooseLanguage = Rswift.StringResource(key: "Choose Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Click to deliver
      ///
      /// Locales: en, da
      static let clickToDeliver = Rswift.StringResource(key: "Click to deliver", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Completed
      ///
      /// Locales: en, da
      static let completed = Rswift.StringResource(key: "Completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Country
      ///
      /// Locales: en, da
      static let country = Rswift.StringResource(key: "Country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Currency
      ///
      /// Locales: en, da
      static let currency = Rswift.StringResource(key: "Currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: DATE
      ///
      /// Locales: en, da
      static let datE = Rswift.StringResource(key: "DATE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, da
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Edit Profile
      ///
      /// Locales: en, da
      static let editProfile = Rswift.StringResource(key: "Edit Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, da
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Enter email address
      ///
      /// Locales: en, da
      static let enterEmailAddress = Rswift.StringResource(key: "Enter email address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Enter offer code
      ///
      /// Locales: en, da
      static let enterOfferCode = Rswift.StringResource(key: "Enter offer code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Enter your business code
      ///
      /// Locales: en, da
      static let enterYourBusinessCode = Rswift.StringResource(key: "Enter your business code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Expire on
      ///
      /// Locales: en, da
      static let expireOn = Rswift.StringResource(key: "Expire on", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Extra Items
      ///
      /// Locales: en, da
      static let extraItems = Rswift.StringResource(key: "Extra Items", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: For continue you need to accept
      ///
      /// Locales: en, da
      static let forContinueYouNeedToAccept = Rswift.StringResource(key: "For continue you need to accept", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Forgot Password
      ///
      /// Locales: en, da
      static let forgotPassword = Rswift.StringResource(key: "Forgot Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Gallery
      ///
      /// Locales: en, da
      static let gallery = Rswift.StringResource(key: "Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Gift
      ///
      /// Locales: en, da
      static let gift = Rswift.StringResource(key: "Gift", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Give Rating
      ///
      /// Locales: en, da
      static let giveRating = Rswift.StringResource(key: "Give Rating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Have not you recieved the code? 
      ///
      /// Locales: en, da
      static let haveNotYouRecievedTheCode = Rswift.StringResource(key: "Have not you recieved the code? ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Help & Support
      ///
      /// Locales: en, da
      static let helpSupport = Rswift.StringResource(key: "Help & Support", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, da
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Incorrect OTP
      ///
      /// Locales: en, da
      static let incorrectOTP = Rswift.StringResource(key: "Incorrect OTP", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Incorrect code.
      ///
      /// Locales: en, da
      static let incorrectCode = Rswift.StringResource(key: "Incorrect code.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Invalid email address
      ///
      /// Locales: en, da
      static let invalidEmailAddress = Rswift.StringResource(key: "Invalid email address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Item Detail
      ///
      /// Locales: en, da
      static let itemDetail = Rswift.StringResource(key: "Item Detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Item added to cart successfully
      ///
      /// Locales: en, da
      static let itemAddedToCartSuccessfully = Rswift.StringResource(key: "Item added to cart successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Load More
      ///
      /// Locales: en, da
      static let loadMore = Rswift.StringResource(key: "Load More", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Loading
      ///
      /// Locales: en, da
      static let loading = Rswift.StringResource(key: "Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, da
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, da
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Members
      ///
      /// Locales: en, da
      static let members = Rswift.StringResource(key: "Members", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Menu
      ///
      /// Locales: en, da
      static let menu = Rswift.StringResource(key: "Menu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Mobile:
      ///
      /// Locales: en, da
      static let mobile = Rswift.StringResource(key: "Mobile:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: My Address
      ///
      /// Locales: en, da
      static let myAddress = Rswift.StringResource(key: "My Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: My Cart
      ///
      /// Locales: en, da
      static let myCart = Rswift.StringResource(key: "My Cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: My Chat
      ///
      /// Locales: en, da
      static let myChat = Rswift.StringResource(key: "My Chat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: My Earning
      ///
      /// Locales: en, da
      static let myEarning = Rswift.StringResource(key: "My Earning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: My Earnings
      ///
      /// Locales: en, da
      static let myEarnings = Rswift.StringResource(key: "My Earnings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: My Favourite
      ///
      /// Locales: en, da
      static let myFavourite = Rswift.StringResource(key: "My Favourite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: My Profile
      ///
      /// Locales: en, da
      static let myProfile = Rswift.StringResource(key: "My Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: My Reviews
      ///
      /// Locales: en, da
      static let myReviews = Rswift.StringResource(key: "My Reviews", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: My Wallet
      ///
      /// Locales: en, da
      static let myWallet = Rswift.StringResource(key: "My Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: NA
      ///
      /// Locales: en, da
      static let nA = Rswift.StringResource(key: "NA", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, da
      static let name = Rswift.StringResource(key: "Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: New password sent to your email.
      ///
      /// Locales: en, da
      static let newPasswordSentToYourEmail = Rswift.StringResource(key: "New password sent to your email.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, da
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: No Internet Connection. Make sure your device is connected to the internet.
      ///
      /// Locales: en, da
      static let noInternetConnectionMakeSureYourDeviceIsConnectedToTheInternet = Rswift.StringResource(key: "No Internet Connection. Make sure your device is connected to the internet.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: No data available to show
      ///
      /// Locales: en, da
      static let noDataAvailableToShow = Rswift.StringResource(key: "No data available to show", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: No offers available
      ///
      /// Locales: en, da
      static let noOffersAvailable = Rswift.StringResource(key: "No offers available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Not Paid
      ///
      /// Locales: en, da
      static let notPaid = Rswift.StringResource(key: "Not Paid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: en, da
      static let notifications = Rswift.StringResource(key: "Notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Notify driver again
      ///
      /// Locales: en, da
      static let notifyDriverAgain = Rswift.StringResource(key: "Notify driver again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Notify user for order picked
      ///
      /// Locales: en, da
      static let notifyUserForOrderPicked = Rswift.StringResource(key: "Notify user for order picked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Notify user to arrived
      ///
      /// Locales: en, da
      static let notifyUserToArrived = Rswift.StringResource(key: "Notify user to arrived", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, da
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Offer
      ///
      /// Locales: en, da
      static let offer = Rswift.StringResource(key: "Offer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Offers
      ///
      /// Locales: en, da
      static let offers = Rswift.StringResource(key: "Offers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: On the way to pickup
      ///
      /// Locales: en, da
      static let onTheWayToPickup = Rswift.StringResource(key: "On the way to pickup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Optional
      ///
      /// Locales: en, da
      static let optional = Rswift.StringResource(key: "Optional", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Order Details
      ///
      /// Locales: en, da
      static let orderDetails = Rswift.StringResource(key: "Order Details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Order ID:
      ///
      /// Locales: en, da
      static let orderID = Rswift.StringResource(key: "Order ID:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Order Id:
      ///
      /// Locales: en, da
      static let orderId = Rswift.StringResource(key: "Order Id:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Order Now
      ///
      /// Locales: en, da
      static let orderNow = Rswift.StringResource(key: "Order Now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Order place successfully
      ///
      /// Locales: en, da
      static let orderPlaceSuccessfully = Rswift.StringResource(key: "Order place successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Order placed successfully
      ///
      /// Locales: en, da
      static let orderPlacedSuccessfully = Rswift.StringResource(key: "Order placed successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Orders
      ///
      /// Locales: en, da
      static let orders = Rswift.StringResource(key: "Orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Password changed successfully
      ///
      /// Locales: en, da
      static let passwordChangedSuccessfully = Rswift.StringResource(key: "Password changed successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Password not matched
      ///
      /// Locales: en, da
      static let passwordNotMatched = Rswift.StringResource(key: "Password not matched", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Pending
      ///
      /// Locales: en, da
      static let pending = Rswift.StringResource(key: "Pending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Phone Number :
      ///
      /// Locales: en, da
      static let phoneNumber = Rswift.StringResource(key: "Phone Number :", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Please Wait!!
      ///
      /// Locales: en, da
      static let pleaseWait = Rswift.StringResource(key: "Please Wait!!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Please check terms and condition
      ///
      /// Locales: en, da
      static let pleaseCheckTermsAndCondition = Rswift.StringResource(key: "Please check terms and condition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Please check your Mobile and check SMS for new password.
      ///
      /// Locales: en, da
      static let pleaseCheckYourMobileAndCheckSMSForNewPassword = Rswift.StringResource(key: "Please check your Mobile and check SMS for new password.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Please check your email to reset
      ///
      /// Locales: en, da
      static let pleaseCheckYourEmailToReset = Rswift.StringResource(key: "Please check your email to reset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Please enter confirm password
      ///
      /// Locales: en, da
      static let pleaseEnterConfirmPassword = Rswift.StringResource(key: "Please enter confirm password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Please enter email address
      ///
      /// Locales: en, da
      static let pleaseEnterEmailAddress = Rswift.StringResource(key: "Please enter email address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Please enter full name
      ///
      /// Locales: en, da
      static let pleaseEnterFullName = Rswift.StringResource(key: "Please enter full name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Please enter message
      ///
      /// Locales: en, da
      static let pleaseEnterMessage = Rswift.StringResource(key: "Please enter message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Please enter password
      ///
      /// Locales: en, da
      static let pleaseEnterPassword = Rswift.StringResource(key: "Please enter password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Please register to continue.
      ///
      /// Locales: en, da
      static let pleaseRegisterToContinue = Rswift.StringResource(key: "Please register to continue.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Please select address
      ///
      /// Locales: en, da
      static let pleaseSelectAddress = Rswift.StringResource(key: "Please select address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Please select any payment method
      ///
      /// Locales: en, da
      static let pleaseSelectAnyPaymentMethod = Rswift.StringResource(key: "Please select any payment method", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Please update your restaurant details from update restaurant screen.
      ///
      /// Locales: en, da
      static let pleaseUpdateYourRestaurantDetailsFromUpdateRestaurantScreen = Rswift.StringResource(key: "Please update your restaurant details from update restaurant screen.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Pre Order ID:
      ///
      /// Locales: en, da
      static let preOrderID = Rswift.StringResource(key: "Pre Order ID:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Preparing
      ///
      /// Locales: en, da
      static let preparing = Rswift.StringResource(key: "Preparing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en, da
      static let privacyPolicy = Rswift.StringResource(key: "Privacy Policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Products
      ///
      /// Locales: en, da
      static let products = Rswift.StringResource(key: "Products", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Profile Update Successfully
      ///
      /// Locales: en, da
      static let profileUpdateSuccessfully = Rswift.StringResource(key: "Profile Update Successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Rate this App
      ///
      /// Locales: en, da
      static let rateThisApp = Rswift.StringResource(key: "Rate this App", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Rate user and finish
      ///
      /// Locales: en, da
      static let rateUserAndFinish = Rswift.StringResource(key: "Rate user and finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Rating added successfully
      ///
      /// Locales: en, da
      static let ratingAddedSuccessfully = Rswift.StringResource(key: "Rating added successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Ready
      ///
      /// Locales: en, da
      static let ready = Rswift.StringResource(key: "Ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Rejected
      ///
      /// Locales: en, da
      static let rejected = Rswift.StringResource(key: "Rejected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Remaining time:
      ///
      /// Locales: en, da
      static let remainingTime = Rswift.StringResource(key: "Remaining time:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Request for withdrawal send successfully
      ///
      /// Locales: en, da
      static let requestForWithdrawalSendSuccessfully = Rswift.StringResource(key: "Request for withdrawal send successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Resend
      ///
      /// Locales: en, da
      static let resend = Rswift.StringResource(key: "Resend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Restaurant
      ///
      /// Locales: en, da
      static let restaurant = Rswift.StringResource(key: "Restaurant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Restaurant Information
      ///
      /// Locales: en, da
      static let restaurantInformation = Rswift.StringResource(key: "Restaurant Information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Send message...
      ///
      /// Locales: en, da
      static let sendMessage = Rswift.StringResource(key: "Send message...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Share APP & Earn
      ///
      /// Locales: en, da
      static let shareAPPEarn = Rswift.StringResource(key: "Share APP & Earn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Sign up
      ///
      /// Locales: en, da
      static let signUp = Rswift.StringResource(key: "Sign up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Something went wrong
      ///
      /// Locales: en, da
      static let somethingWentWrong = Rswift.StringResource(key: "Something went wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: TLF:
      ///
      /// Locales: en, da
      static let tlF = Rswift.StringResource(key: "TLF:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Tax Number:
      ///
      /// Locales: en, da
      static let taxNumber = Rswift.StringResource(key: "Tax Number:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Terms and Condition
      ///
      /// Locales: en, da
      static let termsAndCondition = Rswift.StringResource(key: "Terms and Condition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Thank You..!! We'll be in touch shortly.
      ///
      /// Locales: en, da
      static let thankYouWeLlBeInTouchShortly = Rswift.StringResource(key: "Thank You..!! We'll be in touch shortly.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Thank you for registration..!!
      ///
      /// Locales: en, da
      static let thankYouForRegistration = Rswift.StringResource(key: "Thank you for registration..!!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: The offer is valid from
      ///
      /// Locales: en, da
      static let theOfferIsValidFrom = Rswift.StringResource(key: "The offer is valid from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: TockenID
      ///
      /// Locales: en, da
      static let tockenID = Rswift.StringResource(key: "TockenID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Total Cart:
      ///
      /// Locales: en, da
      static let totalCart = Rswift.StringResource(key: "Total Cart:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Total Gift Amount
      ///
      /// Locales: en, da
      static let totalGiftAmount = Rswift.StringResource(key: "Total Gift Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Track Order
      ///
      /// Locales: en, da
      static let trackOrder = Rswift.StringResource(key: "Track Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: TrackID
      ///
      /// Locales: en, da
      static let trackID = Rswift.StringResource(key: "TrackID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Use Code
      ///
      /// Locales: en, da
      static let useCode = Rswift.StringResource(key: "Use Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: User Already Exists
      ///
      /// Locales: en, da
      static let userAlreadyExists = Rswift.StringResource(key: "User Already Exists", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Vega invest Aps CVR:
      ///
      /// Locales: en, da
      static let vegaInvestApsCVR = Rswift.StringResource(key: "Vega invest Aps CVR:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Withdraw Wallet Amount
      ///
      /// Locales: en, da
      static let withdrawWalletAmount = Rswift.StringResource(key: "Withdraw Wallet Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Write here...
      ///
      /// Locales: en, da
      static let writeHere = Rswift.StringResource(key: "Write here...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Write some message
      ///
      /// Locales: en, da
      static let writeSomeMessage = Rswift.StringResource(key: "Write some message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Wrong gift code
      ///
      /// Locales: en, da
      static let wrongGiftCode = Rswift.StringResource(key: "Wrong gift code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, da
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: You have entered wrong email or password
      ///
      /// Locales: en, da
      static let youHaveEnteredWrongEmailOrPassword = Rswift.StringResource(key: "You have entered wrong email or password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: You need to select item from below list
      ///
      /// Locales: en, da
      static let youNeedToSelectItemFromBelowList = Rswift.StringResource(key: "You need to select item from below list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: You need to select the any one item from  all single choice menu
      ///
      /// Locales: en, da
      static let youNeedToSelectTheAnyOneItemFromAllSingleChoiceMenu = Rswift.StringResource(key: "You need to select the any one item from  all single choice menu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Your Fee
      ///
      /// Locales: en, da
      static let yourFee = Rswift.StringResource(key: "Your Fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Your Gift Amount:
      ///
      /// Locales: en, da
      static let yourGiftAmount = Rswift.StringResource(key: "Your Gift Amount:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Your cart is empty
      ///
      /// Locales: en, da
      static let yourCartIsEmpty = Rswift.StringResource(key: "Your cart is empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: km away
      ///
      /// Locales: en, da
      static let kmAway = Rswift.StringResource(key: "km away", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: location not found
      ///
      /// Locales: en, da
      static let locationNotFound = Rswift.StringResource(key: "location not found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: min
      ///
      /// Locales: en, da
      static let min = Rswift.StringResource(key: "min", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: please enter valid details
      ///
      /// Locales: en, da
      static let pleaseEnterValidDetails = Rswift.StringResource(key: "please enter valid details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: sec
      ///
      /// Locales: en, da
      static let sec = Rswift.StringResource(key: "sec", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: to
      ///
      /// Locales: en, da
      static let to = Rswift.StringResource(key: "to", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)

      /// en translation: About us
      ///
      /// Locales: en, da
      static func aboutUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About us"
        }

        return NSLocalizedString("About us", bundle: bundle, comment: "")
      }

      /// en translation: Action Code
      ///
      /// Locales: en, da
      static func actionCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Action Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Action Code"
        }

        return NSLocalizedString("Action Code", bundle: bundle, comment: "")
      }

      /// en translation: Add Details
      ///
      /// Locales: en, da
      static func addDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Details"
        }

        return NSLocalizedString("Add Details", bundle: bundle, comment: "")
      }

      /// en translation: Address Deleted successfully
      ///
      /// Locales: en, da
      static func addressDeletedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address Deleted successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address Deleted successfully"
        }

        return NSLocalizedString("Address Deleted successfully", bundle: bundle, comment: "")
      }

      /// en translation: Address:
      ///
      /// Locales: en, da
      static func address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address:"
        }

        return NSLocalizedString("Address:", bundle: bundle, comment: "")
      }

      /// en translation: Alert
      ///
      /// Locales: en, da
      static func alert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert"
        }

        return NSLocalizedString("Alert", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en, da
      static func amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Amount"
        }

        return NSLocalizedString("Amount", bundle: bundle, comment: "")
      }

      /// en translation: App is available in Alaryan branch
      ///
      /// Locales: en, da
      static func appIsAvailableInAlaryanBranch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("App is available in Alaryan branch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "App is available in Alaryan branch"
        }

        return NSLocalizedString("App is available in Alaryan branch", bundle: bundle, comment: "")
      }

      /// en translation: Apply Offer
      ///
      /// Locales: en, da
      static func applyOffer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Apply Offer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Apply Offer"
        }

        return NSLocalizedString("Apply Offer", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to log out?
      ///
      /// Locales: en, da
      static func areYouSureYouWantToLogOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to log out?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to log out?"
        }

        return NSLocalizedString("Are you sure you want to log out?", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure, you want to delete account
      ///
      /// Locales: en, da
      static func areYouSureYouWantToDeleteAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure, you want to delete account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure, you want to delete account"
        }

        return NSLocalizedString("Are you sure, you want to delete account", bundle: bundle, comment: "")
      }

      /// en translation: Assigned Driver
      ///
      /// Locales: en, da
      static func assignedDriver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Assigned Driver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Assigned Driver"
        }

        return NSLocalizedString("Assigned Driver", bundle: bundle, comment: "")
      }

      /// en translation: Available Driver
      ///
      /// Locales: en, da
      static func availableDriver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Available Driver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Available Driver"
        }

        return NSLocalizedString("Available Driver", bundle: bundle, comment: "")
      }

      /// en translation: Camera
      ///
      /// Locales: en, da
      static func camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Camera"
        }

        return NSLocalizedString("Camera", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, da
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cart deleted successfully
      ///
      /// Locales: en, da
      static func cartDeletedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cart deleted successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cart deleted successfully"
        }

        return NSLocalizedString("Cart deleted successfully", bundle: bundle, comment: "")
      }

      /// en translation: Cart updated successfully
      ///
      /// Locales: en, da
      static func cartUpdatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cart updated successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cart updated successfully"
        }

        return NSLocalizedString("Cart updated successfully", bundle: bundle, comment: "")
      }

      /// en translation: Change Language
      ///
      /// Locales: en, da
      static func changeLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Language"
        }

        return NSLocalizedString("Change Language", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, da
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Password"
        }

        return NSLocalizedString("Change Password", bundle: bundle, comment: "")
      }

      /// en translation: Check
      ///
      /// Locales: en, da
      static func check(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Check", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Check"
        }

        return NSLocalizedString("Check", bundle: bundle, comment: "")
      }

      /// en translation: Choose Language
      ///
      /// Locales: en, da
      static func chooseLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Choose Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Choose Language"
        }

        return NSLocalizedString("Choose Language", bundle: bundle, comment: "")
      }

      /// en translation: Click to deliver
      ///
      /// Locales: en, da
      static func clickToDeliver(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Click to deliver", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Click to deliver"
        }

        return NSLocalizedString("Click to deliver", bundle: bundle, comment: "")
      }

      /// en translation: Completed
      ///
      /// Locales: en, da
      static func completed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Completed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Completed"
        }

        return NSLocalizedString("Completed", bundle: bundle, comment: "")
      }

      /// en translation: Country
      ///
      /// Locales: en, da
      static func country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Country"
        }

        return NSLocalizedString("Country", bundle: bundle, comment: "")
      }

      /// en translation: Currency
      ///
      /// Locales: en, da
      static func currency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Currency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Currency"
        }

        return NSLocalizedString("Currency", bundle: bundle, comment: "")
      }

      /// en translation: DATE
      ///
      /// Locales: en, da
      static func datE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DATE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DATE"
        }

        return NSLocalizedString("DATE", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, da
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Done"
        }

        return NSLocalizedString("Done", bundle: bundle, comment: "")
      }

      /// en translation: Edit Profile
      ///
      /// Locales: en, da
      static func editProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Profile"
        }

        return NSLocalizedString("Edit Profile", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, da
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email"
        }

        return NSLocalizedString("Email", bundle: bundle, comment: "")
      }

      /// en translation: Enter email address
      ///
      /// Locales: en, da
      static func enterEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter email address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter email address"
        }

        return NSLocalizedString("Enter email address", bundle: bundle, comment: "")
      }

      /// en translation: Enter offer code
      ///
      /// Locales: en, da
      static func enterOfferCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter offer code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter offer code"
        }

        return NSLocalizedString("Enter offer code", bundle: bundle, comment: "")
      }

      /// en translation: Enter your business code
      ///
      /// Locales: en, da
      static func enterYourBusinessCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter your business code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter your business code"
        }

        return NSLocalizedString("Enter your business code", bundle: bundle, comment: "")
      }

      /// en translation: Expire on
      ///
      /// Locales: en, da
      static func expireOn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Expire on", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Expire on"
        }

        return NSLocalizedString("Expire on", bundle: bundle, comment: "")
      }

      /// en translation: Extra Items
      ///
      /// Locales: en, da
      static func extraItems(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Extra Items", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Extra Items"
        }

        return NSLocalizedString("Extra Items", bundle: bundle, comment: "")
      }

      /// en translation: For continue you need to accept
      ///
      /// Locales: en, da
      static func forContinueYouNeedToAccept(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("For continue you need to accept", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "For continue you need to accept"
        }

        return NSLocalizedString("For continue you need to accept", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password
      ///
      /// Locales: en, da
      static func forgotPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forgot Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forgot Password"
        }

        return NSLocalizedString("Forgot Password", bundle: bundle, comment: "")
      }

      /// en translation: Gallery
      ///
      /// Locales: en, da
      static func gallery(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gallery", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gallery"
        }

        return NSLocalizedString("Gallery", bundle: bundle, comment: "")
      }

      /// en translation: Gift
      ///
      /// Locales: en, da
      static func gift(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Gift", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Gift"
        }

        return NSLocalizedString("Gift", bundle: bundle, comment: "")
      }

      /// en translation: Give Rating
      ///
      /// Locales: en, da
      static func giveRating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Give Rating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Give Rating"
        }

        return NSLocalizedString("Give Rating", bundle: bundle, comment: "")
      }

      /// en translation: Have not you recieved the code? 
      ///
      /// Locales: en, da
      static func haveNotYouRecievedTheCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Have not you recieved the code? ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Have not you recieved the code? "
        }

        return NSLocalizedString("Have not you recieved the code? ", bundle: bundle, comment: "")
      }

      /// en translation: Help & Support
      ///
      /// Locales: en, da
      static func helpSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help & Support", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help & Support"
        }

        return NSLocalizedString("Help & Support", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, da
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home"
        }

        return NSLocalizedString("Home", bundle: bundle, comment: "")
      }

      /// en translation: Incorrect OTP
      ///
      /// Locales: en, da
      static func incorrectOTP(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Incorrect OTP", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Incorrect OTP"
        }

        return NSLocalizedString("Incorrect OTP", bundle: bundle, comment: "")
      }

      /// en translation: Incorrect code.
      ///
      /// Locales: en, da
      static func incorrectCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Incorrect code.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Incorrect code."
        }

        return NSLocalizedString("Incorrect code.", bundle: bundle, comment: "")
      }

      /// en translation: Invalid email address
      ///
      /// Locales: en, da
      static func invalidEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid email address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid email address"
        }

        return NSLocalizedString("Invalid email address", bundle: bundle, comment: "")
      }

      /// en translation: Item Detail
      ///
      /// Locales: en, da
      static func itemDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Item Detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Item Detail"
        }

        return NSLocalizedString("Item Detail", bundle: bundle, comment: "")
      }

      /// en translation: Item added to cart successfully
      ///
      /// Locales: en, da
      static func itemAddedToCartSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Item added to cart successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Item added to cart successfully"
        }

        return NSLocalizedString("Item added to cart successfully", bundle: bundle, comment: "")
      }

      /// en translation: Load More
      ///
      /// Locales: en, da
      static func loadMore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Load More", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Load More"
        }

        return NSLocalizedString("Load More", bundle: bundle, comment: "")
      }

      /// en translation: Loading
      ///
      /// Locales: en, da
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading"
        }

        return NSLocalizedString("Loading", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, da
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login"
        }

        return NSLocalizedString("Login", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, da
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Logout"
        }

        return NSLocalizedString("Logout", bundle: bundle, comment: "")
      }

      /// en translation: Members
      ///
      /// Locales: en, da
      static func members(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Members", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Members"
        }

        return NSLocalizedString("Members", bundle: bundle, comment: "")
      }

      /// en translation: Menu
      ///
      /// Locales: en, da
      static func menu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Menu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Menu"
        }

        return NSLocalizedString("Menu", bundle: bundle, comment: "")
      }

      /// en translation: Mobile:
      ///
      /// Locales: en, da
      static func mobile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mobile:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mobile:"
        }

        return NSLocalizedString("Mobile:", bundle: bundle, comment: "")
      }

      /// en translation: My Address
      ///
      /// Locales: en, da
      static func myAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Address"
        }

        return NSLocalizedString("My Address", bundle: bundle, comment: "")
      }

      /// en translation: My Cart
      ///
      /// Locales: en, da
      static func myCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Cart"
        }

        return NSLocalizedString("My Cart", bundle: bundle, comment: "")
      }

      /// en translation: My Chat
      ///
      /// Locales: en, da
      static func myChat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Chat", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Chat"
        }

        return NSLocalizedString("My Chat", bundle: bundle, comment: "")
      }

      /// en translation: My Earning
      ///
      /// Locales: en, da
      static func myEarning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Earning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Earning"
        }

        return NSLocalizedString("My Earning", bundle: bundle, comment: "")
      }

      /// en translation: My Earnings
      ///
      /// Locales: en, da
      static func myEarnings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Earnings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Earnings"
        }

        return NSLocalizedString("My Earnings", bundle: bundle, comment: "")
      }

      /// en translation: My Favourite
      ///
      /// Locales: en, da
      static func myFavourite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Favourite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Favourite"
        }

        return NSLocalizedString("My Favourite", bundle: bundle, comment: "")
      }

      /// en translation: My Profile
      ///
      /// Locales: en, da
      static func myProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Profile"
        }

        return NSLocalizedString("My Profile", bundle: bundle, comment: "")
      }

      /// en translation: My Reviews
      ///
      /// Locales: en, da
      static func myReviews(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Reviews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Reviews"
        }

        return NSLocalizedString("My Reviews", bundle: bundle, comment: "")
      }

      /// en translation: My Wallet
      ///
      /// Locales: en, da
      static func myWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Wallet"
        }

        return NSLocalizedString("My Wallet", bundle: bundle, comment: "")
      }

      /// en translation: NA
      ///
      /// Locales: en, da
      static func nA(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NA", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NA"
        }

        return NSLocalizedString("NA", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, da
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Name"
        }

        return NSLocalizedString("Name", bundle: bundle, comment: "")
      }

      /// en translation: New password sent to your email.
      ///
      /// Locales: en, da
      static func newPasswordSentToYourEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New password sent to your email.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New password sent to your email."
        }

        return NSLocalizedString("New password sent to your email.", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, da
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No"
        }

        return NSLocalizedString("No", bundle: bundle, comment: "")
      }

      /// en translation: No Internet Connection. Make sure your device is connected to the internet.
      ///
      /// Locales: en, da
      static func noInternetConnectionMakeSureYourDeviceIsConnectedToTheInternet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Internet Connection. Make sure your device is connected to the internet.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Internet Connection. Make sure your device is connected to the internet."
        }

        return NSLocalizedString("No Internet Connection. Make sure your device is connected to the internet.", bundle: bundle, comment: "")
      }

      /// en translation: No data available to show
      ///
      /// Locales: en, da
      static func noDataAvailableToShow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No data available to show", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No data available to show"
        }

        return NSLocalizedString("No data available to show", bundle: bundle, comment: "")
      }

      /// en translation: No offers available
      ///
      /// Locales: en, da
      static func noOffersAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No offers available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No offers available"
        }

        return NSLocalizedString("No offers available", bundle: bundle, comment: "")
      }

      /// en translation: Not Paid
      ///
      /// Locales: en, da
      static func notPaid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Not Paid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Not Paid"
        }

        return NSLocalizedString("Not Paid", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: en, da
      static func notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notifications"
        }

        return NSLocalizedString("Notifications", bundle: bundle, comment: "")
      }

      /// en translation: Notify driver again
      ///
      /// Locales: en, da
      static func notifyDriverAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notify driver again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notify driver again"
        }

        return NSLocalizedString("Notify driver again", bundle: bundle, comment: "")
      }

      /// en translation: Notify user for order picked
      ///
      /// Locales: en, da
      static func notifyUserForOrderPicked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notify user for order picked", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notify user for order picked"
        }

        return NSLocalizedString("Notify user for order picked", bundle: bundle, comment: "")
      }

      /// en translation: Notify user to arrived
      ///
      /// Locales: en, da
      static func notifyUserToArrived(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notify user to arrived", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notify user to arrived"
        }

        return NSLocalizedString("Notify user to arrived", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, da
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// en translation: Offer
      ///
      /// Locales: en, da
      static func offer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Offer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Offer"
        }

        return NSLocalizedString("Offer", bundle: bundle, comment: "")
      }

      /// en translation: Offers
      ///
      /// Locales: en, da
      static func offers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Offers"
        }

        return NSLocalizedString("Offers", bundle: bundle, comment: "")
      }

      /// en translation: On the way to pickup
      ///
      /// Locales: en, da
      static func onTheWayToPickup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("On the way to pickup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "On the way to pickup"
        }

        return NSLocalizedString("On the way to pickup", bundle: bundle, comment: "")
      }

      /// en translation: Optional
      ///
      /// Locales: en, da
      static func optional(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Optional", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Optional"
        }

        return NSLocalizedString("Optional", bundle: bundle, comment: "")
      }

      /// en translation: Order Details
      ///
      /// Locales: en, da
      static func orderDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order Details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order Details"
        }

        return NSLocalizedString("Order Details", bundle: bundle, comment: "")
      }

      /// en translation: Order ID:
      ///
      /// Locales: en, da
      static func orderID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order ID:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order ID:"
        }

        return NSLocalizedString("Order ID:", bundle: bundle, comment: "")
      }

      /// en translation: Order Id:
      ///
      /// Locales: en, da
      static func orderId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order Id:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order Id:"
        }

        return NSLocalizedString("Order Id:", bundle: bundle, comment: "")
      }

      /// en translation: Order Now
      ///
      /// Locales: en, da
      static func orderNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order Now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order Now"
        }

        return NSLocalizedString("Order Now", bundle: bundle, comment: "")
      }

      /// en translation: Order place successfully
      ///
      /// Locales: en, da
      static func orderPlaceSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order place successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order place successfully"
        }

        return NSLocalizedString("Order place successfully", bundle: bundle, comment: "")
      }

      /// en translation: Order placed successfully
      ///
      /// Locales: en, da
      static func orderPlacedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order placed successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order placed successfully"
        }

        return NSLocalizedString("Order placed successfully", bundle: bundle, comment: "")
      }

      /// en translation: Orders
      ///
      /// Locales: en, da
      static func orders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Orders"
        }

        return NSLocalizedString("Orders", bundle: bundle, comment: "")
      }

      /// en translation: Password changed successfully
      ///
      /// Locales: en, da
      static func passwordChangedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password changed successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password changed successfully"
        }

        return NSLocalizedString("Password changed successfully", bundle: bundle, comment: "")
      }

      /// en translation: Password not matched
      ///
      /// Locales: en, da
      static func passwordNotMatched(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password not matched", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password not matched"
        }

        return NSLocalizedString("Password not matched", bundle: bundle, comment: "")
      }

      /// en translation: Pending
      ///
      /// Locales: en, da
      static func pending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pending"
        }

        return NSLocalizedString("Pending", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number :
      ///
      /// Locales: en, da
      static func phoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Phone Number :", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Phone Number :"
        }

        return NSLocalizedString("Phone Number :", bundle: bundle, comment: "")
      }

      /// en translation: Please Wait!!
      ///
      /// Locales: en, da
      static func pleaseWait(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please Wait!!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please Wait!!"
        }

        return NSLocalizedString("Please Wait!!", bundle: bundle, comment: "")
      }

      /// en translation: Please check terms and condition
      ///
      /// Locales: en, da
      static func pleaseCheckTermsAndCondition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please check terms and condition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please check terms and condition"
        }

        return NSLocalizedString("Please check terms and condition", bundle: bundle, comment: "")
      }

      /// en translation: Please check your Mobile and check SMS for new password.
      ///
      /// Locales: en, da
      static func pleaseCheckYourMobileAndCheckSMSForNewPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please check your Mobile and check SMS for new password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please check your Mobile and check SMS for new password."
        }

        return NSLocalizedString("Please check your Mobile and check SMS for new password.", bundle: bundle, comment: "")
      }

      /// en translation: Please check your email to reset
      ///
      /// Locales: en, da
      static func pleaseCheckYourEmailToReset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please check your email to reset", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please check your email to reset"
        }

        return NSLocalizedString("Please check your email to reset", bundle: bundle, comment: "")
      }

      /// en translation: Please enter confirm password
      ///
      /// Locales: en, da
      static func pleaseEnterConfirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter confirm password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter confirm password"
        }

        return NSLocalizedString("Please enter confirm password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter email address
      ///
      /// Locales: en, da
      static func pleaseEnterEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter email address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter email address"
        }

        return NSLocalizedString("Please enter email address", bundle: bundle, comment: "")
      }

      /// en translation: Please enter full name
      ///
      /// Locales: en, da
      static func pleaseEnterFullName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter full name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter full name"
        }

        return NSLocalizedString("Please enter full name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter message
      ///
      /// Locales: en, da
      static func pleaseEnterMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter message"
        }

        return NSLocalizedString("Please enter message", bundle: bundle, comment: "")
      }

      /// en translation: Please enter password
      ///
      /// Locales: en, da
      static func pleaseEnterPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter password"
        }

        return NSLocalizedString("Please enter password", bundle: bundle, comment: "")
      }

      /// en translation: Please register to continue.
      ///
      /// Locales: en, da
      static func pleaseRegisterToContinue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please register to continue.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please register to continue."
        }

        return NSLocalizedString("Please register to continue.", bundle: bundle, comment: "")
      }

      /// en translation: Please select address
      ///
      /// Locales: en, da
      static func pleaseSelectAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select address"
        }

        return NSLocalizedString("Please select address", bundle: bundle, comment: "")
      }

      /// en translation: Please select any payment method
      ///
      /// Locales: en, da
      static func pleaseSelectAnyPaymentMethod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select any payment method", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select any payment method"
        }

        return NSLocalizedString("Please select any payment method", bundle: bundle, comment: "")
      }

      /// en translation: Please update your restaurant details from update restaurant screen.
      ///
      /// Locales: en, da
      static func pleaseUpdateYourRestaurantDetailsFromUpdateRestaurantScreen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please update your restaurant details from update restaurant screen.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please update your restaurant details from update restaurant screen."
        }

        return NSLocalizedString("Please update your restaurant details from update restaurant screen.", bundle: bundle, comment: "")
      }

      /// en translation: Pre Order ID:
      ///
      /// Locales: en, da
      static func preOrderID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pre Order ID:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pre Order ID:"
        }

        return NSLocalizedString("Pre Order ID:", bundle: bundle, comment: "")
      }

      /// en translation: Preparing
      ///
      /// Locales: en, da
      static func preparing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Preparing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Preparing"
        }

        return NSLocalizedString("Preparing", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en, da
      static func privacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy Policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Privacy Policy"
        }

        return NSLocalizedString("Privacy Policy", bundle: bundle, comment: "")
      }

      /// en translation: Products
      ///
      /// Locales: en, da
      static func products(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Products", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Products"
        }

        return NSLocalizedString("Products", bundle: bundle, comment: "")
      }

      /// en translation: Profile Update Successfully
      ///
      /// Locales: en, da
      static func profileUpdateSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile Update Successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile Update Successfully"
        }

        return NSLocalizedString("Profile Update Successfully", bundle: bundle, comment: "")
      }

      /// en translation: Rate this App
      ///
      /// Locales: en, da
      static func rateThisApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rate this App", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rate this App"
        }

        return NSLocalizedString("Rate this App", bundle: bundle, comment: "")
      }

      /// en translation: Rate user and finish
      ///
      /// Locales: en, da
      static func rateUserAndFinish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rate user and finish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rate user and finish"
        }

        return NSLocalizedString("Rate user and finish", bundle: bundle, comment: "")
      }

      /// en translation: Rating added successfully
      ///
      /// Locales: en, da
      static func ratingAddedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rating added successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rating added successfully"
        }

        return NSLocalizedString("Rating added successfully", bundle: bundle, comment: "")
      }

      /// en translation: Ready
      ///
      /// Locales: en, da
      static func ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ready", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ready"
        }

        return NSLocalizedString("Ready", bundle: bundle, comment: "")
      }

      /// en translation: Rejected
      ///
      /// Locales: en, da
      static func rejected(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rejected", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rejected"
        }

        return NSLocalizedString("Rejected", bundle: bundle, comment: "")
      }

      /// en translation: Remaining time:
      ///
      /// Locales: en, da
      static func remainingTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Remaining time:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Remaining time:"
        }

        return NSLocalizedString("Remaining time:", bundle: bundle, comment: "")
      }

      /// en translation: Request for withdrawal send successfully
      ///
      /// Locales: en, da
      static func requestForWithdrawalSendSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Request for withdrawal send successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Request for withdrawal send successfully"
        }

        return NSLocalizedString("Request for withdrawal send successfully", bundle: bundle, comment: "")
      }

      /// en translation: Resend
      ///
      /// Locales: en, da
      static func resend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Resend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Resend"
        }

        return NSLocalizedString("Resend", bundle: bundle, comment: "")
      }

      /// en translation: Restaurant
      ///
      /// Locales: en, da
      static func restaurant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Restaurant", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Restaurant"
        }

        return NSLocalizedString("Restaurant", bundle: bundle, comment: "")
      }

      /// en translation: Restaurant Information
      ///
      /// Locales: en, da
      static func restaurantInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Restaurant Information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Restaurant Information"
        }

        return NSLocalizedString("Restaurant Information", bundle: bundle, comment: "")
      }

      /// en translation: Send message...
      ///
      /// Locales: en, da
      static func sendMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send message...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send message..."
        }

        return NSLocalizedString("Send message...", bundle: bundle, comment: "")
      }

      /// en translation: Share APP & Earn
      ///
      /// Locales: en, da
      static func shareAPPEarn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share APP & Earn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share APP & Earn"
        }

        return NSLocalizedString("Share APP & Earn", bundle: bundle, comment: "")
      }

      /// en translation: Sign up
      ///
      /// Locales: en, da
      static func signUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign up"
        }

        return NSLocalizedString("Sign up", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong
      ///
      /// Locales: en, da
      static func somethingWentWrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Something went wrong", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Something went wrong"
        }

        return NSLocalizedString("Something went wrong", bundle: bundle, comment: "")
      }

      /// en translation: TLF:
      ///
      /// Locales: en, da
      static func tlF(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TLF:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TLF:"
        }

        return NSLocalizedString("TLF:", bundle: bundle, comment: "")
      }

      /// en translation: Tax Number:
      ///
      /// Locales: en, da
      static func taxNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tax Number:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tax Number:"
        }

        return NSLocalizedString("Tax Number:", bundle: bundle, comment: "")
      }

      /// en translation: Terms and Condition
      ///
      /// Locales: en, da
      static func termsAndCondition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Terms and Condition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Terms and Condition"
        }

        return NSLocalizedString("Terms and Condition", bundle: bundle, comment: "")
      }

      /// en translation: Thank You..!! We'll be in touch shortly.
      ///
      /// Locales: en, da
      static func thankYouWeLlBeInTouchShortly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thank You..!! We'll be in touch shortly.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thank You..!! We'll be in touch shortly."
        }

        return NSLocalizedString("Thank You..!! We'll be in touch shortly.", bundle: bundle, comment: "")
      }

      /// en translation: Thank you for registration..!!
      ///
      /// Locales: en, da
      static func thankYouForRegistration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thank you for registration..!!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thank you for registration..!!"
        }

        return NSLocalizedString("Thank you for registration..!!", bundle: bundle, comment: "")
      }

      /// en translation: The offer is valid from
      ///
      /// Locales: en, da
      static func theOfferIsValidFrom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("The offer is valid from", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "The offer is valid from"
        }

        return NSLocalizedString("The offer is valid from", bundle: bundle, comment: "")
      }

      /// en translation: TockenID
      ///
      /// Locales: en, da
      static func tockenID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TockenID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TockenID"
        }

        return NSLocalizedString("TockenID", bundle: bundle, comment: "")
      }

      /// en translation: Total Cart:
      ///
      /// Locales: en, da
      static func totalCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Total Cart:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Total Cart:"
        }

        return NSLocalizedString("Total Cart:", bundle: bundle, comment: "")
      }

      /// en translation: Total Gift Amount
      ///
      /// Locales: en, da
      static func totalGiftAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Total Gift Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Total Gift Amount"
        }

        return NSLocalizedString("Total Gift Amount", bundle: bundle, comment: "")
      }

      /// en translation: Track Order
      ///
      /// Locales: en, da
      static func trackOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Track Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Track Order"
        }

        return NSLocalizedString("Track Order", bundle: bundle, comment: "")
      }

      /// en translation: TrackID
      ///
      /// Locales: en, da
      static func trackID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TrackID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TrackID"
        }

        return NSLocalizedString("TrackID", bundle: bundle, comment: "")
      }

      /// en translation: Use Code
      ///
      /// Locales: en, da
      static func useCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Use Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Use Code"
        }

        return NSLocalizedString("Use Code", bundle: bundle, comment: "")
      }

      /// en translation: User Already Exists
      ///
      /// Locales: en, da
      static func userAlreadyExists(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User Already Exists", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User Already Exists"
        }

        return NSLocalizedString("User Already Exists", bundle: bundle, comment: "")
      }

      /// en translation: Vega invest Aps CVR:
      ///
      /// Locales: en, da
      static func vegaInvestApsCVR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vega invest Aps CVR:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Vega invest Aps CVR:"
        }

        return NSLocalizedString("Vega invest Aps CVR:", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw Wallet Amount
      ///
      /// Locales: en, da
      static func withdrawWalletAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Withdraw Wallet Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Withdraw Wallet Amount"
        }

        return NSLocalizedString("Withdraw Wallet Amount", bundle: bundle, comment: "")
      }

      /// en translation: Write here...
      ///
      /// Locales: en, da
      static func writeHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write here...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write here..."
        }

        return NSLocalizedString("Write here...", bundle: bundle, comment: "")
      }

      /// en translation: Write some message
      ///
      /// Locales: en, da
      static func writeSomeMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write some message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write some message"
        }

        return NSLocalizedString("Write some message", bundle: bundle, comment: "")
      }

      /// en translation: Wrong gift code
      ///
      /// Locales: en, da
      static func wrongGiftCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wrong gift code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wrong gift code"
        }

        return NSLocalizedString("Wrong gift code", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, da
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes"
        }

        return NSLocalizedString("Yes", bundle: bundle, comment: "")
      }

      /// en translation: You have entered wrong email or password
      ///
      /// Locales: en, da
      static func youHaveEnteredWrongEmailOrPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You have entered wrong email or password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You have entered wrong email or password"
        }

        return NSLocalizedString("You have entered wrong email or password", bundle: bundle, comment: "")
      }

      /// en translation: You need to select item from below list
      ///
      /// Locales: en, da
      static func youNeedToSelectItemFromBelowList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You need to select item from below list", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You need to select item from below list"
        }

        return NSLocalizedString("You need to select item from below list", bundle: bundle, comment: "")
      }

      /// en translation: You need to select the any one item from  all single choice menu
      ///
      /// Locales: en, da
      static func youNeedToSelectTheAnyOneItemFromAllSingleChoiceMenu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You need to select the any one item from  all single choice menu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You need to select the any one item from  all single choice menu"
        }

        return NSLocalizedString("You need to select the any one item from  all single choice menu", bundle: bundle, comment: "")
      }

      /// en translation: Your Fee
      ///
      /// Locales: en, da
      static func yourFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Fee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Fee"
        }

        return NSLocalizedString("Your Fee", bundle: bundle, comment: "")
      }

      /// en translation: Your Gift Amount:
      ///
      /// Locales: en, da
      static func yourGiftAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Gift Amount:", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Gift Amount:"
        }

        return NSLocalizedString("Your Gift Amount:", bundle: bundle, comment: "")
      }

      /// en translation: Your cart is empty
      ///
      /// Locales: en, da
      static func yourCartIsEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your cart is empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your cart is empty"
        }

        return NSLocalizedString("Your cart is empty", bundle: bundle, comment: "")
      }

      /// en translation: km away
      ///
      /// Locales: en, da
      static func kmAway(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("km away", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "km away"
        }

        return NSLocalizedString("km away", bundle: bundle, comment: "")
      }

      /// en translation: location not found
      ///
      /// Locales: en, da
      static func locationNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location not found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location not found"
        }

        return NSLocalizedString("location not found", bundle: bundle, comment: "")
      }

      /// en translation: min
      ///
      /// Locales: en, da
      static func min(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("min", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "min"
        }

        return NSLocalizedString("min", bundle: bundle, comment: "")
      }

      /// en translation: please enter valid details
      ///
      /// Locales: en, da
      static func pleaseEnterValidDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please enter valid details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please enter valid details"
        }

        return NSLocalizedString("please enter valid details", bundle: bundle, comment: "")
      }

      /// en translation: sec
      ///
      /// Locales: en, da
      static func sec(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sec", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sec"
        }

        return NSLocalizedString("sec", bundle: bundle, comment: "")
      }

      /// en translation: to
      ///
      /// Locales: en, da
      static func to(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to"
        }

        return NSLocalizedString("to", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 279 localization keys.
    struct main {
      /// en translation:  0.00
      ///
      /// Locales: da, en
      static let nOiCDWbhText = Rswift.StringResource(key: "NOi-CD-Wbh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: $0
      ///
      /// Locales: da, en
      static let k26lCGkText = Rswift.StringResource(key: "7K2-6l-cGk.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: $0
      ///
      /// Locales: da, en
      static let nhMVQUgTText = Rswift.StringResource(key: "NhM-VQ-UgT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: $000
      ///
      /// Locales: da, en
      static let bh4RMDQbText = Rswift.StringResource(key: "Bh4-rM-DQb.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: $000
      ///
      /// Locales: da, en
      static let hk1YkIXqText = Rswift.StringResource(key: "hk1-yk-IXq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: $000
      ///
      /// Locales: da, en
      static let klaQQ1trText = Rswift.StringResource(key: "Kla-qQ-1tr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: $000
      ///
      /// Locales: da, en
      static let xQzEoPb2Text = Rswift.StringResource(key: "XQz-eo-pb2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: $80
      ///
      /// Locales: da, en
      static let itGU3SMgText = Rswift.StringResource(key: "ItG-u3-SMg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: $80
      ///
      /// Locales: da, en
      static let o6aSsUWMText = Rswift.StringResource(key: "O6a-ss-UWM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: +
      ///
      /// Locales: da, en
      static let dlpfm2uONormalTitle = Rswift.StringResource(key: "DLP-FM-2uO.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: +
      ///
      /// Locales: da, en
      static let tStBnAQ0NormalTitle = Rswift.StringResource(key: "TSt-bn-AQ0.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: -
      ///
      /// Locales: da, en
      static let bUeJ9ZBANormalTitle = Rswift.StringResource(key: "BUe-j9-ZBA.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: -
      ///
      /// Locales: da, en
      static let bydVoZ6mNormalTitle = Rswift.StringResource(key: "byd-vo-z6m.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 0
      ///
      /// Locales: da, en
      static let nVkM7JoFText = Rswift.StringResource(key: "NVk-M7-JoF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 0
      ///
      /// Locales: da, en
      static let nnTZQPGGText = Rswift.StringResource(key: "NnT-ZQ-pGG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 0.00
      ///
      /// Locales: da, en
      static let mMD0HOzText = Rswift.StringResource(key: "4mM-d0-HOz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 0.00 Kr
      ///
      /// Locales: da, en
      static let auTA2TeeText = Rswift.StringResource(key: "AuT-a2-Tee.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 0.00 Kr
      ///
      /// Locales: da, en
      static let dwA9hO1SText = Rswift.StringResource(key: "dwA-9h-O1S.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 0.00 Kr
      ///
      /// Locales: da, en
      static let iJsEJHseText = Rswift.StringResource(key: "iJs-eJ-hse.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 0.00 Kr
      ///
      /// Locales: da, en
      static let zxayXoVText = Rswift.StringResource(key: "6ZX-aY-XoV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 00 Kr
      ///
      /// Locales: da, en
      static let gffN217nText = Rswift.StringResource(key: "gff-N2-17n.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 00 Kr
      ///
      /// Locales: da, en
      static let jicVvErAText = Rswift.StringResource(key: "JIC-Vv-ErA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 00 Kr
      ///
      /// Locales: da, en
      static let kwwMgVLdText = Rswift.StringResource(key: "Kww-Mg-VLd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 00 Kr
      ///
      /// Locales: da, en
      static let lAcGnL7mText = Rswift.StringResource(key: "lAc-Gn-L7m.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 00 Kr
      ///
      /// Locales: da, en
      static let nVtC1Z2cText = Rswift.StringResource(key: "nVt-C1-Z2c.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 00 Kr
      ///
      /// Locales: da, en
      static let seVhRuOText = Rswift.StringResource(key: "3Se-Vh-RuO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 0000:00:00 00:00:00
      ///
      /// Locales: da, en
      static let hALHZ3grText = Rswift.StringResource(key: "hAL-hZ-3gr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 0000:00:00 00:00:00
      ///
      /// Locales: da, en
      static let ke3TCBIText = Rswift.StringResource(key: "0KE-3T-cBI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: da, en
      static let aPVTNMVnText = Rswift.StringResource(key: "aPV-tN-MVn.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: da, en
      static let bgjKAH4gText = Rswift.StringResource(key: "bgj-kA-H4g.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: da, en
      static let fche03sText = Rswift.StringResource(key: "2FC-hE-03s.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: da, en
      static let gwTWWBbmText = Rswift.StringResource(key: "GwT-WW-bbm.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: da, en
      static let jiAJN09Text = Rswift.StringResource(key: "4Ji-aJ-N09.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: da, en
      static let kyRPMNrNText = Rswift.StringResource(key: "kyR-PM-nrN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: da, en
      static let rAmOOPhoText = Rswift.StringResource(key: "rAm-OO-pho.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 1 hour
      ///
      /// Locales: da, en
      static let gglZNL7qNormalTitle = Rswift.StringResource(key: "ggl-zN-L7q.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 1 x ABC
      ///
      /// Locales: da, en
      static let woHM7XHlText = Rswift.StringResource(key: "woH-m7-xHl.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 1 x Capri, 2 x Salad
      ///
      /// Locales: da, en
      static let c5rQN2jhText = Rswift.StringResource(key: "c5r-qN-2jh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 1 x Capri, 2 x Salad
      ///
      /// Locales: da, en
      static let t5JPJVOText = Rswift.StringResource(key: "7T5-JP-JVO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 15 min
      ///
      /// Locales: da, en
      static let wnDJJEJaNormalTitle = Rswift.StringResource(key: "wnD-jJ-eJa.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 2021-04-20 07:08:15
      ///
      /// Locales: da, en
      static let mR29WV90Text = Rswift.StringResource(key: "mR2-9W-V90.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 2021-04-20 07:08:15
      ///
      /// Locales: da, en
      static let xjURvTdaText = Rswift.StringResource(key: "xjU-rv-Tda.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 25 SAR
      ///
      /// Locales: da, en
      static let sq4KE7IXText = Rswift.StringResource(key: "sq4-kE-7IX.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 25 SAR
      ///
      /// Locales: da, en
      static let vUQOCE8gText = Rswift.StringResource(key: "vUQ-OC-E8g.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 25 SAR
      ///
      /// Locales: da, en
      static let y3HCF7DText = Rswift.StringResource(key: "8Y3-hC-F7D.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 30 min
      ///
      /// Locales: da, en
      static let cpiZUI9hNormalTitle = Rswift.StringResource(key: "Cpi-ZU-I9h.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 45 min
      ///
      /// Locales: da, en
      static let mGgX0T2BNormalTitle = Rswift.StringResource(key: "MGg-x0-T2B.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 88894 00093
      ///
      /// Locales: da, en
      static let acaAy0VYText = Rswift.StringResource(key: "aca-Ay-0VY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: 88894 00093
      ///
      /// Locales: da, en
      static let qpeOVCB5Text = Rswift.StringResource(key: "qpe-OV-cB5.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: ADD NEW ADDRESS
      ///
      /// Locales: da, en
      static let s9YwFUONormalTitle = Rswift.StringResource(key: "6s9-yw-fUO.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: ADD TO CART
      ///
      /// Locales: da, en
      static let szBsEb9NormalTitle = Rswift.StringResource(key: "3sz-Bs-Eb9.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: ADD TO CART
      ///
      /// Locales: da, en
      static let yblBAT8dNormalTitle = Rswift.StringResource(key: "Ybl-bA-T8d.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Accept
      ///
      /// Locales: da, en
      static let gfVJyZriNormalTitle = Rswift.StringResource(key: "gfV-jy-Zri.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Add Restaurant Cover Image
      ///
      /// Locales: da, en
      static let jAuTiK39Text = Rswift.StringResource(key: "jAu-Ti-K39.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Add Restaurant Image
      ///
      /// Locales: da, en
      static let k2mXjBwgText = Rswift.StringResource(key: "k2m-xj-Bwg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Add your restaurant details
      ///
      /// Locales: da, en
      static let aKhPpUbEText = Rswift.StringResource(key: "aKh-pp-UbE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: da, en
      static let gun2SlSPlaceholder = Rswift.StringResource(key: "4GU-N2-SlS.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: da, en
      static let pcX8QjPText = Rswift.StringResource(key: "8Pc-X8-qjP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Address Bar
      ///
      /// Locales: da, en
      static let d0TBBQyIText = Rswift.StringResource(key: "D0T-BB-qyI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Address type (Home, Office)
      ///
      /// Locales: da, en
      static let gggMAEZIPlaceholder = Rswift.StringResource(key: "Ggg-mA-eZI.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Address:
      ///
      /// Locales: da, en
      static let pXKVMWzHText = Rswift.StringResource(key: "pXK-vM-wzH.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Assigned Driver:
      ///
      /// Locales: da, en
      static let h9rMf976Text = Rswift.StringResource(key: "h9r-Mf-976.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Call
      ///
      /// Locales: da, en
      static let lZTL4INormalTitle = Rswift.StringResource(key: "47l-ZT-L4I.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Call
      ///
      /// Locales: da, en
      static let niiwg8jINormalTitle = Rswift.StringResource(key: "NII-WG-8jI.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: da, en
      static let k7kD5BQKNormalTitle = Rswift.StringResource(key: "K7k-D5-BQK.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: da, en
      static let qqEXCrSNormalTitle = Rswift.StringResource(key: "3qq-EX-CrS.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Card
      ///
      /// Locales: da, en
      static let uzjhipu1NormalTitle = Rswift.StringResource(key: "UZJ-HI-PU1.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: da, en
      static let fGPNvG6nNormalTitle = Rswift.StringResource(key: "fGP-nv-G6n.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: da, en
      static let hDZwXPONormalTitle = Rswift.StringResource(key: "8hD-zw-xPO.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: da, en
      static let nHPENnkNormalTitle = Rswift.StringResource(key: "6nH-pE-Nnk.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: da, en
      static let wiWUB9szNormalTitle = Rswift.StringResource(key: "wiW-UB-9sz.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Choose
      ///
      /// Locales: da, en
      static let ugTZcLljText = Rswift.StringResource(key: "UgT-zc-Llj.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Choose 1:
      ///
      /// Locales: da, en
      static let h5N3n1j5Text = Rswift.StringResource(key: "H5N-3n-1j5.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Choose 2:
      ///
      /// Locales: da, en
      static let ekoU63ORText = Rswift.StringResource(key: "eko-u6-3OR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Choose 3:
      ///
      /// Locales: da, en
      static let s9DXP6W1Text = Rswift.StringResource(key: "S9D-XP-6W1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Choose 4:
      ///
      /// Locales: da, en
      static let lI4AfJvOText = Rswift.StringResource(key: "lI4-af-JvO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: da, en
      static let h6uJMY25NormalTitle = Rswift.StringResource(key: "h6u-jM-y25.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: da, en
      static let oyv8gHQuPlaceholder = Rswift.StringResource(key: "OYV-8g-HQu.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Create an account as
      ///
      /// Locales: da, en
      static let krfBtHx8Text = Rswift.StringResource(key: "Krf-Bt-hx8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Current Available Amount
      ///
      /// Locales: da, en
      static let nMQWAXgwText = Rswift.StringResource(key: "nMQ-wA-xgw.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Current Available Amount
      ///
      /// Locales: da, en
      static let oSKHPEvJText = Rswift.StringResource(key: "oSK-hP-EvJ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Current Available Amount
      ///
      /// Locales: da, en
      static let rPwSdBehText = Rswift.StringResource(key: "RPw-Sd-beh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Current Available Amount
      ///
      /// Locales: da, en
      static let sb35zHJBText = Rswift.StringResource(key: "SB3-5z-HJB.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Current Available Amount
      ///
      /// Locales: da, en
      static let w6G3oX8VText = Rswift.StringResource(key: "w6G-3o-X8V.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Current Orders
      ///
      /// Locales: da, en
      static let gvlVPJVTNormalTitle = Rswift.StringResource(key: "gvl-vP-jVT.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Current Orders
      ///
      /// Locales: da, en
      static let h5xKT5NormalTitle = Rswift.StringResource(key: "22h-5x-kT5.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Current Orders
      ///
      /// Locales: da, en
      static let mx7LzWNormalTitle = Rswift.StringResource(key: "18M-x7-LzW.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Customer Detail
      ///
      /// Locales: da, en
      static let hr4RzTText = Rswift.StringResource(key: "22H-R4-RzT.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: DONE
      ///
      /// Locales: da, en
      static let xi5AI6ixNormalTitle = Rswift.StringResource(key: "xi5-aI-6ix.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Danish
      ///
      /// Locales: da, en
      static let s1fMmO8HNormalTitle = Rswift.StringResource(key: "S1f-Mm-o8H.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Date
      ///
      /// Locales: da, en
      static let cjZIAK9hNormalTitle = Rswift.StringResource(key: "CjZ-IA-K9h.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Delivery
      ///
      /// Locales: da, en
      static let o2eBA3oHNormalTitle = Rswift.StringResource(key: "o2e-BA-3oH.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Delivery Fee
      ///
      /// Locales: da, en
      static let fTwVtK7xText = Rswift.StringResource(key: "fTw-Vt-K7x.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Delivery Fee
      ///
      /// Locales: da, en
      static let jucOjBf8Text = Rswift.StringResource(key: "juc-oj-bf8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Delivery Fee
      ///
      /// Locales: da, en
      static let kl8GqEPaText = Rswift.StringResource(key: "Kl8-gq-EPa.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Delivery Fee
      ///
      /// Locales: da, en
      static let yri0AHhiText = Rswift.StringResource(key: "yri-0A-Hhi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Delivery Time:
      ///
      /// Locales: da, en
      static let wK3AFDg5Text = Rswift.StringResource(key: "wK3-aF-Dg5.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Detail:
      ///
      /// Locales: da, en
      static let czdFtB84Text = Rswift.StringResource(key: "czd-Ft-b84.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Discount
      ///
      /// Locales: da, en
      static let uc2SHG7KText = Rswift.StringResource(key: "UC2-sH-G7K.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Discount
      ///
      /// Locales: da, en
      static let vcAV3Ke1Text = Rswift.StringResource(key: "vcA-V3-ke1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Discount
      ///
      /// Locales: da, en
      static let wc4W0XdfText = Rswift.StringResource(key: "Wc4-W0-xdf.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Driver
      ///
      /// Locales: da, en
      static let dxDIRRBnNormalTitle = Rswift.StringResource(key: "dxD-IR-RBn.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Driver
      ///
      /// Locales: da, en
      static let qXPYvTtaNormalTitle = Rswift.StringResource(key: "qXP-Yv-Tta.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: da, en
      static let aBAEYEgCPlaceholder = Rswift.StringResource(key: "aBA-EY-egC.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: da, en
      static let pfkef2XdText = Rswift.StringResource(key: "PFK-EF-2Xd.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: English
      ///
      /// Locales: da, en
      static let b6O5bSMWNormalTitle = Rswift.StringResource(key: "b6O-5b-SMW.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Enter Business code to see the menu
      ///
      /// Locales: da, en
      static let suMWyAF4NormalTitle = Rswift.StringResource(key: "SuM-wy-aF4.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Enter IFSC Code
      ///
      /// Locales: da, en
      static let azUK3TuWPlaceholder = Rswift.StringResource(key: "azU-K3-tuW.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Enter OTP
      ///
      /// Locales: da, en
      static let wvg9uAPFText = Rswift.StringResource(key: "WVG-9u-aPF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Enter Otp
      ///
      /// Locales: da, en
      static let cEjONNvEPlaceholder = Rswift.StringResource(key: "CEj-ON-nvE.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Enter Tax Number
      ///
      /// Locales: da, en
      static let atXaYkmText = Rswift.StringResource(key: "7At-xa-Ykm.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Enter Tax Number
      ///
      /// Locales: da, en
      static let tQw2y8wKPlaceholder = Rswift.StringResource(key: "TQw-2y-8wK.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Enter Withdraw Amount
      ///
      /// Locales: da, en
      static let yo9BDFq1Placeholder = Rswift.StringResource(key: "yo9-bD-Fq1.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Enter Your Comments
      ///
      /// Locales: da, en
      static let wavTlDXAText = Rswift.StringResource(key: "wav-tl-dXA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Enter account number
      ///
      /// Locales: da, en
      static let fzJ4dREPPlaceholder = Rswift.StringResource(key: "fzJ-4d-REP.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Enter bank name
      ///
      /// Locales: da, en
      static let lfuYSUliPlaceholder = Rswift.StringResource(key: "Lfu-YS-uli.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Enter restaurant code
      ///
      /// Locales: da, en
      static let kd5KSWZtText = Rswift.StringResource(key: "KD5-KS-WZt.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Enter restaurant code
      ///
      /// Locales: da, en
      static let psb7Jw1Placeholder = Rswift.StringResource(key: "2PS-B7-Jw1.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Enter your nets  account secret key
      ///
      /// Locales: da, en
      static let utBuViiText = Rswift.StringResource(key: "6UT-bu-Vii.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Extra Items
      ///
      /// Locales: da, en
      static let flMVRMaeText = Rswift.StringResource(key: "FlM-VR-mae.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: da, en
      static let cteUGRy2Text = Rswift.StringResource(key: "cte-UG-Ry2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: da, en
      static let sbhLyFPcPlaceholder = Rswift.StringResource(key: "Sbh-Ly-FPc.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: For continue you need to accept Terms and Conditions
      ///
      /// Locales: da, en
      static let eLCHvBZGText = Rswift.StringResource(key: "eLC-Hv-bZG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Forgot Password?
      ///
      /// Locales: da, en
      static let l9yXEWIRNormalTitle = Rswift.StringResource(key: "L9y-XE-wIR.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Forgot Password?
      ///
      /// Locales: da, en
      static let yAcB9MchText = Rswift.StringResource(key: "YAc-B9-mch.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Grand Earning:
      ///
      /// Locales: da, en
      static let ko06hPcNText = Rswift.StringResource(key: "ko0-6h-pcN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Grand Earning:
      ///
      /// Locales: da, en
      static let vYSSC39Text = Rswift.StringResource(key: "1vY-SS-C39.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: ITEMS
      ///
      /// Locales: da, en
      static let d2aD7IcfText = Rswift.StringResource(key: "d2a-D7-icf.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: ITEMS
      ///
      /// Locales: da, en
      static let lJwEE5ARText = Rswift.StringResource(key: "LJw-eE-5AR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: ITEMS
      ///
      /// Locales: da, en
      static let qvd3INhyText = Rswift.StringResource(key: "qvd-3I-Nhy.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Indore, Madhya Pradesh
      ///
      /// Locales: da, en
      static let awLTVELsText = Rswift.StringResource(key: "awL-TV-ELs.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Indore, Madhya Pradesh
      ///
      /// Locales: da, en
      static let uYb6vLQZText = Rswift.StringResource(key: "UYb-6v-LQZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Kr 90.0
      ///
      /// Locales: da, en
      static let bQKPhXKnText = Rswift.StringResource(key: "bQK-Ph-xKn.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: LOGIN
      ///
      /// Locales: da, en
      static let cKiOXKsZNormalTitle = Rswift.StringResource(key: "CKi-OX-ksZ.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: LOGIN
      ///
      /// Locales: da, en
      static let gj2HcHtXNormalTitle = Rswift.StringResource(key: "gj2-Hc-htX.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: da, en
      static let kfrR1HtkText = Rswift.StringResource(key: "Kfr-r1-htk.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: da, en
      static let peFPYQWzText = Rswift.StringResource(key: "PeF-pY-qWz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: da, en
      static let iBrVasText = Rswift.StringResource(key: "83I-br-Vas.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: da, en
      static let yOJNUMPrPlaceholder = Rswift.StringResource(key: "yOJ-nU-mPr.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Lebenese kebab speciality
      ///
      /// Locales: da, en
      static let goTRSLcPText = Rswift.StringResource(key: "goT-rS-LcP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Lebenese kebab speciality
      ///
      /// Locales: da, en
      static let qXN7Qj7Text = Rswift.StringResource(key: "2qX-n7-qj7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Load More
      ///
      /// Locales: da, en
      static let nbIXWXKxNormalTitle = Rswift.StringResource(key: "nbI-xW-XKx.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Load More
      ///
      /// Locales: da, en
      static let rvgCeBYCNormalTitle = Rswift.StringResource(key: "Rvg-ce-BYC.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: da, en
      static let cr50n6FJNormalTitle = Rswift.StringResource(key: "CR5-0n-6FJ.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: da, en
      static let paDFmMmgNormalTitle = Rswift.StringResource(key: "paD-fm-mmg.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: da, en
      static let wGS84E6zNormalTitle = Rswift.StringResource(key: "wGS-84-E6z.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Menu
      ///
      /// Locales: da, en
      static let wqTHOG3bNormalTitle = Rswift.StringResource(key: "WqT-hO-G3b.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Name: 
      ///
      /// Locales: da, en
      static let ki7DCRukText = Rswift.StringResource(key: "ki7-DC-Ruk.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: New Orders
      ///
      /// Locales: da, en
      static let y0FGx2AFText = Rswift.StringResource(key: "Y0F-gx-2AF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: da, en
      static let tUJL5F6ePlaceholder = Rswift.StringResource(key: "tUJ-l5-F6e.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: ORDER NOW
      ///
      /// Locales: da, en
      static let g7aTfVoyNormalTitle = Rswift.StringResource(key: "g7a-tf-Voy.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Old Password
      ///
      /// Locales: da, en
      static let wdlQkLFYPlaceholder = Rswift.StringResource(key: "WDL-qk-LFY.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Online
      ///
      /// Locales: da, en
      static let erRLxDb7Text = Rswift.StringResource(key: "erR-lx-Db7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Open
      ///
      /// Locales: da, en
      static let meiaFoEText = Rswift.StringResource(key: "0ME-iA-foE.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Open
      ///
      /// Locales: da, en
      static let qLlI6TINText = Rswift.StringResource(key: "qLl-I6-tIN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Open Time
      ///
      /// Locales: da, en
      static let nyt34Qb9Text = Rswift.StringResource(key: "Nyt-34-Qb9.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Opent Orders
      ///
      /// Locales: da, en
      static let av6OuGe6NormalTitle = Rswift.StringResource(key: "av6-Ou-Ge6.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Optional
      ///
      /// Locales: da, en
      static let xBiHUPbkText = Rswift.StringResource(key: "xBi-hU-Pbk.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Order By:
      ///
      /// Locales: da, en
      static let hYnE2ERgText = Rswift.StringResource(key: "HYn-e2-eRg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Order Id: 0
      ///
      /// Locales: da, en
      static let ltjTfText = Rswift.StringResource(key: "312-LT-JTf.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Order Id: 1
      ///
      /// Locales: da, en
      static let fMPlWHvText = Rswift.StringResource(key: "7fM-pl-wHv.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Order Id: 1
      ///
      /// Locales: da, en
      static let kms1fX4UText = Rswift.StringResource(key: "Kms-1f-x4U.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Order Id: 1
      ///
      /// Locales: da, en
      static let mLvMrWZLText = Rswift.StringResource(key: "MLv-mr-WZL.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Order Id: 1
      ///
      /// Locales: da, en
      static let mrq9pSHDText = Rswift.StringResource(key: "MRQ-9p-SHD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Paid
      ///
      /// Locales: da, en
      static let izIHkGW2Text = Rswift.StringResource(key: "IzI-Hk-GW2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: da, en
      static let fM7DlElSText = Rswift.StringResource(key: "fM7-dl-elS.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: da, en
      static let frdm74zVText = Rswift.StringResource(key: "FRD-m7-4zV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: da, en
      static let sWt3rYpfPlaceholder = Rswift.StringResource(key: "sWt-3r-ypf.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: da, en
      static let zUAA3JonPlaceholder = Rswift.StringResource(key: "zUA-A3-jon.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Past Orders
      ///
      /// Locales: da, en
      static let f9vMXVfpNormalTitle = Rswift.StringResource(key: "f9v-mX-vfp.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Past Orders
      ///
      /// Locales: da, en
      static let qkmSTEQUNormalTitle = Rswift.StringResource(key: "qkm-ST-eQU.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Past Orders
      ///
      /// Locales: da, en
      static let rC8HcNmkNormalTitle = Rswift.StringResource(key: "rC8-Hc-Nmk.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Pay By
      ///
      /// Locales: da, en
      static let h2W5KMO9Text = Rswift.StringResource(key: "h2W-5K-MO9.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Pay By
      ///
      /// Locales: da, en
      static let upuBDA2IText = Rswift.StringResource(key: "Upu-bD-A2I.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Pay in shop
      ///
      /// Locales: da, en
      static let emCH9WdgNormalTitle = Rswift.StringResource(key: "EmC-H9-Wdg.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: da, en
      static let bqcnplb2Placeholder = Rswift.StringResource(key: "BQC-nP-LB2.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: da, en
      static let caNKA44Placeholder = Rswift.StringResource(key: "1Ca-nK-A44.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: da, en
      static let yRR0LR6jPlaceholder = Rswift.StringResource(key: "yRR-0L-r6j.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: da, en
      static let zospeYpBText = Rswift.StringResource(key: "ZOS-pE-ypB.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Phone Number
      ///
      /// Locales: da, en
      static let gIBC3PlCText = Rswift.StringResource(key: "gIB-c3-plC.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Phone Number
      ///
      /// Locales: da, en
      static let hZ3MwSPkPlaceholder = Rswift.StringResource(key: "hZ3-Mw-SPk.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Phone Number
      ///
      /// Locales: da, en
      static let rZS89qOText = Rswift.StringResource(key: "6rZ-s8-9qO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Phone NumberL 123456789
      ///
      /// Locales: da, en
      static let xemjzgoText = Rswift.StringResource(key: "4XE-MJ-zGO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Phone: 
      ///
      /// Locales: da, en
      static let kLRJx1ihText = Rswift.StringResource(key: "kLR-Jx-1ih.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Pickup your self
      ///
      /// Locales: da, en
      static let ixvDkBz9NormalTitle = Rswift.StringResource(key: "Ixv-Dk-Bz9.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Please select the language
      ///
      /// Locales: da, en
      static let tjif3G2vText = Rswift.StringResource(key: "TJI-F3-g2v.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Print
      ///
      /// Locales: da, en
      static let ahxdfDnNormalTitle = Rswift.StringResource(key: "0AH-XD-fDn.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Product Detail:
      ///
      /// Locales: da, en
      static let ok5uEZMText = Rswift.StringResource(key: "1OK-5u-eZM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Product Detail:
      ///
      /// Locales: da, en
      static let rv4OkWerText = Rswift.StringResource(key: "Rv4-Ok-Wer.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Product Name:
      ///
      /// Locales: da, en
      static let cx0WOSP8Text = Rswift.StringResource(key: "CX0-wO-sP8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Product Name:
      ///
      /// Locales: da, en
      static let jn6TCHVYText = Rswift.StringResource(key: "Jn6-tC-hVY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Product Price:
      ///
      /// Locales: da, en
      static let eZeHy6IFText = Rswift.StringResource(key: "eZe-hy-6IF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Remaining 0 min 0 sec
      ///
      /// Locales: da, en
      static let hZlJkN1rText = Rswift.StringResource(key: "HZl-Jk-N1r.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Restaurant
      ///
      /// Locales: da, en
      static let rRe5i5ceNormalTitle = Rswift.StringResource(key: "rRe-5i-5ce.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Restaurant
      ///
      /// Locales: da, en
      static let xGdYMAmHNormalTitle = Rswift.StringResource(key: "xGd-yM-amH.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Restaurant Name
      ///
      /// Locales: da, en
      static let c9R9WQXqText = Rswift.StringResource(key: "C9R-9W-qXq.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Restaurant Name
      ///
      /// Locales: da, en
      static let e55FX1nKText = Rswift.StringResource(key: "e55-FX-1nK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Reviews
      ///
      /// Locales: da, en
      static let ohuJ2YVGNormalTitle = Rswift.StringResource(key: "ohu-j2-yVG.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: SAR 0
      ///
      /// Locales: da, en
      static let cEqXbGQZText = Rswift.StringResource(key: "CEq-xb-gQZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: SAR 0.00
      ///
      /// Locales: da, en
      static let xThERYCoText = Rswift.StringResource(key: "xTh-eR-yCo.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: SIGN UP
      ///
      /// Locales: da, en
      static let am93EAVBNormalTitle = Rswift.StringResource(key: "Am9-3E-aVB.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: SIGN UP
      ///
      /// Locales: da, en
      static let wRzHbQnKNormalTitle = Rswift.StringResource(key: "wRz-hb-QnK.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: da, en
      static let oshtuHacNormalTitle = Rswift.StringResource(key: "OSH-tU-hac.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: da, en
      static let paETdOcNNormalTitle = Rswift.StringResource(key: "paE-Td-ocN.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Sayaji Kebab Villas
      ///
      /// Locales: da, en
      static let piN0LluText = Rswift.StringResource(key: "5pi-n0-llu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Sayaji Kebab Villas
      ///
      /// Locales: da, en
      static let q2PMHACNText = Rswift.StringResource(key: "Q2P-MH-aCN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Search Location
      ///
      /// Locales: da, en
      static let cF6OmZmkText = Rswift.StringResource(key: "cF6-om-Zmk.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Search food by category
      ///
      /// Locales: da, en
      static let vrsTcVV1Text = Rswift.StringResource(key: "Vrs-Tc-VV1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Select Location
      ///
      /// Locales: da, en
      static let jXaJaVA6Text = Rswift.StringResource(key: "jXa-Ja-vA6.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Select Order Ready Time
      ///
      /// Locales: da, en
      static let qWBZNNqwText = Rswift.StringResource(key: "qWB-ZN-nqw.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Select Restaurant Location
      ///
      /// Locales: da, en
      static let xdpg1KQPText = Rswift.StringResource(key: "XDP-G1-KQP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Select Time
      ///
      /// Locales: da, en
      static let mpfEUE08Text = Rswift.StringResource(key: "mpf-eU-e08.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Select date and time for pre order(Optional)
      ///
      /// Locales: da, en
      static let vIDcText = Rswift.StringResource(key: "243-1v-IDc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Select restaurant open and close time
      ///
      /// Locales: da, en
      static let sXoW0HqKText = Rswift.StringResource(key: "SXo-w0-hqK.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Send Request
      ///
      /// Locales: da, en
      static let nTwJsFHBNormalTitle = Rswift.StringResource(key: "NTw-js-fHB.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Sign up as user to place an order
      ///
      /// Locales: da, en
      static let aBlGOV3FNormalTitle = Rswift.StringResource(key: "aBl-GO-v3F.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Sizes:
      ///
      /// Locales: da, en
      static let hNYZgSirText = Rswift.StringResource(key: "hNY-zg-sir.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Sizes:
      ///
      /// Locales: da, en
      static let rQ31zTn8Text = Rswift.StringResource(key: "rQ3-1z-Tn8.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Smith Jhones
      ///
      /// Locales: da, en
      static let qgKW8QZfText = Rswift.StringResource(key: "qgK-W8-QZf.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Smith Jhones
      ///
      /// Locales: da, en
      static let uqyCvVXLText = Rswift.StringResource(key: "UQY-Cv-VXL.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: da, en
      static let iG70KOtsNormalTitle = Rswift.StringResource(key: "iG7-0K-Ots.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: da, en
      static let oDe1N4fvNormalTitle = Rswift.StringResource(key: "ODe-1N-4fv.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: da, en
      static let ut4HPDkDNormalTitle = Rswift.StringResource(key: "Ut4-HP-DkD.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Submit Order
      ///
      /// Locales: da, en
      static let xVhXnGQGNormalTitle = Rswift.StringResource(key: "XVh-Xn-GQG.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Subtotal
      ///
      /// Locales: da, en
      static let fR2XKI3fText = Rswift.StringResource(key: "fR2-xK-I3f.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Subtotal
      ///
      /// Locales: da, en
      static let ngI4VLiText = Rswift.StringResource(key: "6ng-i4-VLi.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Subtotal
      ///
      /// Locales: da, en
      static let rzxJlERxText = Rswift.StringResource(key: "RZX-Jl-eRx.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Subtotal
      ///
      /// Locales: da, en
      static let urgO5HXyText = Rswift.StringResource(key: "urg-O5-HXy.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Tax Number
      ///
      /// Locales: da, en
      static let q500fOjjText = Rswift.StringResource(key: "Q50-0f-ojj.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Tax Number CVR 123456789
      ///
      /// Locales: da, en
      static let re67D555Text = Rswift.StringResource(key: "Re6-7D-555.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Test Item
      ///
      /// Locales: da, en
      static let fFAf3bGText = Rswift.StringResource(key: "3fF-af-3bG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Test Item
      ///
      /// Locales: da, en
      static let l2zRF9W7Text = Rswift.StringResource(key: "l2z-rF-9W7.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Test Item
      ///
      /// Locales: da, en
      static let q29YbYADText = Rswift.StringResource(key: "q29-Yb-yAD.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Test Item
      ///
      /// Locales: da, en
      static let uYz7ZKGOText = Rswift.StringResource(key: "UYz-7Z-kGO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Thank you
      ///
      /// Locales: da, en
      static let cXQVN1NfText = Rswift.StringResource(key: "cXQ-VN-1Nf.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: This Month Earning
      ///
      /// Locales: da, en
      static let hcyS5XDnText = Rswift.StringResource(key: "Hcy-s5-xDn.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: This Year Earning
      ///
      /// Locales: da, en
      static let t4GAH9WxText = Rswift.StringResource(key: "T4G-aH-9Wx.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: This restaurant currently, not provide delivery option, So order only if you pickup from restaurant.
      ///
      /// Locales: da, en
      static let efTUGyuText = Rswift.StringResource(key: "2ef-TU-gyu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: This week Earning
      ///
      /// Locales: da, en
      static let ym09352lText = Rswift.StringResource(key: "YM0-93-52l.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Time
      ///
      /// Locales: da, en
      static let ta7A2BeQNormalTitle = Rswift.StringResource(key: "ta7-a2-beQ.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Today Earning
      ///
      /// Locales: da, en
      static let pgW8dUjgText = Rswift.StringResource(key: "PgW-8d-Ujg.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static let bfFAjIshText = Rswift.StringResource(key: "BfF-Aj-ish.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static let epv1bBLaText = Rswift.StringResource(key: "Epv-1b-bLa.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static let fFlXqGText = Rswift.StringResource(key: "99f-fl-XqG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static let iXSZeDSFText = Rswift.StringResource(key: "iXS-ze-DSF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static let mneHNYhVText = Rswift.StringResource(key: "Mne-hN-YhV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static let sVTBAjwText = Rswift.StringResource(key: "8sV-TB-ajw.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static let zhhGaCCRText = Rswift.StringResource(key: "Zhh-ga-cCR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Amount (Incl. VAT)
      ///
      /// Locales: da, en
      static let zGaT6AFZText = Rswift.StringResource(key: "zGa-t6-aFZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Amount (Incl. Vat)
      ///
      /// Locales: da, en
      static let t5PG5I9cText = Rswift.StringResource(key: "T5P-g5-i9c.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Cart
      ///
      /// Locales: da, en
      static let abXLhA5pText = Rswift.StringResource(key: "AbX-Lh-A5p.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Cart
      ///
      /// Locales: da, en
      static let chL2LbIText = Rswift.StringResource(key: "4ch-L2-lbI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Cart
      ///
      /// Locales: da, en
      static let h2f14VzQText = Rswift.StringResource(key: "H2f-14-vzQ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Cart
      ///
      /// Locales: da, en
      static let tXpWsKCYText = Rswift.StringResource(key: "tXp-Ws-kCY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Total Cart
      ///
      /// Locales: da, en
      static let vP6RyGChText = Rswift.StringResource(key: "vP6-Ry-gCh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: UPDATE RESTAURANT
      ///
      /// Locales: da, en
      static let qJ1UQd2NormalTitle = Rswift.StringResource(key: "1qJ-1U-qd2.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: User
      ///
      /// Locales: da, en
      static let eFe08WIoNormalTitle = Rswift.StringResource(key: "EFe-08-wIo.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: User
      ///
      /// Locales: da, en
      static let r1jHMCMPNormalTitle = Rswift.StringResource(key: "R1j-hM-cMP.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: User (Customer Information)
      ///
      /// Locales: da, en
      static let g7QJIQwZText = Rswift.StringResource(key: "g7Q-jI-QwZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: User Name
      ///
      /// Locales: da, en
      static let cChEzPEBText = Rswift.StringResource(key: "CCh-ez-PEB.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: User Name
      ///
      /// Locales: da, en
      static let dgRKWKHPlaceholder = Rswift.StringResource(key: "8dg-rK-wKH.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: User Name
      ///
      /// Locales: da, en
      static let dueCiRText = Rswift.StringResource(key: "40D-UE-CiR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: User Name
      ///
      /// Locales: da, en
      static let ous0VEe2Text = Rswift.StringResource(key: "OUS-0V-Ee2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: User Name
      ///
      /// Locales: da, en
      static let x7XUhPDrText = Rswift.StringResource(key: "X7X-Uh-pDr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Waiting for driver
      ///
      /// Locales: da, en
      static let eeZ0lGuXText = Rswift.StringResource(key: "eeZ-0l-GuX.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Waiting for driver
      ///
      /// Locales: da, en
      static let sYiB16LaText = Rswift.StringResource(key: "SYi-b1-6La.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Wallet Balance
      ///
      /// Locales: da, en
      static let j8nOqYTOText = Rswift.StringResource(key: "j8n-Oq-YTO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: We will provide you good service and want you will come back again.
      ///
      /// Locales: da, en
      static let gTCaBztText = Rswift.StringResource(key: "8gT-Ca-Bzt.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Withdraw Wallet Amount
      ///
      /// Locales: da, en
      static let z3gMOGKXNormalTitle = Rswift.StringResource(key: "Z3g-MO-GKX.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: Write something about your restaurant
      ///
      /// Locales: da, en
      static let utkSoHmNText = Rswift.StringResource(key: "UTK-so-HmN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: X
      ///
      /// Locales: da, en
      static let eqcLoGOVNormalTitle = Rswift.StringResource(key: "Eqc-Lo-GOV.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: lorem ipsum
      ///
      /// Locales: da, en
      static let aiKGOZApText = Rswift.StringResource(key: "AiK-GO-zAp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: lorem ipsum
      ///
      /// Locales: da, en
      static let cJy42EaIText = Rswift.StringResource(key: "cJy-42-eaI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: lorem ipsum
      ///
      /// Locales: da, en
      static let ds5Zf9vxText = Rswift.StringResource(key: "DS5-Zf-9vx.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: da, en
      static let dda37QtVText = Rswift.StringResource(key: "DDA-37-qtV.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: da, en
      static let f4dOjA7bText = Rswift.StringResource(key: "F4d-Oj-A7b.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: da, en
      static let jgJ45K1Text = Rswift.StringResource(key: "0jg-J4-5K1.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: da, en
      static let jmS7ROfcText = Rswift.StringResource(key: "JmS-7R-ofc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)
      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: da, en
      static let tJhGSUsYText = Rswift.StringResource(key: "TJh-gS-UsY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["da", "en"], comment: nil)

      /// en translation:  0.00
      ///
      /// Locales: da, en
      static func nOiCDWbhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NOi-CD-Wbh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NOi-CD-Wbh.text"
        }

        return NSLocalizedString("NOi-CD-Wbh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $0
      ///
      /// Locales: da, en
      static func k26lCGkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7K2-6l-cGk.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7K2-6l-cGk.text"
        }

        return NSLocalizedString("7K2-6l-cGk.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $0
      ///
      /// Locales: da, en
      static func nhMVQUgTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NhM-VQ-UgT.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NhM-VQ-UgT.text"
        }

        return NSLocalizedString("NhM-VQ-UgT.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $000
      ///
      /// Locales: da, en
      static func bh4RMDQbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bh4-rM-DQb.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Bh4-rM-DQb.text"
        }

        return NSLocalizedString("Bh4-rM-DQb.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $000
      ///
      /// Locales: da, en
      static func hk1YkIXqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hk1-yk-IXq.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hk1-yk-IXq.text"
        }

        return NSLocalizedString("hk1-yk-IXq.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $000
      ///
      /// Locales: da, en
      static func klaQQ1trText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kla-qQ-1tr.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Kla-qQ-1tr.text"
        }

        return NSLocalizedString("Kla-qQ-1tr.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $000
      ///
      /// Locales: da, en
      static func xQzEoPb2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XQz-eo-pb2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XQz-eo-pb2.text"
        }

        return NSLocalizedString("XQz-eo-pb2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $80
      ///
      /// Locales: da, en
      static func itGU3SMgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ItG-u3-SMg.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ItG-u3-SMg.text"
        }

        return NSLocalizedString("ItG-u3-SMg.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: $80
      ///
      /// Locales: da, en
      static func o6aSsUWMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("O6a-ss-UWM.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "O6a-ss-UWM.text"
        }

        return NSLocalizedString("O6a-ss-UWM.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: +
      ///
      /// Locales: da, en
      static func dlpfm2uONormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DLP-FM-2uO.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DLP-FM-2uO.normalTitle"
        }

        return NSLocalizedString("DLP-FM-2uO.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: +
      ///
      /// Locales: da, en
      static func tStBnAQ0NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TSt-bn-AQ0.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TSt-bn-AQ0.normalTitle"
        }

        return NSLocalizedString("TSt-bn-AQ0.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: -
      ///
      /// Locales: da, en
      static func bUeJ9ZBANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BUe-j9-ZBA.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BUe-j9-ZBA.normalTitle"
        }

        return NSLocalizedString("BUe-j9-ZBA.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: -
      ///
      /// Locales: da, en
      static func bydVoZ6mNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("byd-vo-z6m.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "byd-vo-z6m.normalTitle"
        }

        return NSLocalizedString("byd-vo-z6m.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0
      ///
      /// Locales: da, en
      static func nVkM7JoFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NVk-M7-JoF.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NVk-M7-JoF.text"
        }

        return NSLocalizedString("NVk-M7-JoF.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0
      ///
      /// Locales: da, en
      static func nnTZQPGGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NnT-ZQ-pGG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NnT-ZQ-pGG.text"
        }

        return NSLocalizedString("NnT-ZQ-pGG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0.00
      ///
      /// Locales: da, en
      static func mMD0HOzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4mM-d0-HOz.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4mM-d0-HOz.text"
        }

        return NSLocalizedString("4mM-d0-HOz.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0.00 Kr
      ///
      /// Locales: da, en
      static func auTA2TeeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AuT-a2-Tee.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "AuT-a2-Tee.text"
        }

        return NSLocalizedString("AuT-a2-Tee.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0.00 Kr
      ///
      /// Locales: da, en
      static func dwA9hO1SText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dwA-9h-O1S.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dwA-9h-O1S.text"
        }

        return NSLocalizedString("dwA-9h-O1S.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0.00 Kr
      ///
      /// Locales: da, en
      static func iJsEJHseText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iJs-eJ-hse.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iJs-eJ-hse.text"
        }

        return NSLocalizedString("iJs-eJ-hse.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0.00 Kr
      ///
      /// Locales: da, en
      static func zxayXoVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6ZX-aY-XoV.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6ZX-aY-XoV.text"
        }

        return NSLocalizedString("6ZX-aY-XoV.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 00 Kr
      ///
      /// Locales: da, en
      static func gffN217nText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gff-N2-17n.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gff-N2-17n.text"
        }

        return NSLocalizedString("gff-N2-17n.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 00 Kr
      ///
      /// Locales: da, en
      static func jicVvErAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JIC-Vv-ErA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JIC-Vv-ErA.text"
        }

        return NSLocalizedString("JIC-Vv-ErA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 00 Kr
      ///
      /// Locales: da, en
      static func kwwMgVLdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kww-Mg-VLd.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Kww-Mg-VLd.text"
        }

        return NSLocalizedString("Kww-Mg-VLd.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 00 Kr
      ///
      /// Locales: da, en
      static func lAcGnL7mText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lAc-Gn-L7m.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lAc-Gn-L7m.text"
        }

        return NSLocalizedString("lAc-Gn-L7m.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 00 Kr
      ///
      /// Locales: da, en
      static func nVtC1Z2cText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nVt-C1-Z2c.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "nVt-C1-Z2c.text"
        }

        return NSLocalizedString("nVt-C1-Z2c.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 00 Kr
      ///
      /// Locales: da, en
      static func seVhRuOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3Se-Vh-RuO.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3Se-Vh-RuO.text"
        }

        return NSLocalizedString("3Se-Vh-RuO.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0000:00:00 00:00:00
      ///
      /// Locales: da, en
      static func hALHZ3grText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hAL-hZ-3gr.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hAL-hZ-3gr.text"
        }

        return NSLocalizedString("hAL-hZ-3gr.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 0000:00:00 00:00:00
      ///
      /// Locales: da, en
      static func ke3TCBIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0KE-3T-cBI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0KE-3T-cBI.text"
        }

        return NSLocalizedString("0KE-3T-cBI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: da, en
      static func aPVTNMVnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aPV-tN-MVn.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aPV-tN-MVn.text"
        }

        return NSLocalizedString("aPV-tN-MVn.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: da, en
      static func bgjKAH4gText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bgj-kA-H4g.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bgj-kA-H4g.text"
        }

        return NSLocalizedString("bgj-kA-H4g.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: da, en
      static func fche03sText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2FC-hE-03s.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2FC-hE-03s.text"
        }

        return NSLocalizedString("2FC-hE-03s.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: da, en
      static func gwTWWBbmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GwT-WW-bbm.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GwT-WW-bbm.text"
        }

        return NSLocalizedString("GwT-WW-bbm.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: da, en
      static func jiAJN09Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4Ji-aJ-N09.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4Ji-aJ-N09.text"
        }

        return NSLocalizedString("4Ji-aJ-N09.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: da, en
      static func kyRPMNrNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kyR-PM-nrN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kyR-PM-nrN.text"
        }

        return NSLocalizedString("kyR-PM-nrN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: da, en
      static func rAmOOPhoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rAm-OO-pho.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rAm-OO-pho.text"
        }

        return NSLocalizedString("rAm-OO-pho.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 hour
      ///
      /// Locales: da, en
      static func gglZNL7qNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ggl-zN-L7q.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ggl-zN-L7q.normalTitle"
        }

        return NSLocalizedString("ggl-zN-L7q.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 x ABC
      ///
      /// Locales: da, en
      static func woHM7XHlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("woH-m7-xHl.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "woH-m7-xHl.text"
        }

        return NSLocalizedString("woH-m7-xHl.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 x Capri, 2 x Salad
      ///
      /// Locales: da, en
      static func c5rQN2jhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c5r-qN-2jh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "c5r-qN-2jh.text"
        }

        return NSLocalizedString("c5r-qN-2jh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 1 x Capri, 2 x Salad
      ///
      /// Locales: da, en
      static func t5JPJVOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7T5-JP-JVO.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7T5-JP-JVO.text"
        }

        return NSLocalizedString("7T5-JP-JVO.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 15 min
      ///
      /// Locales: da, en
      static func wnDJJEJaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wnD-jJ-eJa.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wnD-jJ-eJa.normalTitle"
        }

        return NSLocalizedString("wnD-jJ-eJa.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 2021-04-20 07:08:15
      ///
      /// Locales: da, en
      static func mR29WV90Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mR2-9W-V90.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mR2-9W-V90.text"
        }

        return NSLocalizedString("mR2-9W-V90.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 2021-04-20 07:08:15
      ///
      /// Locales: da, en
      static func xjURvTdaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xjU-rv-Tda.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xjU-rv-Tda.text"
        }

        return NSLocalizedString("xjU-rv-Tda.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 25 SAR
      ///
      /// Locales: da, en
      static func sq4KE7IXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sq4-kE-7IX.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sq4-kE-7IX.text"
        }

        return NSLocalizedString("sq4-kE-7IX.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 25 SAR
      ///
      /// Locales: da, en
      static func vUQOCE8gText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vUQ-OC-E8g.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vUQ-OC-E8g.text"
        }

        return NSLocalizedString("vUQ-OC-E8g.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 25 SAR
      ///
      /// Locales: da, en
      static func y3HCF7DText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8Y3-hC-F7D.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8Y3-hC-F7D.text"
        }

        return NSLocalizedString("8Y3-hC-F7D.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 30 min
      ///
      /// Locales: da, en
      static func cpiZUI9hNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cpi-ZU-I9h.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Cpi-ZU-I9h.normalTitle"
        }

        return NSLocalizedString("Cpi-ZU-I9h.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 45 min
      ///
      /// Locales: da, en
      static func mGgX0T2BNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MGg-x0-T2B.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MGg-x0-T2B.normalTitle"
        }

        return NSLocalizedString("MGg-x0-T2B.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 88894 00093
      ///
      /// Locales: da, en
      static func acaAy0VYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aca-Ay-0VY.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aca-Ay-0VY.text"
        }

        return NSLocalizedString("aca-Ay-0VY.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 88894 00093
      ///
      /// Locales: da, en
      static func qpeOVCB5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qpe-OV-cB5.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qpe-OV-cB5.text"
        }

        return NSLocalizedString("qpe-OV-cB5.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: ADD NEW ADDRESS
      ///
      /// Locales: da, en
      static func s9YwFUONormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6s9-yw-fUO.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6s9-yw-fUO.normalTitle"
        }

        return NSLocalizedString("6s9-yw-fUO.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: ADD TO CART
      ///
      /// Locales: da, en
      static func szBsEb9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3sz-Bs-Eb9.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3sz-Bs-Eb9.normalTitle"
        }

        return NSLocalizedString("3sz-Bs-Eb9.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: ADD TO CART
      ///
      /// Locales: da, en
      static func yblBAT8dNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ybl-bA-T8d.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ybl-bA-T8d.normalTitle"
        }

        return NSLocalizedString("Ybl-bA-T8d.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Accept
      ///
      /// Locales: da, en
      static func gfVJyZriNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gfV-jy-Zri.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gfV-jy-Zri.normalTitle"
        }

        return NSLocalizedString("gfV-jy-Zri.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add Restaurant Cover Image
      ///
      /// Locales: da, en
      static func jAuTiK39Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jAu-Ti-K39.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "jAu-Ti-K39.text"
        }

        return NSLocalizedString("jAu-Ti-K39.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add Restaurant Image
      ///
      /// Locales: da, en
      static func k2mXjBwgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("k2m-xj-Bwg.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "k2m-xj-Bwg.text"
        }

        return NSLocalizedString("k2m-xj-Bwg.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Add your restaurant details
      ///
      /// Locales: da, en
      static func aKhPpUbEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aKh-pp-UbE.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aKh-pp-UbE.text"
        }

        return NSLocalizedString("aKh-pp-UbE.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: da, en
      static func gun2SlSPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4GU-N2-SlS.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4GU-N2-SlS.placeholder"
        }

        return NSLocalizedString("4GU-N2-SlS.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: da, en
      static func pcX8QjPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8Pc-X8-qjP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8Pc-X8-qjP.text"
        }

        return NSLocalizedString("8Pc-X8-qjP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Address Bar
      ///
      /// Locales: da, en
      static func d0TBBQyIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("D0T-BB-qyI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "D0T-BB-qyI.text"
        }

        return NSLocalizedString("D0T-BB-qyI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Address type (Home, Office)
      ///
      /// Locales: da, en
      static func gggMAEZIPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ggg-mA-eZI.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ggg-mA-eZI.placeholder"
        }

        return NSLocalizedString("Ggg-mA-eZI.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Address:
      ///
      /// Locales: da, en
      static func pXKVMWzHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pXK-vM-wzH.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "pXK-vM-wzH.text"
        }

        return NSLocalizedString("pXK-vM-wzH.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Assigned Driver:
      ///
      /// Locales: da, en
      static func h9rMf976Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h9r-Mf-976.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "h9r-Mf-976.text"
        }

        return NSLocalizedString("h9r-Mf-976.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Call
      ///
      /// Locales: da, en
      static func lZTL4INormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("47l-ZT-L4I.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "47l-ZT-L4I.normalTitle"
        }

        return NSLocalizedString("47l-ZT-L4I.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Call
      ///
      /// Locales: da, en
      static func niiwg8jINormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NII-WG-8jI.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NII-WG-8jI.normalTitle"
        }

        return NSLocalizedString("NII-WG-8jI.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: da, en
      static func k7kD5BQKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("K7k-D5-BQK.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "K7k-D5-BQK.normalTitle"
        }

        return NSLocalizedString("K7k-D5-BQK.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: da, en
      static func qqEXCrSNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3qq-EX-CrS.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3qq-EX-CrS.normalTitle"
        }

        return NSLocalizedString("3qq-EX-CrS.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Card
      ///
      /// Locales: da, en
      static func uzjhipu1NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UZJ-HI-PU1.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UZJ-HI-PU1.normalTitle"
        }

        return NSLocalizedString("UZJ-HI-PU1.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: da, en
      static func fGPNvG6nNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fGP-nv-G6n.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fGP-nv-G6n.normalTitle"
        }

        return NSLocalizedString("fGP-nv-G6n.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: da, en
      static func hDZwXPONormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8hD-zw-xPO.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8hD-zw-xPO.normalTitle"
        }

        return NSLocalizedString("8hD-zw-xPO.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: da, en
      static func nHPENnkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6nH-pE-Nnk.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6nH-pE-Nnk.normalTitle"
        }

        return NSLocalizedString("6nH-pE-Nnk.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: da, en
      static func wiWUB9szNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wiW-UB-9sz.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wiW-UB-9sz.normalTitle"
        }

        return NSLocalizedString("wiW-UB-9sz.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Choose
      ///
      /// Locales: da, en
      static func ugTZcLljText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UgT-zc-Llj.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UgT-zc-Llj.text"
        }

        return NSLocalizedString("UgT-zc-Llj.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Choose 1:
      ///
      /// Locales: da, en
      static func h5N3n1j5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("H5N-3n-1j5.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "H5N-3n-1j5.text"
        }

        return NSLocalizedString("H5N-3n-1j5.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Choose 2:
      ///
      /// Locales: da, en
      static func ekoU63ORText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eko-u6-3OR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "eko-u6-3OR.text"
        }

        return NSLocalizedString("eko-u6-3OR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Choose 3:
      ///
      /// Locales: da, en
      static func s9DXP6W1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("S9D-XP-6W1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "S9D-XP-6W1.text"
        }

        return NSLocalizedString("S9D-XP-6W1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Choose 4:
      ///
      /// Locales: da, en
      static func lI4AfJvOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lI4-af-JvO.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "lI4-af-JvO.text"
        }

        return NSLocalizedString("lI4-af-JvO.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: da, en
      static func h6uJMY25NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h6u-jM-y25.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "h6u-jM-y25.normalTitle"
        }

        return NSLocalizedString("h6u-jM-y25.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: da, en
      static func oyv8gHQuPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OYV-8g-HQu.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "OYV-8g-HQu.placeholder"
        }

        return NSLocalizedString("OYV-8g-HQu.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Create an account as
      ///
      /// Locales: da, en
      static func krfBtHx8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Krf-Bt-hx8.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Krf-Bt-hx8.text"
        }

        return NSLocalizedString("Krf-Bt-hx8.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Current Available Amount
      ///
      /// Locales: da, en
      static func nMQWAXgwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nMQ-wA-xgw.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "nMQ-wA-xgw.text"
        }

        return NSLocalizedString("nMQ-wA-xgw.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Current Available Amount
      ///
      /// Locales: da, en
      static func oSKHPEvJText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oSK-hP-EvJ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "oSK-hP-EvJ.text"
        }

        return NSLocalizedString("oSK-hP-EvJ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Current Available Amount
      ///
      /// Locales: da, en
      static func rPwSdBehText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RPw-Sd-beh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RPw-Sd-beh.text"
        }

        return NSLocalizedString("RPw-Sd-beh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Current Available Amount
      ///
      /// Locales: da, en
      static func sb35zHJBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SB3-5z-HJB.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SB3-5z-HJB.text"
        }

        return NSLocalizedString("SB3-5z-HJB.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Current Available Amount
      ///
      /// Locales: da, en
      static func w6G3oX8VText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("w6G-3o-X8V.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "w6G-3o-X8V.text"
        }

        return NSLocalizedString("w6G-3o-X8V.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Current Orders
      ///
      /// Locales: da, en
      static func gvlVPJVTNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gvl-vP-jVT.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gvl-vP-jVT.normalTitle"
        }

        return NSLocalizedString("gvl-vP-jVT.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Current Orders
      ///
      /// Locales: da, en
      static func h5xKT5NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("22h-5x-kT5.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "22h-5x-kT5.normalTitle"
        }

        return NSLocalizedString("22h-5x-kT5.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Current Orders
      ///
      /// Locales: da, en
      static func mx7LzWNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("18M-x7-LzW.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "18M-x7-LzW.normalTitle"
        }

        return NSLocalizedString("18M-x7-LzW.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Customer Detail
      ///
      /// Locales: da, en
      static func hr4RzTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("22H-R4-RzT.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "22H-R4-RzT.text"
        }

        return NSLocalizedString("22H-R4-RzT.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: DONE
      ///
      /// Locales: da, en
      static func xi5AI6ixNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xi5-aI-6ix.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xi5-aI-6ix.normalTitle"
        }

        return NSLocalizedString("xi5-aI-6ix.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Danish
      ///
      /// Locales: da, en
      static func s1fMmO8HNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("S1f-Mm-o8H.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "S1f-Mm-o8H.normalTitle"
        }

        return NSLocalizedString("S1f-Mm-o8H.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Date
      ///
      /// Locales: da, en
      static func cjZIAK9hNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CjZ-IA-K9h.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CjZ-IA-K9h.normalTitle"
        }

        return NSLocalizedString("CjZ-IA-K9h.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Delivery
      ///
      /// Locales: da, en
      static func o2eBA3oHNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("o2e-BA-3oH.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "o2e-BA-3oH.normalTitle"
        }

        return NSLocalizedString("o2e-BA-3oH.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Fee
      ///
      /// Locales: da, en
      static func fTwVtK7xText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fTw-Vt-K7x.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fTw-Vt-K7x.text"
        }

        return NSLocalizedString("fTw-Vt-K7x.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Fee
      ///
      /// Locales: da, en
      static func jucOjBf8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("juc-oj-bf8.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "juc-oj-bf8.text"
        }

        return NSLocalizedString("juc-oj-bf8.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Fee
      ///
      /// Locales: da, en
      static func kl8GqEPaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kl8-gq-EPa.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Kl8-gq-EPa.text"
        }

        return NSLocalizedString("Kl8-gq-EPa.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Fee
      ///
      /// Locales: da, en
      static func yri0AHhiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yri-0A-Hhi.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yri-0A-Hhi.text"
        }

        return NSLocalizedString("yri-0A-Hhi.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Time:
      ///
      /// Locales: da, en
      static func wK3AFDg5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wK3-aF-Dg5.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wK3-aF-Dg5.text"
        }

        return NSLocalizedString("wK3-aF-Dg5.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Detail:
      ///
      /// Locales: da, en
      static func czdFtB84Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("czd-Ft-b84.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "czd-Ft-b84.text"
        }

        return NSLocalizedString("czd-Ft-b84.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Discount
      ///
      /// Locales: da, en
      static func uc2SHG7KText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UC2-sH-G7K.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UC2-sH-G7K.text"
        }

        return NSLocalizedString("UC2-sH-G7K.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Discount
      ///
      /// Locales: da, en
      static func vcAV3Ke1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vcA-V3-ke1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vcA-V3-ke1.text"
        }

        return NSLocalizedString("vcA-V3-ke1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Discount
      ///
      /// Locales: da, en
      static func wc4W0XdfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wc4-W0-xdf.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Wc4-W0-xdf.text"
        }

        return NSLocalizedString("Wc4-W0-xdf.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Driver
      ///
      /// Locales: da, en
      static func dxDIRRBnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dxD-IR-RBn.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "dxD-IR-RBn.normalTitle"
        }

        return NSLocalizedString("dxD-IR-RBn.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Driver
      ///
      /// Locales: da, en
      static func qXPYvTtaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qXP-Yv-Tta.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qXP-Yv-Tta.normalTitle"
        }

        return NSLocalizedString("qXP-Yv-Tta.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: da, en
      static func aBAEYEgCPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aBA-EY-egC.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aBA-EY-egC.placeholder"
        }

        return NSLocalizedString("aBA-EY-egC.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: da, en
      static func pfkef2XdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PFK-EF-2Xd.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PFK-EF-2Xd.text"
        }

        return NSLocalizedString("PFK-EF-2Xd.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: da, en
      static func b6O5bSMWNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("b6O-5b-SMW.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "b6O-5b-SMW.normalTitle"
        }

        return NSLocalizedString("b6O-5b-SMW.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter Business code to see the menu
      ///
      /// Locales: da, en
      static func suMWyAF4NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SuM-wy-aF4.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SuM-wy-aF4.normalTitle"
        }

        return NSLocalizedString("SuM-wy-aF4.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter IFSC Code
      ///
      /// Locales: da, en
      static func azUK3TuWPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("azU-K3-tuW.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "azU-K3-tuW.placeholder"
        }

        return NSLocalizedString("azU-K3-tuW.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter OTP
      ///
      /// Locales: da, en
      static func wvg9uAPFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WVG-9u-aPF.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WVG-9u-aPF.text"
        }

        return NSLocalizedString("WVG-9u-aPF.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter Otp
      ///
      /// Locales: da, en
      static func cEjONNvEPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CEj-ON-nvE.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CEj-ON-nvE.placeholder"
        }

        return NSLocalizedString("CEj-ON-nvE.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter Tax Number
      ///
      /// Locales: da, en
      static func atXaYkmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7At-xa-Ykm.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7At-xa-Ykm.text"
        }

        return NSLocalizedString("7At-xa-Ykm.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter Tax Number
      ///
      /// Locales: da, en
      static func tQw2y8wKPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TQw-2y-8wK.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TQw-2y-8wK.placeholder"
        }

        return NSLocalizedString("TQw-2y-8wK.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter Withdraw Amount
      ///
      /// Locales: da, en
      static func yo9BDFq1Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yo9-bD-Fq1.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yo9-bD-Fq1.placeholder"
        }

        return NSLocalizedString("yo9-bD-Fq1.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter Your Comments
      ///
      /// Locales: da, en
      static func wavTlDXAText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wav-tl-dXA.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wav-tl-dXA.text"
        }

        return NSLocalizedString("wav-tl-dXA.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter account number
      ///
      /// Locales: da, en
      static func fzJ4dREPPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fzJ-4d-REP.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fzJ-4d-REP.placeholder"
        }

        return NSLocalizedString("fzJ-4d-REP.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter bank name
      ///
      /// Locales: da, en
      static func lfuYSUliPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lfu-YS-uli.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Lfu-YS-uli.placeholder"
        }

        return NSLocalizedString("Lfu-YS-uli.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter restaurant code
      ///
      /// Locales: da, en
      static func kd5KSWZtText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("KD5-KS-WZt.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "KD5-KS-WZt.text"
        }

        return NSLocalizedString("KD5-KS-WZt.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter restaurant code
      ///
      /// Locales: da, en
      static func psb7Jw1Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2PS-B7-Jw1.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2PS-B7-Jw1.placeholder"
        }

        return NSLocalizedString("2PS-B7-Jw1.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Enter your nets  account secret key
      ///
      /// Locales: da, en
      static func utBuViiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6UT-bu-Vii.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6UT-bu-Vii.text"
        }

        return NSLocalizedString("6UT-bu-Vii.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Extra Items
      ///
      /// Locales: da, en
      static func flMVRMaeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FlM-VR-mae.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "FlM-VR-mae.text"
        }

        return NSLocalizedString("FlM-VR-mae.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: da, en
      static func cteUGRy2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cte-UG-Ry2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "cte-UG-Ry2.text"
        }

        return NSLocalizedString("cte-UG-Ry2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: da, en
      static func sbhLyFPcPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sbh-Ly-FPc.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Sbh-Ly-FPc.placeholder"
        }

        return NSLocalizedString("Sbh-Ly-FPc.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: For continue you need to accept Terms and Conditions
      ///
      /// Locales: da, en
      static func eLCHvBZGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eLC-Hv-bZG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "eLC-Hv-bZG.text"
        }

        return NSLocalizedString("eLC-Hv-bZG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password?
      ///
      /// Locales: da, en
      static func l9yXEWIRNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("L9y-XE-wIR.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "L9y-XE-wIR.normalTitle"
        }

        return NSLocalizedString("L9y-XE-wIR.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Password?
      ///
      /// Locales: da, en
      static func yAcB9MchText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YAc-B9-mch.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YAc-B9-mch.text"
        }

        return NSLocalizedString("YAc-B9-mch.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Grand Earning:
      ///
      /// Locales: da, en
      static func ko06hPcNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ko0-6h-pcN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ko0-6h-pcN.text"
        }

        return NSLocalizedString("ko0-6h-pcN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Grand Earning:
      ///
      /// Locales: da, en
      static func vYSSC39Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1vY-SS-C39.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1vY-SS-C39.text"
        }

        return NSLocalizedString("1vY-SS-C39.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: ITEMS
      ///
      /// Locales: da, en
      static func d2aD7IcfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("d2a-D7-icf.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "d2a-D7-icf.text"
        }

        return NSLocalizedString("d2a-D7-icf.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: ITEMS
      ///
      /// Locales: da, en
      static func lJwEE5ARText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LJw-eE-5AR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "LJw-eE-5AR.text"
        }

        return NSLocalizedString("LJw-eE-5AR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: ITEMS
      ///
      /// Locales: da, en
      static func qvd3INhyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qvd-3I-Nhy.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qvd-3I-Nhy.text"
        }

        return NSLocalizedString("qvd-3I-Nhy.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Indore, Madhya Pradesh
      ///
      /// Locales: da, en
      static func awLTVELsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("awL-TV-ELs.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "awL-TV-ELs.text"
        }

        return NSLocalizedString("awL-TV-ELs.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Indore, Madhya Pradesh
      ///
      /// Locales: da, en
      static func uYb6vLQZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UYb-6v-LQZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UYb-6v-LQZ.text"
        }

        return NSLocalizedString("UYb-6v-LQZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Kr 90.0
      ///
      /// Locales: da, en
      static func bQKPhXKnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bQK-Ph-xKn.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bQK-Ph-xKn.text"
        }

        return NSLocalizedString("bQK-Ph-xKn.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: LOGIN
      ///
      /// Locales: da, en
      static func cKiOXKsZNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CKi-OX-ksZ.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CKi-OX-ksZ.normalTitle"
        }

        return NSLocalizedString("CKi-OX-ksZ.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: LOGIN
      ///
      /// Locales: da, en
      static func gj2HcHtXNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gj2-Hc-htX.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gj2-Hc-htX.normalTitle"
        }

        return NSLocalizedString("gj2-Hc-htX.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: da, en
      static func kfrR1HtkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kfr-r1-htk.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Kfr-r1-htk.text"
        }

        return NSLocalizedString("Kfr-r1-htk.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: da, en
      static func peFPYQWzText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PeF-pY-qWz.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PeF-pY-qWz.text"
        }

        return NSLocalizedString("PeF-pY-qWz.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: da, en
      static func iBrVasText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("83I-br-Vas.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "83I-br-Vas.text"
        }

        return NSLocalizedString("83I-br-Vas.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: da, en
      static func yOJNUMPrPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yOJ-nU-mPr.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yOJ-nU-mPr.placeholder"
        }

        return NSLocalizedString("yOJ-nU-mPr.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Lebenese kebab speciality
      ///
      /// Locales: da, en
      static func goTRSLcPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("goT-rS-LcP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "goT-rS-LcP.text"
        }

        return NSLocalizedString("goT-rS-LcP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Lebenese kebab speciality
      ///
      /// Locales: da, en
      static func qXN7Qj7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2qX-n7-qj7.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2qX-n7-qj7.text"
        }

        return NSLocalizedString("2qX-n7-qj7.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Load More
      ///
      /// Locales: da, en
      static func nbIXWXKxNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nbI-xW-XKx.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "nbI-xW-XKx.normalTitle"
        }

        return NSLocalizedString("nbI-xW-XKx.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Load More
      ///
      /// Locales: da, en
      static func rvgCeBYCNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rvg-ce-BYC.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Rvg-ce-BYC.normalTitle"
        }

        return NSLocalizedString("Rvg-ce-BYC.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: da, en
      static func cr50n6FJNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CR5-0n-6FJ.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CR5-0n-6FJ.normalTitle"
        }

        return NSLocalizedString("CR5-0n-6FJ.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: da, en
      static func paDFmMmgNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paD-fm-mmg.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "paD-fm-mmg.normalTitle"
        }

        return NSLocalizedString("paD-fm-mmg.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: da, en
      static func wGS84E6zNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wGS-84-E6z.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wGS-84-E6z.normalTitle"
        }

        return NSLocalizedString("wGS-84-E6z.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Menu
      ///
      /// Locales: da, en
      static func wqTHOG3bNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WqT-hO-G3b.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WqT-hO-G3b.normalTitle"
        }

        return NSLocalizedString("WqT-hO-G3b.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Name: 
      ///
      /// Locales: da, en
      static func ki7DCRukText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ki7-DC-Ruk.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ki7-DC-Ruk.text"
        }

        return NSLocalizedString("ki7-DC-Ruk.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: New Orders
      ///
      /// Locales: da, en
      static func y0FGx2AFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Y0F-gx-2AF.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Y0F-gx-2AF.text"
        }

        return NSLocalizedString("Y0F-gx-2AF.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: da, en
      static func tUJL5F6ePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tUJ-l5-F6e.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tUJ-l5-F6e.placeholder"
        }

        return NSLocalizedString("tUJ-l5-F6e.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: ORDER NOW
      ///
      /// Locales: da, en
      static func g7aTfVoyNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g7a-tf-Voy.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "g7a-tf-Voy.normalTitle"
        }

        return NSLocalizedString("g7a-tf-Voy.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Old Password
      ///
      /// Locales: da, en
      static func wdlQkLFYPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WDL-qk-LFY.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "WDL-qk-LFY.placeholder"
        }

        return NSLocalizedString("WDL-qk-LFY.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Online
      ///
      /// Locales: da, en
      static func erRLxDb7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("erR-lx-Db7.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "erR-lx-Db7.text"
        }

        return NSLocalizedString("erR-lx-Db7.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Open
      ///
      /// Locales: da, en
      static func meiaFoEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0ME-iA-foE.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0ME-iA-foE.text"
        }

        return NSLocalizedString("0ME-iA-foE.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Open
      ///
      /// Locales: da, en
      static func qLlI6TINText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qLl-I6-tIN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qLl-I6-tIN.text"
        }

        return NSLocalizedString("qLl-I6-tIN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Open Time
      ///
      /// Locales: da, en
      static func nyt34Qb9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nyt-34-Qb9.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Nyt-34-Qb9.text"
        }

        return NSLocalizedString("Nyt-34-Qb9.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Opent Orders
      ///
      /// Locales: da, en
      static func av6OuGe6NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("av6-Ou-Ge6.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "av6-Ou-Ge6.normalTitle"
        }

        return NSLocalizedString("av6-Ou-Ge6.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Optional
      ///
      /// Locales: da, en
      static func xBiHUPbkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xBi-hU-Pbk.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xBi-hU-Pbk.text"
        }

        return NSLocalizedString("xBi-hU-Pbk.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Order By:
      ///
      /// Locales: da, en
      static func hYnE2ERgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HYn-e2-eRg.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "HYn-e2-eRg.text"
        }

        return NSLocalizedString("HYn-e2-eRg.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Order Id: 0
      ///
      /// Locales: da, en
      static func ltjTfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("312-LT-JTf.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "312-LT-JTf.text"
        }

        return NSLocalizedString("312-LT-JTf.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Order Id: 1
      ///
      /// Locales: da, en
      static func fMPlWHvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7fM-pl-wHv.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "7fM-pl-wHv.text"
        }

        return NSLocalizedString("7fM-pl-wHv.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Order Id: 1
      ///
      /// Locales: da, en
      static func kms1fX4UText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Kms-1f-x4U.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Kms-1f-x4U.text"
        }

        return NSLocalizedString("Kms-1f-x4U.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Order Id: 1
      ///
      /// Locales: da, en
      static func mLvMrWZLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MLv-mr-WZL.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MLv-mr-WZL.text"
        }

        return NSLocalizedString("MLv-mr-WZL.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Order Id: 1
      ///
      /// Locales: da, en
      static func mrq9pSHDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MRQ-9p-SHD.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "MRQ-9p-SHD.text"
        }

        return NSLocalizedString("MRQ-9p-SHD.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Paid
      ///
      /// Locales: da, en
      static func izIHkGW2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IzI-Hk-GW2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "IzI-Hk-GW2.text"
        }

        return NSLocalizedString("IzI-Hk-GW2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: da, en
      static func fM7DlElSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fM7-dl-elS.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fM7-dl-elS.text"
        }

        return NSLocalizedString("fM7-dl-elS.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: da, en
      static func frdm74zVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FRD-m7-4zV.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "FRD-m7-4zV.text"
        }

        return NSLocalizedString("FRD-m7-4zV.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: da, en
      static func sWt3rYpfPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sWt-3r-ypf.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "sWt-3r-ypf.placeholder"
        }

        return NSLocalizedString("sWt-3r-ypf.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: da, en
      static func zUAA3JonPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zUA-A3-jon.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zUA-A3-jon.placeholder"
        }

        return NSLocalizedString("zUA-A3-jon.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Past Orders
      ///
      /// Locales: da, en
      static func f9vMXVfpNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f9v-mX-vfp.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "f9v-mX-vfp.normalTitle"
        }

        return NSLocalizedString("f9v-mX-vfp.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Past Orders
      ///
      /// Locales: da, en
      static func qkmSTEQUNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qkm-ST-eQU.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qkm-ST-eQU.normalTitle"
        }

        return NSLocalizedString("qkm-ST-eQU.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Past Orders
      ///
      /// Locales: da, en
      static func rC8HcNmkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rC8-Hc-Nmk.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rC8-Hc-Nmk.normalTitle"
        }

        return NSLocalizedString("rC8-Hc-Nmk.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Pay By
      ///
      /// Locales: da, en
      static func h2W5KMO9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("h2W-5K-MO9.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "h2W-5K-MO9.text"
        }

        return NSLocalizedString("h2W-5K-MO9.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Pay By
      ///
      /// Locales: da, en
      static func upuBDA2IText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Upu-bD-A2I.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Upu-bD-A2I.text"
        }

        return NSLocalizedString("Upu-bD-A2I.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Pay in shop
      ///
      /// Locales: da, en
      static func emCH9WdgNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EmC-H9-Wdg.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EmC-H9-Wdg.normalTitle"
        }

        return NSLocalizedString("EmC-H9-Wdg.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: da, en
      static func bqcnplb2Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BQC-nP-LB2.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BQC-nP-LB2.placeholder"
        }

        return NSLocalizedString("BQC-nP-LB2.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: da, en
      static func caNKA44Placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1Ca-nK-A44.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1Ca-nK-A44.placeholder"
        }

        return NSLocalizedString("1Ca-nK-A44.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: da, en
      static func yRR0LR6jPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yRR-0L-r6j.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "yRR-0L-r6j.placeholder"
        }

        return NSLocalizedString("yRR-0L-r6j.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: da, en
      static func zospeYpBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZOS-pE-ypB.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZOS-pE-ypB.text"
        }

        return NSLocalizedString("ZOS-pE-ypB.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number
      ///
      /// Locales: da, en
      static func gIBC3PlCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gIB-c3-plC.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "gIB-c3-plC.text"
        }

        return NSLocalizedString("gIB-c3-plC.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number
      ///
      /// Locales: da, en
      static func hZ3MwSPkPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hZ3-Mw-SPk.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hZ3-Mw-SPk.placeholder"
        }

        return NSLocalizedString("hZ3-Mw-SPk.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number
      ///
      /// Locales: da, en
      static func rZS89qOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6rZ-s8-9qO.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6rZ-s8-9qO.text"
        }

        return NSLocalizedString("6rZ-s8-9qO.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Phone NumberL 123456789
      ///
      /// Locales: da, en
      static func xemjzgoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4XE-MJ-zGO.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4XE-MJ-zGO.text"
        }

        return NSLocalizedString("4XE-MJ-zGO.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Phone: 
      ///
      /// Locales: da, en
      static func kLRJx1ihText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kLR-Jx-1ih.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "kLR-Jx-1ih.text"
        }

        return NSLocalizedString("kLR-Jx-1ih.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Pickup your self
      ///
      /// Locales: da, en
      static func ixvDkBz9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ixv-Dk-Bz9.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ixv-Dk-Bz9.normalTitle"
        }

        return NSLocalizedString("Ixv-Dk-Bz9.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Please select the language
      ///
      /// Locales: da, en
      static func tjif3G2vText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TJI-F3-g2v.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TJI-F3-g2v.text"
        }

        return NSLocalizedString("TJI-F3-g2v.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Print
      ///
      /// Locales: da, en
      static func ahxdfDnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0AH-XD-fDn.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0AH-XD-fDn.normalTitle"
        }

        return NSLocalizedString("0AH-XD-fDn.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Product Detail:
      ///
      /// Locales: da, en
      static func ok5uEZMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1OK-5u-eZM.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1OK-5u-eZM.text"
        }

        return NSLocalizedString("1OK-5u-eZM.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Product Detail:
      ///
      /// Locales: da, en
      static func rv4OkWerText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rv4-Ok-Wer.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Rv4-Ok-Wer.text"
        }

        return NSLocalizedString("Rv4-Ok-Wer.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Product Name:
      ///
      /// Locales: da, en
      static func cx0WOSP8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CX0-wO-sP8.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CX0-wO-sP8.text"
        }

        return NSLocalizedString("CX0-wO-sP8.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Product Name:
      ///
      /// Locales: da, en
      static func jn6TCHVYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jn6-tC-hVY.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Jn6-tC-hVY.text"
        }

        return NSLocalizedString("Jn6-tC-hVY.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Product Price:
      ///
      /// Locales: da, en
      static func eZeHy6IFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eZe-hy-6IF.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "eZe-hy-6IF.text"
        }

        return NSLocalizedString("eZe-hy-6IF.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Remaining 0 min 0 sec
      ///
      /// Locales: da, en
      static func hZlJkN1rText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HZl-Jk-N1r.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "HZl-Jk-N1r.text"
        }

        return NSLocalizedString("HZl-Jk-N1r.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Restaurant
      ///
      /// Locales: da, en
      static func rRe5i5ceNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rRe-5i-5ce.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rRe-5i-5ce.normalTitle"
        }

        return NSLocalizedString("rRe-5i-5ce.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Restaurant
      ///
      /// Locales: da, en
      static func xGdYMAmHNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xGd-yM-amH.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xGd-yM-amH.normalTitle"
        }

        return NSLocalizedString("xGd-yM-amH.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Restaurant Name
      ///
      /// Locales: da, en
      static func c9R9WQXqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("C9R-9W-qXq.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "C9R-9W-qXq.text"
        }

        return NSLocalizedString("C9R-9W-qXq.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Restaurant Name
      ///
      /// Locales: da, en
      static func e55FX1nKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("e55-FX-1nK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "e55-FX-1nK.text"
        }

        return NSLocalizedString("e55-FX-1nK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Reviews
      ///
      /// Locales: da, en
      static func ohuJ2YVGNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ohu-j2-yVG.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ohu-j2-yVG.normalTitle"
        }

        return NSLocalizedString("ohu-j2-yVG.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: SAR 0
      ///
      /// Locales: da, en
      static func cEqXbGQZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CEq-xb-gQZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CEq-xb-gQZ.text"
        }

        return NSLocalizedString("CEq-xb-gQZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: SAR 0.00
      ///
      /// Locales: da, en
      static func xThERYCoText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xTh-eR-yCo.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xTh-eR-yCo.text"
        }

        return NSLocalizedString("xTh-eR-yCo.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: SIGN UP
      ///
      /// Locales: da, en
      static func am93EAVBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Am9-3E-aVB.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Am9-3E-aVB.normalTitle"
        }

        return NSLocalizedString("Am9-3E-aVB.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: SIGN UP
      ///
      /// Locales: da, en
      static func wRzHbQnKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wRz-hb-QnK.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "wRz-hb-QnK.normalTitle"
        }

        return NSLocalizedString("wRz-hb-QnK.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: da, en
      static func oshtuHacNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OSH-tU-hac.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "OSH-tU-hac.normalTitle"
        }

        return NSLocalizedString("OSH-tU-hac.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: da, en
      static func paETdOcNNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paE-Td-ocN.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "paE-Td-ocN.normalTitle"
        }

        return NSLocalizedString("paE-Td-ocN.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Sayaji Kebab Villas
      ///
      /// Locales: da, en
      static func piN0LluText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5pi-n0-llu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5pi-n0-llu.text"
        }

        return NSLocalizedString("5pi-n0-llu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Sayaji Kebab Villas
      ///
      /// Locales: da, en
      static func q2PMHACNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Q2P-MH-aCN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Q2P-MH-aCN.text"
        }

        return NSLocalizedString("Q2P-MH-aCN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Search Location
      ///
      /// Locales: da, en
      static func cF6OmZmkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cF6-om-Zmk.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "cF6-om-Zmk.text"
        }

        return NSLocalizedString("cF6-om-Zmk.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Search food by category
      ///
      /// Locales: da, en
      static func vrsTcVV1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vrs-Tc-VV1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Vrs-Tc-VV1.text"
        }

        return NSLocalizedString("Vrs-Tc-VV1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Location
      ///
      /// Locales: da, en
      static func jXaJaVA6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jXa-Ja-vA6.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "jXa-Ja-vA6.text"
        }

        return NSLocalizedString("jXa-Ja-vA6.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Order Ready Time
      ///
      /// Locales: da, en
      static func qWBZNNqwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qWB-ZN-nqw.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qWB-ZN-nqw.text"
        }

        return NSLocalizedString("qWB-ZN-nqw.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Restaurant Location
      ///
      /// Locales: da, en
      static func xdpg1KQPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XDP-G1-KQP.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XDP-G1-KQP.text"
        }

        return NSLocalizedString("XDP-G1-KQP.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select Time
      ///
      /// Locales: da, en
      static func mpfEUE08Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mpf-eU-e08.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "mpf-eU-e08.text"
        }

        return NSLocalizedString("mpf-eU-e08.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select date and time for pre order(Optional)
      ///
      /// Locales: da, en
      static func vIDcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("243-1v-IDc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "243-1v-IDc.text"
        }

        return NSLocalizedString("243-1v-IDc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Select restaurant open and close time
      ///
      /// Locales: da, en
      static func sXoW0HqKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SXo-w0-hqK.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SXo-w0-hqK.text"
        }

        return NSLocalizedString("SXo-w0-hqK.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Send Request
      ///
      /// Locales: da, en
      static func nTwJsFHBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NTw-js-fHB.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NTw-js-fHB.normalTitle"
        }

        return NSLocalizedString("NTw-js-fHB.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Sign up as user to place an order
      ///
      /// Locales: da, en
      static func aBlGOV3FNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aBl-GO-v3F.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aBl-GO-v3F.normalTitle"
        }

        return NSLocalizedString("aBl-GO-v3F.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Sizes:
      ///
      /// Locales: da, en
      static func hNYZgSirText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hNY-zg-sir.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hNY-zg-sir.text"
        }

        return NSLocalizedString("hNY-zg-sir.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Sizes:
      ///
      /// Locales: da, en
      static func rQ31zTn8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rQ3-1z-Tn8.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rQ3-1z-Tn8.text"
        }

        return NSLocalizedString("rQ3-1z-Tn8.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Smith Jhones
      ///
      /// Locales: da, en
      static func qgKW8QZfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qgK-W8-QZf.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "qgK-W8-QZf.text"
        }

        return NSLocalizedString("qgK-W8-QZf.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Smith Jhones
      ///
      /// Locales: da, en
      static func uqyCvVXLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UQY-Cv-VXL.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UQY-Cv-VXL.text"
        }

        return NSLocalizedString("UQY-Cv-VXL.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: da, en
      static func iG70KOtsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iG7-0K-Ots.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iG7-0K-Ots.normalTitle"
        }

        return NSLocalizedString("iG7-0K-Ots.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: da, en
      static func oDe1N4fvNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ODe-1N-4fv.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ODe-1N-4fv.normalTitle"
        }

        return NSLocalizedString("ODe-1N-4fv.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: da, en
      static func ut4HPDkDNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ut4-HP-DkD.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Ut4-HP-DkD.normalTitle"
        }

        return NSLocalizedString("Ut4-HP-DkD.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Submit Order
      ///
      /// Locales: da, en
      static func xVhXnGQGNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XVh-Xn-GQG.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "XVh-Xn-GQG.normalTitle"
        }

        return NSLocalizedString("XVh-Xn-GQG.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Subtotal
      ///
      /// Locales: da, en
      static func fR2XKI3fText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fR2-xK-I3f.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fR2-xK-I3f.text"
        }

        return NSLocalizedString("fR2-xK-I3f.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Subtotal
      ///
      /// Locales: da, en
      static func ngI4VLiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6ng-i4-VLi.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "6ng-i4-VLi.text"
        }

        return NSLocalizedString("6ng-i4-VLi.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Subtotal
      ///
      /// Locales: da, en
      static func rzxJlERxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RZX-Jl-eRx.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "RZX-Jl-eRx.text"
        }

        return NSLocalizedString("RZX-Jl-eRx.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Subtotal
      ///
      /// Locales: da, en
      static func urgO5HXyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("urg-O5-HXy.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "urg-O5-HXy.text"
        }

        return NSLocalizedString("urg-O5-HXy.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Tax Number
      ///
      /// Locales: da, en
      static func q500fOjjText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Q50-0f-ojj.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Q50-0f-ojj.text"
        }

        return NSLocalizedString("Q50-0f-ojj.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Tax Number CVR 123456789
      ///
      /// Locales: da, en
      static func re67D555Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Re6-7D-555.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Re6-7D-555.text"
        }

        return NSLocalizedString("Re6-7D-555.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Test Item
      ///
      /// Locales: da, en
      static func fFAf3bGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3fF-af-3bG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "3fF-af-3bG.text"
        }

        return NSLocalizedString("3fF-af-3bG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Test Item
      ///
      /// Locales: da, en
      static func l2zRF9W7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("l2z-rF-9W7.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "l2z-rF-9W7.text"
        }

        return NSLocalizedString("l2z-rF-9W7.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Test Item
      ///
      /// Locales: da, en
      static func q29YbYADText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("q29-Yb-yAD.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "q29-Yb-yAD.text"
        }

        return NSLocalizedString("q29-Yb-yAD.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Test Item
      ///
      /// Locales: da, en
      static func uYz7ZKGOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UYz-7Z-kGO.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UYz-7Z-kGO.text"
        }

        return NSLocalizedString("UYz-7Z-kGO.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Thank you
      ///
      /// Locales: da, en
      static func cXQVN1NfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cXQ-VN-1Nf.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "cXQ-VN-1Nf.text"
        }

        return NSLocalizedString("cXQ-VN-1Nf.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: This Month Earning
      ///
      /// Locales: da, en
      static func hcyS5XDnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hcy-s5-xDn.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Hcy-s5-xDn.text"
        }

        return NSLocalizedString("Hcy-s5-xDn.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: This Year Earning
      ///
      /// Locales: da, en
      static func t4GAH9WxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("T4G-aH-9Wx.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "T4G-aH-9Wx.text"
        }

        return NSLocalizedString("T4G-aH-9Wx.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: This restaurant currently, not provide delivery option, So order only if you pickup from restaurant.
      ///
      /// Locales: da, en
      static func efTUGyuText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2ef-TU-gyu.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "2ef-TU-gyu.text"
        }

        return NSLocalizedString("2ef-TU-gyu.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: This week Earning
      ///
      /// Locales: da, en
      static func ym09352lText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YM0-93-52l.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "YM0-93-52l.text"
        }

        return NSLocalizedString("YM0-93-52l.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Time
      ///
      /// Locales: da, en
      static func ta7A2BeQNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ta7-a2-beQ.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ta7-a2-beQ.normalTitle"
        }

        return NSLocalizedString("ta7-a2-beQ.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Today Earning
      ///
      /// Locales: da, en
      static func pgW8dUjgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PgW-8d-Ujg.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "PgW-8d-Ujg.text"
        }

        return NSLocalizedString("PgW-8d-Ujg.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static func bfFAjIshText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BfF-Aj-ish.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "BfF-Aj-ish.text"
        }

        return NSLocalizedString("BfF-Aj-ish.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static func epv1bBLaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Epv-1b-bLa.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Epv-1b-bLa.text"
        }

        return NSLocalizedString("Epv-1b-bLa.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static func fFlXqGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("99f-fl-XqG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "99f-fl-XqG.text"
        }

        return NSLocalizedString("99f-fl-XqG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static func iXSZeDSFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iXS-ze-DSF.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "iXS-ze-DSF.text"
        }

        return NSLocalizedString("iXS-ze-DSF.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static func mneHNYhVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mne-hN-YhV.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Mne-hN-YhV.text"
        }

        return NSLocalizedString("Mne-hN-YhV.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static func sVTBAjwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8sV-TB-ajw.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8sV-TB-ajw.text"
        }

        return NSLocalizedString("8sV-TB-ajw.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Amount
      ///
      /// Locales: da, en
      static func zhhGaCCRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zhh-ga-cCR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Zhh-ga-cCR.text"
        }

        return NSLocalizedString("Zhh-ga-cCR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Amount (Incl. VAT)
      ///
      /// Locales: da, en
      static func zGaT6AFZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zGa-t6-aFZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zGa-t6-aFZ.text"
        }

        return NSLocalizedString("zGa-t6-aFZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Amount (Incl. Vat)
      ///
      /// Locales: da, en
      static func t5PG5I9cText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("T5P-g5-i9c.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "T5P-g5-i9c.text"
        }

        return NSLocalizedString("T5P-g5-i9c.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Cart
      ///
      /// Locales: da, en
      static func abXLhA5pText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AbX-Lh-A5p.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "AbX-Lh-A5p.text"
        }

        return NSLocalizedString("AbX-Lh-A5p.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Cart
      ///
      /// Locales: da, en
      static func chL2LbIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4ch-L2-lbI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4ch-L2-lbI.text"
        }

        return NSLocalizedString("4ch-L2-lbI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Cart
      ///
      /// Locales: da, en
      static func h2f14VzQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("H2f-14-vzQ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "H2f-14-vzQ.text"
        }

        return NSLocalizedString("H2f-14-vzQ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Cart
      ///
      /// Locales: da, en
      static func tXpWsKCYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tXp-Ws-kCY.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "tXp-Ws-kCY.text"
        }

        return NSLocalizedString("tXp-Ws-kCY.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Total Cart
      ///
      /// Locales: da, en
      static func vP6RyGChText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vP6-Ry-gCh.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vP6-Ry-gCh.text"
        }

        return NSLocalizedString("vP6-Ry-gCh.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: UPDATE RESTAURANT
      ///
      /// Locales: da, en
      static func qJ1UQd2NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1qJ-1U-qd2.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "1qJ-1U-qd2.normalTitle"
        }

        return NSLocalizedString("1qJ-1U-qd2.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: User
      ///
      /// Locales: da, en
      static func eFe08WIoNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EFe-08-wIo.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "EFe-08-wIo.normalTitle"
        }

        return NSLocalizedString("EFe-08-wIo.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: User
      ///
      /// Locales: da, en
      static func r1jHMCMPNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("R1j-hM-cMP.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "R1j-hM-cMP.normalTitle"
        }

        return NSLocalizedString("R1j-hM-cMP.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: User (Customer Information)
      ///
      /// Locales: da, en
      static func g7QJIQwZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("g7Q-jI-QwZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "g7Q-jI-QwZ.text"
        }

        return NSLocalizedString("g7Q-jI-QwZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: User Name
      ///
      /// Locales: da, en
      static func cChEzPEBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCh-ez-PEB.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "CCh-ez-PEB.text"
        }

        return NSLocalizedString("CCh-ez-PEB.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: User Name
      ///
      /// Locales: da, en
      static func dgRKWKHPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8dg-rK-wKH.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8dg-rK-wKH.placeholder"
        }

        return NSLocalizedString("8dg-rK-wKH.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: User Name
      ///
      /// Locales: da, en
      static func dueCiRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("40D-UE-CiR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "40D-UE-CiR.text"
        }

        return NSLocalizedString("40D-UE-CiR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: User Name
      ///
      /// Locales: da, en
      static func ous0VEe2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OUS-0V-Ee2.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "OUS-0V-Ee2.text"
        }

        return NSLocalizedString("OUS-0V-Ee2.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: User Name
      ///
      /// Locales: da, en
      static func x7XUhPDrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("X7X-Uh-pDr.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "X7X-Uh-pDr.text"
        }

        return NSLocalizedString("X7X-Uh-pDr.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Waiting for driver
      ///
      /// Locales: da, en
      static func eeZ0lGuXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eeZ-0l-GuX.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "eeZ-0l-GuX.text"
        }

        return NSLocalizedString("eeZ-0l-GuX.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Waiting for driver
      ///
      /// Locales: da, en
      static func sYiB16LaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SYi-b1-6La.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "SYi-b1-6La.text"
        }

        return NSLocalizedString("SYi-b1-6La.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Wallet Balance
      ///
      /// Locales: da, en
      static func j8nOqYTOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("j8n-Oq-YTO.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "j8n-Oq-YTO.text"
        }

        return NSLocalizedString("j8n-Oq-YTO.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: We will provide you good service and want you will come back again.
      ///
      /// Locales: da, en
      static func gTCaBztText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8gT-Ca-Bzt.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "8gT-Ca-Bzt.text"
        }

        return NSLocalizedString("8gT-Ca-Bzt.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Withdraw Wallet Amount
      ///
      /// Locales: da, en
      static func z3gMOGKXNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Z3g-MO-GKX.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Z3g-MO-GKX.normalTitle"
        }

        return NSLocalizedString("Z3g-MO-GKX.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Write something about your restaurant
      ///
      /// Locales: da, en
      static func utkSoHmNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UTK-so-HmN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "UTK-so-HmN.text"
        }

        return NSLocalizedString("UTK-so-HmN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: X
      ///
      /// Locales: da, en
      static func eqcLoGOVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Eqc-Lo-GOV.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Eqc-Lo-GOV.normalTitle"
        }

        return NSLocalizedString("Eqc-Lo-GOV.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum
      ///
      /// Locales: da, en
      static func aiKGOZApText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AiK-GO-zAp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "AiK-GO-zAp.text"
        }

        return NSLocalizedString("AiK-GO-zAp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum
      ///
      /// Locales: da, en
      static func cJy42EaIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cJy-42-eaI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "cJy-42-eaI.text"
        }

        return NSLocalizedString("cJy-42-eaI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum
      ///
      /// Locales: da, en
      static func ds5Zf9vxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DS5-Zf-9vx.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DS5-Zf-9vx.text"
        }

        return NSLocalizedString("DS5-Zf-9vx.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: da, en
      static func dda37QtVText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DDA-37-qtV.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "DDA-37-qtV.text"
        }

        return NSLocalizedString("DDA-37-qtV.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: da, en
      static func f4dOjA7bText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("F4d-Oj-A7b.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "F4d-Oj-A7b.text"
        }

        return NSLocalizedString("F4d-Oj-A7b.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: da, en
      static func jgJ45K1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0jg-J4-5K1.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "0jg-J4-5K1.text"
        }

        return NSLocalizedString("0jg-J4-5K1.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: da, en
      static func jmS7ROfcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JmS-7R-ofc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JmS-7R-ofc.text"
        }

        return NSLocalizedString("JmS-7R-ofc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: da, en
      static func tJhGSUsYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TJh-gS-UsY.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "TJh-gS-UsY.text"
        }

        return NSLocalizedString("TJh-gS-UsY.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.orderCell` struct is generated, and contains static references to 11 localization keys.
    struct orderCell {
      /// en translation: $10
      ///
      /// Locales: en, da
      static let ddvRnX6TText = Rswift.StringResource(key: "ddv-Rn-X6T.text", tableName: "OrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 1 x Capri, 2 x Salad
      ///
      /// Locales: en, da
      static let uffMPCwlText = Rswift.StringResource(key: "uff-mP-cwl.text", tableName: "OrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 2021-04-20 07:08:15
      ///
      /// Locales: en, da
      static let r2YRf1ltText = Rswift.StringResource(key: "R2Y-rf-1lt.text", tableName: "OrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: ITEMS
      ///
      /// Locales: en, da
      static let bGwIYKHhText = Rswift.StringResource(key: "bGw-iY-kHh.text", tableName: "OrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: ORDERED ON
      ///
      /// Locales: en, da
      static let lwYEf2bBText = Rswift.StringResource(key: "lwY-Ef-2bB.text", tableName: "OrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Order Id: 1
      ///
      /// Locales: en, da
      static let goVRa3uxText = Rswift.StringResource(key: "GoV-Ra-3ux.text", tableName: "OrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Pending
      ///
      /// Locales: en, da
      static let avRY3JnGText = Rswift.StringResource(key: "AvR-Y3-jnG.text", tableName: "OrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Reorder
      ///
      /// Locales: en, da
      static let q8XE5IK4NormalTitle = Rswift.StringResource(key: "q8X-e5-IK4.normalTitle", tableName: "OrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Test Item
      ///
      /// Locales: en, da
      static let a8KOVEGLText = Rswift.StringResource(key: "A8K-OV-eGL.text", tableName: "OrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Track Order
      ///
      /// Locales: en, da
      static let kAPJM36cNormalTitle = Rswift.StringResource(key: "kAP-jM-36c.normalTitle", tableName: "OrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: en, da
      static let iOpWdIyeText = Rswift.StringResource(key: "iOp-wd-iye.text", tableName: "OrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)

      /// en translation: $10
      ///
      /// Locales: en, da
      static func ddvRnX6TText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ddv-Rn-X6T.text", tableName: "OrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderCell", preferredLanguages: preferredLanguages) else {
          return "ddv-Rn-X6T.text"
        }

        return NSLocalizedString("ddv-Rn-X6T.text", tableName: "OrderCell", bundle: bundle, comment: "")
      }

      /// en translation: 1 x Capri, 2 x Salad
      ///
      /// Locales: en, da
      static func uffMPCwlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uff-mP-cwl.text", tableName: "OrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderCell", preferredLanguages: preferredLanguages) else {
          return "uff-mP-cwl.text"
        }

        return NSLocalizedString("uff-mP-cwl.text", tableName: "OrderCell", bundle: bundle, comment: "")
      }

      /// en translation: 2021-04-20 07:08:15
      ///
      /// Locales: en, da
      static func r2YRf1ltText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("R2Y-rf-1lt.text", tableName: "OrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderCell", preferredLanguages: preferredLanguages) else {
          return "R2Y-rf-1lt.text"
        }

        return NSLocalizedString("R2Y-rf-1lt.text", tableName: "OrderCell", bundle: bundle, comment: "")
      }

      /// en translation: ITEMS
      ///
      /// Locales: en, da
      static func bGwIYKHhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bGw-iY-kHh.text", tableName: "OrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderCell", preferredLanguages: preferredLanguages) else {
          return "bGw-iY-kHh.text"
        }

        return NSLocalizedString("bGw-iY-kHh.text", tableName: "OrderCell", bundle: bundle, comment: "")
      }

      /// en translation: ORDERED ON
      ///
      /// Locales: en, da
      static func lwYEf2bBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lwY-Ef-2bB.text", tableName: "OrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderCell", preferredLanguages: preferredLanguages) else {
          return "lwY-Ef-2bB.text"
        }

        return NSLocalizedString("lwY-Ef-2bB.text", tableName: "OrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Order Id: 1
      ///
      /// Locales: en, da
      static func goVRa3uxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GoV-Ra-3ux.text", tableName: "OrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderCell", preferredLanguages: preferredLanguages) else {
          return "GoV-Ra-3ux.text"
        }

        return NSLocalizedString("GoV-Ra-3ux.text", tableName: "OrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Pending
      ///
      /// Locales: en, da
      static func avRY3JnGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AvR-Y3-jnG.text", tableName: "OrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderCell", preferredLanguages: preferredLanguages) else {
          return "AvR-Y3-jnG.text"
        }

        return NSLocalizedString("AvR-Y3-jnG.text", tableName: "OrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Reorder
      ///
      /// Locales: en, da
      static func q8XE5IK4NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("q8X-e5-IK4.normalTitle", tableName: "OrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderCell", preferredLanguages: preferredLanguages) else {
          return "q8X-e5-IK4.normalTitle"
        }

        return NSLocalizedString("q8X-e5-IK4.normalTitle", tableName: "OrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Test Item
      ///
      /// Locales: en, da
      static func a8KOVEGLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("A8K-OV-eGL.text", tableName: "OrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderCell", preferredLanguages: preferredLanguages) else {
          return "A8K-OV-eGL.text"
        }

        return NSLocalizedString("A8K-OV-eGL.text", tableName: "OrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Track Order
      ///
      /// Locales: en, da
      static func kAPJM36cNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kAP-jM-36c.normalTitle", tableName: "OrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderCell", preferredLanguages: preferredLanguages) else {
          return "kAP-jM-36c.normalTitle"
        }

        return NSLocalizedString("kAP-jM-36c.normalTitle", tableName: "OrderCell", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: en, da
      static func iOpWdIyeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("iOp-wd-iye.text", tableName: "OrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrderCell", preferredLanguages: preferredLanguages) else {
          return "iOp-wd-iye.text"
        }

        return NSLocalizedString("iOp-wd-iye.text", tableName: "OrderCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.productMenuCell` struct is generated, and contains static references to 4 localization keys.
    struct productMenuCell {
      /// en translation: $100
      ///
      /// Locales: en, da
      static let mn2EyEsfText = Rswift.StringResource(key: "MN2-Ey-Esf.text", tableName: "ProductMenuCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: ADD
      ///
      /// Locales: en, da
      static let jnUfKV2NormalTitle = Rswift.StringResource(key: "6Jn-Uf-kV2.normalTitle", tableName: "ProductMenuCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Lebenese kebab speciality
      ///
      /// Locales: en, da
      static let h12QoDohText = Rswift.StringResource(key: "H12-qo-doh.text", tableName: "ProductMenuCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Sayaji Kebab Villas
      ///
      /// Locales: en, da
      static let wp7R68NrText = Rswift.StringResource(key: "wp7-r6-8Nr.text", tableName: "ProductMenuCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)

      /// en translation: $100
      ///
      /// Locales: en, da
      static func mn2EyEsfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MN2-Ey-Esf.text", tableName: "ProductMenuCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductMenuCell", preferredLanguages: preferredLanguages) else {
          return "MN2-Ey-Esf.text"
        }

        return NSLocalizedString("MN2-Ey-Esf.text", tableName: "ProductMenuCell", bundle: bundle, comment: "")
      }

      /// en translation: ADD
      ///
      /// Locales: en, da
      static func jnUfKV2NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6Jn-Uf-kV2.normalTitle", tableName: "ProductMenuCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductMenuCell", preferredLanguages: preferredLanguages) else {
          return "6Jn-Uf-kV2.normalTitle"
        }

        return NSLocalizedString("6Jn-Uf-kV2.normalTitle", tableName: "ProductMenuCell", bundle: bundle, comment: "")
      }

      /// en translation: Lebenese kebab speciality
      ///
      /// Locales: en, da
      static func h12QoDohText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("H12-qo-doh.text", tableName: "ProductMenuCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductMenuCell", preferredLanguages: preferredLanguages) else {
          return "H12-qo-doh.text"
        }

        return NSLocalizedString("H12-qo-doh.text", tableName: "ProductMenuCell", bundle: bundle, comment: "")
      }

      /// en translation: Sayaji Kebab Villas
      ///
      /// Locales: en, da
      static func wp7R68NrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wp7-r6-8Nr.text", tableName: "ProductMenuCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductMenuCell", preferredLanguages: preferredLanguages) else {
          return "wp7-r6-8Nr.text"
        }

        return NSLocalizedString("wp7-r6-8Nr.text", tableName: "ProductMenuCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.productTblCell` struct is generated, and contains static references to 4 localization keys.
    struct productTblCell {
      /// en translation: $100
      ///
      /// Locales: en, da
      static let vRzOeQwyText = Rswift.StringResource(key: "VRz-Oe-Qwy.text", tableName: "ProductTblCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: ADD
      ///
      /// Locales: en, da
      static let hvp5wCQpNormalTitle = Rswift.StringResource(key: "Hvp-5w-cQp.normalTitle", tableName: "ProductTblCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Test Item
      ///
      /// Locales: en, da
      static let hxv1y6EdText = Rswift.StringResource(key: "HXV-1y-6Ed.text", tableName: "ProductTblCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Test Item
      ///
      /// Locales: en, da
      static let ibEBeC2OText = Rswift.StringResource(key: "IbE-Be-c2O.text", tableName: "ProductTblCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)

      /// en translation: $100
      ///
      /// Locales: en, da
      static func vRzOeQwyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VRz-Oe-Qwy.text", tableName: "ProductTblCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductTblCell", preferredLanguages: preferredLanguages) else {
          return "VRz-Oe-Qwy.text"
        }

        return NSLocalizedString("VRz-Oe-Qwy.text", tableName: "ProductTblCell", bundle: bundle, comment: "")
      }

      /// en translation: ADD
      ///
      /// Locales: en, da
      static func hvp5wCQpNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hvp-5w-cQp.normalTitle", tableName: "ProductTblCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductTblCell", preferredLanguages: preferredLanguages) else {
          return "Hvp-5w-cQp.normalTitle"
        }

        return NSLocalizedString("Hvp-5w-cQp.normalTitle", tableName: "ProductTblCell", bundle: bundle, comment: "")
      }

      /// en translation: Test Item
      ///
      /// Locales: en, da
      static func hxv1y6EdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HXV-1y-6Ed.text", tableName: "ProductTblCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductTblCell", preferredLanguages: preferredLanguages) else {
          return "HXV-1y-6Ed.text"
        }

        return NSLocalizedString("HXV-1y-6Ed.text", tableName: "ProductTblCell", bundle: bundle, comment: "")
      }

      /// en translation: Test Item
      ///
      /// Locales: en, da
      static func ibEBeC2OText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IbE-Be-c2O.text", tableName: "ProductTblCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductTblCell", preferredLanguages: preferredLanguages) else {
          return "IbE-Be-c2O.text"
        }

        return NSLocalizedString("IbE-Be-c2O.text", tableName: "ProductTblCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.resOpenOrderCell` struct is generated, and contains static references to 22 localization keys.
    struct resOpenOrderCell {
      /// en translation: $10
      ///
      /// Locales: en, da
      static let wjuZRBhQText = Rswift.StringResource(key: "wju-ZR-bhQ.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 0.00 Kr
      ///
      /// Locales: en, da
      static let aqlIi9OaText = Rswift.StringResource(key: "AQL-Ii-9Oa.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 0.00 Kr
      ///
      /// Locales: en, da
      static let dNBZd6plText = Rswift.StringResource(key: "dNB-Zd-6pl.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 0.00 Kr
      ///
      /// Locales: en, da
      static let iihowp4tText = Rswift.StringResource(key: "IIH-oW-P4t.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 0.00 Kr
      ///
      /// Locales: en, da
      static let yAiCsPOtText = Rswift.StringResource(key: "yAi-Cs-POt.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Assigned Driver
      ///
      /// Locales: en, da
      static let mqGSeJDcNormalTitle = Rswift.StringResource(key: "mqG-Se-jDc.normalTitle", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Call Driver
      ///
      /// Locales: en, da
      static let aRp5zSjsNormalTitle = Rswift.StringResource(key: "aRp-5z-Sjs.normalTitle", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Cancel Order
      ///
      /// Locales: en, da
      static let sBp5K9RpNormalTitle = Rswift.StringResource(key: "sBp-5K-9Rp.normalTitle", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Delivery Fee
      ///
      /// Locales: en, da
      static let i3tVPBCEText = Rswift.StringResource(key: "I3t-VP-bCE.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Discount
      ///
      /// Locales: en, da
      static let s6LSxZaGText = Rswift.StringResource(key: "S6L-Sx-ZaG.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: ITEMS
      ///
      /// Locales: en, da
      static let juhWqR4GText = Rswift.StringResource(key: "Juh-Wq-R4G.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Item not available
      ///
      /// Locales: en, da
      static let i3DvBqZNormalTitle = Rswift.StringResource(key: "8I3-Dv-bqZ.normalTitle", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Notify Ready
      ///
      /// Locales: en, da
      static let eRGF9PTkNormalTitle = Rswift.StringResource(key: "eRG-F9-PTk.normalTitle", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Order Id: 1
      ///
      /// Locales: en, da
      static let dxdVAImvText = Rswift.StringResource(key: "dxd-vA-imv.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Preparing
      ///
      /// Locales: en, da
      static let wZwRdZsaText = Rswift.StringResource(key: "WZw-Rd-zsa.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Print
      ///
      /// Locales: en, da
      static let drzHGGojNormalTitle = Rswift.StringResource(key: "drz-HG-Goj.normalTitle", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Subtotal
      ///
      /// Locales: en, da
      static let wSo695ABText = Rswift.StringResource(key: "wSo-69-5AB.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Take Order
      ///
      /// Locales: en, da
      static let xLeZ1SsENormalTitle = Rswift.StringResource(key: "xLe-z1-SsE.normalTitle", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Test Item
      ///
      /// Locales: en, da
      static let nTlYlRRrText = Rswift.StringResource(key: "NTl-yl-rRr.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Test Item
      ///
      /// Locales: en, da
      static let tile20ccText = Rswift.StringResource(key: "TIL-e2-0cc.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, da
      static let n67LcRnUText = Rswift.StringResource(key: "N67-Lc-RnU.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: en, da
      static let hjlGmOvPText = Rswift.StringResource(key: "hjl-Gm-OvP.text", tableName: "ResOpenOrderCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)

      /// en translation: $10
      ///
      /// Locales: en, da
      static func wjuZRBhQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wju-ZR-bhQ.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "wju-ZR-bhQ.text"
        }

        return NSLocalizedString("wju-ZR-bhQ.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: 0.00 Kr
      ///
      /// Locales: en, da
      static func aqlIi9OaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AQL-Ii-9Oa.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "AQL-Ii-9Oa.text"
        }

        return NSLocalizedString("AQL-Ii-9Oa.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: 0.00 Kr
      ///
      /// Locales: en, da
      static func dNBZd6plText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dNB-Zd-6pl.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "dNB-Zd-6pl.text"
        }

        return NSLocalizedString("dNB-Zd-6pl.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: 0.00 Kr
      ///
      /// Locales: en, da
      static func iihowp4tText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IIH-oW-P4t.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "IIH-oW-P4t.text"
        }

        return NSLocalizedString("IIH-oW-P4t.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: 0.00 Kr
      ///
      /// Locales: en, da
      static func yAiCsPOtText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yAi-Cs-POt.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "yAi-Cs-POt.text"
        }

        return NSLocalizedString("yAi-Cs-POt.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Assigned Driver
      ///
      /// Locales: en, da
      static func mqGSeJDcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mqG-Se-jDc.normalTitle", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "mqG-Se-jDc.normalTitle"
        }

        return NSLocalizedString("mqG-Se-jDc.normalTitle", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Call Driver
      ///
      /// Locales: en, da
      static func aRp5zSjsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aRp-5z-Sjs.normalTitle", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "aRp-5z-Sjs.normalTitle"
        }

        return NSLocalizedString("aRp-5z-Sjs.normalTitle", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Cancel Order
      ///
      /// Locales: en, da
      static func sBp5K9RpNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sBp-5K-9Rp.normalTitle", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "sBp-5K-9Rp.normalTitle"
        }

        return NSLocalizedString("sBp-5K-9Rp.normalTitle", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Fee
      ///
      /// Locales: en, da
      static func i3tVPBCEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I3t-VP-bCE.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "I3t-VP-bCE.text"
        }

        return NSLocalizedString("I3t-VP-bCE.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Discount
      ///
      /// Locales: en, da
      static func s6LSxZaGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("S6L-Sx-ZaG.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "S6L-Sx-ZaG.text"
        }

        return NSLocalizedString("S6L-Sx-ZaG.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: ITEMS
      ///
      /// Locales: en, da
      static func juhWqR4GText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Juh-Wq-R4G.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "Juh-Wq-R4G.text"
        }

        return NSLocalizedString("Juh-Wq-R4G.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Item not available
      ///
      /// Locales: en, da
      static func i3DvBqZNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8I3-Dv-bqZ.normalTitle", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "8I3-Dv-bqZ.normalTitle"
        }

        return NSLocalizedString("8I3-Dv-bqZ.normalTitle", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Notify Ready
      ///
      /// Locales: en, da
      static func eRGF9PTkNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eRG-F9-PTk.normalTitle", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "eRG-F9-PTk.normalTitle"
        }

        return NSLocalizedString("eRG-F9-PTk.normalTitle", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Order Id: 1
      ///
      /// Locales: en, da
      static func dxdVAImvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dxd-vA-imv.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "dxd-vA-imv.text"
        }

        return NSLocalizedString("dxd-vA-imv.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Preparing
      ///
      /// Locales: en, da
      static func wZwRdZsaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WZw-Rd-zsa.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "WZw-Rd-zsa.text"
        }

        return NSLocalizedString("WZw-Rd-zsa.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Print
      ///
      /// Locales: en, da
      static func drzHGGojNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drz-HG-Goj.normalTitle", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "drz-HG-Goj.normalTitle"
        }

        return NSLocalizedString("drz-HG-Goj.normalTitle", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Subtotal
      ///
      /// Locales: en, da
      static func wSo695ABText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wSo-69-5AB.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "wSo-69-5AB.text"
        }

        return NSLocalizedString("wSo-69-5AB.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Take Order
      ///
      /// Locales: en, da
      static func xLeZ1SsENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xLe-z1-SsE.normalTitle", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "xLe-z1-SsE.normalTitle"
        }

        return NSLocalizedString("xLe-z1-SsE.normalTitle", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Test Item
      ///
      /// Locales: en, da
      static func nTlYlRRrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NTl-yl-rRr.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "NTl-yl-rRr.text"
        }

        return NSLocalizedString("NTl-yl-rRr.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Test Item
      ///
      /// Locales: en, da
      static func tile20ccText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TIL-e2-0cc.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "TIL-e2-0cc.text"
        }

        return NSLocalizedString("TIL-e2-0cc.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, da
      static func n67LcRnUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("N67-Lc-RnU.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "N67-Lc-RnU.text"
        }

        return NSLocalizedString("N67-Lc-RnU.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      /// en translation: lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum lorem ipsum
      ///
      /// Locales: en, da
      static func hjlGmOvPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hjl-Gm-OvP.text", tableName: "ResOpenOrderCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ResOpenOrderCell", preferredLanguages: preferredLanguages) else {
          return "hjl-Gm-OvP.text"
        }

        return NSLocalizedString("hjl-Gm-OvP.text", tableName: "ResOpenOrderCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.restUpdProfileCell` struct is generated, and contains static references to 4 localization keys.
    struct restUpdProfileCell {
      /// en translation: 00:00
      ///
      /// Locales: en, da
      static let m9YAvNt7NormalTitle = Rswift.StringResource(key: "m9Y-av-nt7.normalTitle", tableName: "RestUpdProfileCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: 10:00
      ///
      /// Locales: en, da
      static let rv8WSOZZNormalTitle = Rswift.StringResource(key: "rv8-WS-oZZ.normalTitle", tableName: "RestUpdProfileCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Monday
      ///
      /// Locales: en, da
      static let nQR6vZ5uText = Rswift.StringResource(key: "nQR-6v-z5u.text", tableName: "RestUpdProfileCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: OPEN
      ///
      /// Locales: en, da
      static let yjM5tNMWNormalTitle = Rswift.StringResource(key: "yjM-5t-NMW.normalTitle", tableName: "RestUpdProfileCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)

      /// en translation: 00:00
      ///
      /// Locales: en, da
      static func m9YAvNt7NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("m9Y-av-nt7.normalTitle", tableName: "RestUpdProfileCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RestUpdProfileCell", preferredLanguages: preferredLanguages) else {
          return "m9Y-av-nt7.normalTitle"
        }

        return NSLocalizedString("m9Y-av-nt7.normalTitle", tableName: "RestUpdProfileCell", bundle: bundle, comment: "")
      }

      /// en translation: 10:00
      ///
      /// Locales: en, da
      static func rv8WSOZZNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rv8-WS-oZZ.normalTitle", tableName: "RestUpdProfileCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RestUpdProfileCell", preferredLanguages: preferredLanguages) else {
          return "rv8-WS-oZZ.normalTitle"
        }

        return NSLocalizedString("rv8-WS-oZZ.normalTitle", tableName: "RestUpdProfileCell", bundle: bundle, comment: "")
      }

      /// en translation: Monday
      ///
      /// Locales: en, da
      static func nQR6vZ5uText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nQR-6v-z5u.text", tableName: "RestUpdProfileCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RestUpdProfileCell", preferredLanguages: preferredLanguages) else {
          return "nQR-6v-z5u.text"
        }

        return NSLocalizedString("nQR-6v-z5u.text", tableName: "RestUpdProfileCell", bundle: bundle, comment: "")
      }

      /// en translation: OPEN
      ///
      /// Locales: en, da
      static func yjM5tNMWNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yjM-5t-NMW.normalTitle", tableName: "RestUpdProfileCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RestUpdProfileCell", preferredLanguages: preferredLanguages) else {
          return "yjM-5t-NMW.normalTitle"
        }

        return NSLocalizedString("yjM-5t-NMW.normalTitle", tableName: "RestUpdProfileCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.topRatedCell` struct is generated, and contains static references to 2 localization keys.
    struct topRatedCell {
      /// en translation: Browse Menu
      ///
      /// Locales: en, da
      static let vhgrKhUText = Rswift.StringResource(key: "5VH-GR-KhU.text", tableName: "TopRatedCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)
      /// en translation: Open
      ///
      /// Locales: en, da
      static let w4qV4OgdText = Rswift.StringResource(key: "w4q-v4-Ogd.text", tableName: "TopRatedCell", bundle: R.hostingBundle, locales: ["en", "da"], comment: nil)

      /// en translation: Browse Menu
      ///
      /// Locales: en, da
      static func vhgrKhUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5VH-GR-KhU.text", tableName: "TopRatedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TopRatedCell", preferredLanguages: preferredLanguages) else {
          return "5VH-GR-KhU.text"
        }

        return NSLocalizedString("5VH-GR-KhU.text", tableName: "TopRatedCell", bundle: bundle, comment: "")
      }

      /// en translation: Open
      ///
      /// Locales: en, da
      static func w4qV4OgdText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("w4q-v4-Ogd.text", tableName: "TopRatedCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TopRatedCell", preferredLanguages: preferredLanguages) else {
          return "w4q-v4-Ogd.text"
        }

        return NSLocalizedString("w4q-v4-Ogd.text", tableName: "TopRatedCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddressCell.validate()
      try _BannerCell.validate()
      try _CartCell.validate()
      try _CartsCell.validate()
      try _CategoryCell.validate()
      try _DemoCell.validate()
      try _DrvOrderCell.validate()
      try _LeftSideMenu.validate()
      try _OfferCell.validate()
      try _OrderCell.validate()
      try _ProductCell.validate()
      try _ProductCheckCell.validate()
      try _ProductMenuCell.validate()
      try _ProductPlusMinusCell.validate()
      try _ProductRadioCell.validate()
      try _ProductTblCell.validate()
      try _ResOpenOrderCell.validate()
      try _TopRatedCell.validate()
    }

    struct _AddressCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddressCell

      let bundle = R.hostingBundle
      let identifier = "AddressCell"
      let name = "AddressCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete' is used in nib 'AddressCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right' is used in nib 'AddressCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AvailableDriverCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AvailableDriverCell

      let bundle = R.hostingBundle
      let identifier = "AvailableDriverCell"
      let name = "AvailableDriverCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AvailableDriverCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AvailableDriverCell
      }

      fileprivate init() {}
    }

    struct _BannerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BannerCell

      let bundle = R.hostingBundle
      let identifier = "BannerCell"
      let name = "BannerCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BannerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BannerCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "RR_banner_1612440144", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RR_banner_1612440144' is used in nib 'BannerCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'BannerCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CartCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CartCell

      let bundle = R.hostingBundle
      let identifier = "CartCell"
      let name = "CartCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete' is used in nib 'CartCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "kebeb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebeb' is used in nib 'CartCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'CartCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CartsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CartsCell

      let bundle = R.hostingBundle
      let identifier = "CartsCell"
      let name = "CartsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CartsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CartsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete' is used in nib 'CartsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "kebeb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebeb' is used in nib 'CartsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'CartsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CategoryCell

      let bundle = R.hostingBundle
      let identifier = "CategoryCell"
      let name = "CategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "kebeb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebeb' is used in nib 'CategoryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'CategoryCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DemoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DemoCell

      let bundle = R.hostingBundle
      let identifier = "DemoCell"
      let name = "DemoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DemoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DemoCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "kebabsville", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebabsville' is used in nib 'DemoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location' is used in nib 'DemoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'DemoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'DemoCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DrvOrderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DrvOrderCell

      let bundle = R.hostingBundle
      let identifier = "DrvOrderCell"
      let name = "DrvOrderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DrvOrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DrvOrderCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "kebabsville", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebabsville' is used in nib 'DrvOrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location' is used in nib 'DrvOrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'DrvOrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user_icon' is used in nib 'DrvOrderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'DrvOrderCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ExtraItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ExtraItemCell

      let bundle = R.hostingBundle
      let identifier = "ExtraItemCell"
      let name = "ExtraItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExtraItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExtraItemCell
      }

      fileprivate init() {}
    }

    struct _LeftSideMenu: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LeftSideMenu

      let bundle = R.hostingBundle
      let identifier = "LeftSideMenu"
      let name = "LeftSideMenu"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LeftSideMenu? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LeftSideMenu
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Ellipse 416", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ellipse 416' is used in nib 'LeftSideMenu', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'LeftSideMenu', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MyEarningCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyEarningCell

      let bundle = R.hostingBundle
      let identifier = "MyEarningCell"
      let name = "MyEarningCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyEarningCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyEarningCell
      }

      fileprivate init() {}
    }

    struct _NotificationCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NotificationCell

      let bundle = R.hostingBundle
      let identifier = "NotificationCell"
      let name = "NotificationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
      }

      fileprivate init() {}
    }

    struct _OfferCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OfferCell

      let bundle = R.hostingBundle
      let identifier = "OfferCell"
      let name = "OfferCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OfferCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OfferCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "RR_banner_1612440144", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RR_banner_1612440144' is used in nib 'OfferCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OrderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrderCell

      let bundle = R.hostingBundle
      let identifier = "OrderCell"
      let name = "OrderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "kebabsville", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebabsville' is used in nib 'OrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location' is used in nib 'OrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in nib 'OrderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'OrderCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProductCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductCell

      let bundle = R.hostingBundle
      let identifier = "ProductCell"
      let name = "ProductCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "favoritefill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favoritefill' is used in nib 'ProductCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "kebeb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebeb' is used in nib 'ProductCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'ProductCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProductCheckCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductCheckCell

      let bundle = R.hostingBundle
      let identifier = "ProductCheckCell"
      let name = "ProductCheckCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCheckCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCheckCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "check_box_nill_18pt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check_box_nill_18pt' is used in nib 'ProductCheckCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProductMenuCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductMenuCell

      let bundle = R.hostingBundle
      let identifier = "ProductMenuCell"
      let name = "ProductMenuCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductMenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductMenuCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "kebeb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebeb' is used in nib 'ProductMenuCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'ProductMenuCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProductPlusMinusCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductPlusMinusCell

      let bundle = R.hostingBundle
      let identifier = "ProductPlusMinusCell"
      let name = "ProductPlusMinusCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductPlusMinusCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductPlusMinusCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "check_box_nill_18pt", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'check_box_nill_18pt' is used in nib 'ProductPlusMinusCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProductPrintCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProductPrintCell

      let bundle = R.hostingBundle
      let identifier = "ProductPrintCell"
      let name = "ProductPrintCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductPrintCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductPrintCell
      }

      fileprivate init() {}
    }

    struct _ProductRadioCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductRadioCell

      let bundle = R.hostingBundle
      let identifier = "ProductRadioCell"
      let name = "ProductRadioCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductRadioCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductRadioCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "radio_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_uncheck' is used in nib 'ProductRadioCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProductTblCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductTblCell

      let bundle = R.hostingBundle
      let identifier = "ProductTblCell"
      let name = "ProductTblCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductTblCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductTblCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "favoritefill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favoritefill' is used in nib 'ProductTblCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "kebeb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebeb' is used in nib 'ProductTblCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'ProductTblCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ResOpenOrderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ResOpenOrderCell

      let bundle = R.hostingBundle
      let identifier = "ResOpenOrderCell"
      let name = "ResOpenOrderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResOpenOrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResOpenOrderCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "kebabsville", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebabsville' is used in nib 'ResOpenOrderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'ResOpenOrderCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ResOpenOrderItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ResOpenOrderItemCell

      let bundle = R.hostingBundle
      let identifier = "ResOpenOrderItemCell"
      let name = "ResOpenOrderItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResOpenOrderItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResOpenOrderItemCell
      }

      fileprivate init() {}
    }

    struct _RestChooseTimeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RestChooseTimeCell

      let bundle = R.hostingBundle
      let identifier = "RestChooseTimeCell"
      let name = "RestChooseTimeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestChooseTimeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestChooseTimeCell
      }

      fileprivate init() {}
    }

    struct _RestUpdProfileCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RestUpdProfileCell

      let bundle = R.hostingBundle
      let identifier = "RestUpdProfileCell"
      let name = "RestUpdProfileCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestUpdProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestUpdProfileCell
      }

      fileprivate init() {}
    }

    struct _RestaurantReviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RestaurantReviewCell

      let bundle = R.hostingBundle
      let identifier = "RestaurantReviewCell"
      let name = "RestaurantReviewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestaurantReviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestaurantReviewCell
      }

      fileprivate init() {}
    }

    struct _SizeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SizeCell

      let bundle = R.hostingBundle
      let identifier = "SizeCell"
      let name = "SizeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SizeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SizeCell
      }

      fileprivate init() {}
    }

    struct _SubAmountCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SubAmountCell

      let bundle = R.hostingBundle
      let identifier = "SubAmountCell"
      let name = "SubAmountCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubAmountCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubAmountCell
      }

      fileprivate init() {}
    }

    struct _TopRatedCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TopRatedCell

      let bundle = R.hostingBundle
      let identifier = "TopRatedCell"
      let name = "TopRatedCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopRatedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopRatedCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cutlery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cutlery' is used in nib 'TopRatedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "kebabsville", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebabsville' is used in nib 'TopRatedCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "kebeb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebeb' is used in nib 'TopRatedCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in nib 'TopRatedCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "iTunesArtwork", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iTunesArtwork' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let addressPickerVC = StoryboardViewControllerResource<AddressPickerVC>(identifier: "AddressPickerVC")
      let bundle = R.hostingBundle
      let businessCodeVC = StoryboardViewControllerResource<BusinessCodeVC>(identifier: "BusinessCodeVC")
      let cartVC = StoryboardViewControllerResource<CartVC>(identifier: "CartVC")
      let changeLanguageVC = StoryboardViewControllerResource<ChangeLanguageVC>(identifier: "ChangeLanguageVC")
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let currentOrderVC = StoryboardViewControllerResource<CurrentOrderVC>(identifier: "CurrentOrderVC")
      let drvCurrentOrderVC = StoryboardViewControllerResource<DrvCurrentOrderVC>(identifier: "DrvCurrentOrderVC")
      let drvEditProfileVC = StoryboardViewControllerResource<DrvEditProfileVC>(identifier: "DrvEditProfileVC")
      let drvHomeMainVC = StoryboardViewControllerResource<DrvHomeMainVC>(identifier: "DrvHomeMainVC")
      let drvHomeVC = StoryboardViewControllerResource<DrvHomeVC>(identifier: "DrvHomeVC")
      let drvLeftSideMenu = StoryboardViewControllerResource<DrvLeftSideMenu>(identifier: "DrvLeftSideMenu")
      let drvNotificationVC = StoryboardViewControllerResource<DrvNotificationVC>(identifier: "DrvNotificationVC")
      let drvOrderDetailVC = StoryboardViewControllerResource<DrvOrderDetailVC>(identifier: "DrvOrderDetailVC")
      let drvOrderMainVC = StoryboardViewControllerResource<DrvOrderMainVC>(identifier: "DrvOrderMainVC")
      let drvPastOrderVC = StoryboardViewControllerResource<DrvPastOrderVC>(identifier: "DrvPastOrderVC")
      let drvRatingVC = StoryboardViewControllerResource<DrvRatingVC>(identifier: "DrvRatingVC")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
      let homeMainVC = StoryboardViewControllerResource<HomeMainVC>(identifier: "HomeMainVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let landingVC = StoryboardViewControllerResource<LandingVC>(identifier: "LandingVC")
      let leftSideMenuVC = StoryboardViewControllerResource<LeftSideMenuVC>(identifier: "LeftSideMenuVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let myAddressVC = StoryboardViewControllerResource<MyAddressVC>(identifier: "MyAddressVC")
      let myFavouriteVC = StoryboardViewControllerResource<MyFavouriteVC>(identifier: "MyFavouriteVC")
      let myOffersVC = StoryboardViewControllerResource<MyOffersVC>(identifier: "MyOffersVC")
      let myProfileVC = StoryboardViewControllerResource<MyProfileVC>(identifier: "MyProfileVC")
      let myReviewsVC = StoryboardViewControllerResource<MyReviewsVC>(identifier: "MyReviewsVC")
      let name = "Main"
      let orderMainVC = StoryboardViewControllerResource<OrderMainVC>(identifier: "OrderMainVC")
      let otpVC = StoryboardViewControllerResource<OtpVC>(identifier: "OtpVC")
      let pastOrderVC = StoryboardViewControllerResource<PastOrderVC>(identifier: "PastOrderVC")
      let paymentGatewayVC = StoryboardViewControllerResource<PaymentGatewayVC>(identifier: "PaymentGatewayVC")
      let placeOrderVC = StoryboardViewControllerResource<PlaceOrderVC>(identifier: "PlaceOrderVC")
      let primaryMainVC = StoryboardViewControllerResource<PrimaryMainVC>(identifier: "PrimaryMainVC")
      let productDetailVC = StoryboardViewControllerResource<ProductDetailVC>(identifier: "ProductDetailVC")
      let productVC = StoryboardViewControllerResource<ProductVC>(identifier: "ProductVC")
      let resChooseTimeVC = StoryboardViewControllerResource<ResChooseTimeVC>(identifier: "ResChooseTimeVC")
      let resCurrentOrderVC = StoryboardViewControllerResource<ResCurrentOrderVC>(identifier: "ResCurrentOrderVC")
      let resEditProfileVC = StoryboardViewControllerResource<ResEditProfileVC>(identifier: "ResEditProfileVC")
      let resHomeMainVC = StoryboardViewControllerResource<ResHomeMainVC>(identifier: "ResHomeMainVC")
      let resHomeVC = StoryboardViewControllerResource<ResHomeVC>(identifier: "ResHomeVC")
      let resLeftSideMenu = StoryboardViewControllerResource<ResLeftSideMenu>(identifier: "ResLeftSideMenu")
      let resMenuVC = StoryboardViewControllerResource<ResMenuVC>(identifier: "ResMenuVC")
      let resMyEarningsVC = StoryboardViewControllerResource<ResMyEarningsVC>(identifier: "ResMyEarningsVC")
      let resMyWalletVC = StoryboardViewControllerResource<ResMyWalletVC>(identifier: "ResMyWalletVC")
      let resNotificationVC = StoryboardViewControllerResource<ResNotificationVC>(identifier: "ResNotificationVC")
      let resOpenOrderVC = StoryboardViewControllerResource<ResOpenOrderVC>(identifier: "ResOpenOrderVC")
      let resPastOrderVC = StoryboardViewControllerResource<ResPastOrderVC>(identifier: "ResPastOrderVC")
      let resPrintVC = StoryboardViewControllerResource<ResPrintVC>(identifier: "ResPrintVC")
      let resReviewVC = StoryboardViewControllerResource<ResReviewVC>(identifier: "ResReviewVC")
      let resTimeSelVC = StoryboardViewControllerResource<ResTimeSelVC>(identifier: "ResTimeSelVC")
      let resUpdateVC = StoryboardViewControllerResource<ResUpdateVC>(identifier: "ResUpdateVC")
      let resWithdrawalVC = StoryboardViewControllerResource<ResWithdrawalVC>(identifier: "ResWithdrawalVC")
      let restAvailableDriverVC = StoryboardViewControllerResource<RestAvailableDriverVC>(identifier: "RestAvailableDriverVC")
      let restOrderDetailVC = StoryboardViewControllerResource<RestOrderDetailVC>(identifier: "RestOrderDetailVC")
      let restaurantInfoVC = StoryboardViewControllerResource<RestaurantInfoVC>(identifier: "RestaurantInfoVC")
      let restaurantMenuVC = StoryboardViewControllerResource<RestaurantMenuVC>(identifier: "RestaurantMenuVC")
      let signupVC = StoryboardViewControllerResource<SignupVC>(identifier: "SignupVC")
      let termsAndCondVC = StoryboardViewControllerResource<TermsAndCondVC>(identifier: "TermsAndCondVC")
      let termsVC = StoryboardViewControllerResource<TermsVC>(identifier: "TermsVC")
      let topRatedRestVC = StoryboardViewControllerResource<TopRatedRestVC>(identifier: "TopRatedRestVC")

      func addressPickerVC(_: Void = ()) -> AddressPickerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressPickerVC)
      }

      func businessCodeVC(_: Void = ()) -> BusinessCodeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: businessCodeVC)
      }

      func cartVC(_: Void = ()) -> CartVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cartVC)
      }

      func changeLanguageVC(_: Void = ()) -> ChangeLanguageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changeLanguageVC)
      }

      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }

      func currentOrderVC(_: Void = ()) -> CurrentOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: currentOrderVC)
      }

      func drvCurrentOrderVC(_: Void = ()) -> DrvCurrentOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drvCurrentOrderVC)
      }

      func drvEditProfileVC(_: Void = ()) -> DrvEditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drvEditProfileVC)
      }

      func drvHomeMainVC(_: Void = ()) -> DrvHomeMainVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drvHomeMainVC)
      }

      func drvHomeVC(_: Void = ()) -> DrvHomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drvHomeVC)
      }

      func drvLeftSideMenu(_: Void = ()) -> DrvLeftSideMenu? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drvLeftSideMenu)
      }

      func drvNotificationVC(_: Void = ()) -> DrvNotificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drvNotificationVC)
      }

      func drvOrderDetailVC(_: Void = ()) -> DrvOrderDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drvOrderDetailVC)
      }

      func drvOrderMainVC(_: Void = ()) -> DrvOrderMainVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drvOrderMainVC)
      }

      func drvPastOrderVC(_: Void = ()) -> DrvPastOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drvPastOrderVC)
      }

      func drvRatingVC(_: Void = ()) -> DrvRatingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drvRatingVC)
      }

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
      }

      func homeMainVC(_: Void = ()) -> HomeMainVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeMainVC)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func landingVC(_: Void = ()) -> LandingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landingVC)
      }

      func leftSideMenuVC(_: Void = ()) -> LeftSideMenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leftSideMenuVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func myAddressVC(_: Void = ()) -> MyAddressVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myAddressVC)
      }

      func myFavouriteVC(_: Void = ()) -> MyFavouriteVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myFavouriteVC)
      }

      func myOffersVC(_: Void = ()) -> MyOffersVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myOffersVC)
      }

      func myProfileVC(_: Void = ()) -> MyProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myProfileVC)
      }

      func myReviewsVC(_: Void = ()) -> MyReviewsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myReviewsVC)
      }

      func orderMainVC(_: Void = ()) -> OrderMainVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderMainVC)
      }

      func otpVC(_: Void = ()) -> OtpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpVC)
      }

      func pastOrderVC(_: Void = ()) -> PastOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pastOrderVC)
      }

      func paymentGatewayVC(_: Void = ()) -> PaymentGatewayVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentGatewayVC)
      }

      func placeOrderVC(_: Void = ()) -> PlaceOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: placeOrderVC)
      }

      func primaryMainVC(_: Void = ()) -> PrimaryMainVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: primaryMainVC)
      }

      func productDetailVC(_: Void = ()) -> ProductDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productDetailVC)
      }

      func productVC(_: Void = ()) -> ProductVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productVC)
      }

      func resChooseTimeVC(_: Void = ()) -> ResChooseTimeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resChooseTimeVC)
      }

      func resCurrentOrderVC(_: Void = ()) -> ResCurrentOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resCurrentOrderVC)
      }

      func resEditProfileVC(_: Void = ()) -> ResEditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resEditProfileVC)
      }

      func resHomeMainVC(_: Void = ()) -> ResHomeMainVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resHomeMainVC)
      }

      func resHomeVC(_: Void = ()) -> ResHomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resHomeVC)
      }

      func resLeftSideMenu(_: Void = ()) -> ResLeftSideMenu? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resLeftSideMenu)
      }

      func resMenuVC(_: Void = ()) -> ResMenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resMenuVC)
      }

      func resMyEarningsVC(_: Void = ()) -> ResMyEarningsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resMyEarningsVC)
      }

      func resMyWalletVC(_: Void = ()) -> ResMyWalletVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resMyWalletVC)
      }

      func resNotificationVC(_: Void = ()) -> ResNotificationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resNotificationVC)
      }

      func resOpenOrderVC(_: Void = ()) -> ResOpenOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resOpenOrderVC)
      }

      func resPastOrderVC(_: Void = ()) -> ResPastOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resPastOrderVC)
      }

      func resPrintVC(_: Void = ()) -> ResPrintVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resPrintVC)
      }

      func resReviewVC(_: Void = ()) -> ResReviewVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resReviewVC)
      }

      func resTimeSelVC(_: Void = ()) -> ResTimeSelVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resTimeSelVC)
      }

      func resUpdateVC(_: Void = ()) -> ResUpdateVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resUpdateVC)
      }

      func resWithdrawalVC(_: Void = ()) -> ResWithdrawalVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resWithdrawalVC)
      }

      func restAvailableDriverVC(_: Void = ()) -> RestAvailableDriverVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restAvailableDriverVC)
      }

      func restOrderDetailVC(_: Void = ()) -> RestOrderDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restOrderDetailVC)
      }

      func restaurantInfoVC(_: Void = ()) -> RestaurantInfoVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restaurantInfoVC)
      }

      func restaurantMenuVC(_: Void = ()) -> RestaurantMenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restaurantMenuVC)
      }

      func signupVC(_: Void = ()) -> SignupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupVC)
      }

      func termsAndCondVC(_: Void = ()) -> TermsAndCondVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsAndCondVC)
      }

      func termsVC(_: Void = ()) -> TermsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsVC)
      }

      func topRatedRestVC(_: Void = ()) -> TopRatedRestVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: topRatedRestVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clocation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clocation' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "downarrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'downarrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "favoritenill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favoritenill' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "favourite_unsel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favourite_unsel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "flame_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flame_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home_sel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home_sel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "kebabsville", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebabsville' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "kebeb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kebeb' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'next' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "noti", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'noti' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "order_unsel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'order_unsel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_check' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "radio_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'radio_uncheck' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shopping-bag", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shopping-bag' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'uncheck' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "theme_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'theme_color' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().addressPickerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressPickerVC' could not be loaded from storyboard 'Main' as 'AddressPickerVC'.") }
        if _R.storyboard.main().businessCodeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'businessCodeVC' could not be loaded from storyboard 'Main' as 'BusinessCodeVC'.") }
        if _R.storyboard.main().cartVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cartVC' could not be loaded from storyboard 'Main' as 'CartVC'.") }
        if _R.storyboard.main().changeLanguageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changeLanguageVC' could not be loaded from storyboard 'Main' as 'ChangeLanguageVC'.") }
        if _R.storyboard.main().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Main' as 'ChangePasswordVC'.") }
        if _R.storyboard.main().currentOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'currentOrderVC' could not be loaded from storyboard 'Main' as 'CurrentOrderVC'.") }
        if _R.storyboard.main().drvCurrentOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drvCurrentOrderVC' could not be loaded from storyboard 'Main' as 'DrvCurrentOrderVC'.") }
        if _R.storyboard.main().drvEditProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drvEditProfileVC' could not be loaded from storyboard 'Main' as 'DrvEditProfileVC'.") }
        if _R.storyboard.main().drvHomeMainVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drvHomeMainVC' could not be loaded from storyboard 'Main' as 'DrvHomeMainVC'.") }
        if _R.storyboard.main().drvHomeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drvHomeVC' could not be loaded from storyboard 'Main' as 'DrvHomeVC'.") }
        if _R.storyboard.main().drvLeftSideMenu() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drvLeftSideMenu' could not be loaded from storyboard 'Main' as 'DrvLeftSideMenu'.") }
        if _R.storyboard.main().drvNotificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drvNotificationVC' could not be loaded from storyboard 'Main' as 'DrvNotificationVC'.") }
        if _R.storyboard.main().drvOrderDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drvOrderDetailVC' could not be loaded from storyboard 'Main' as 'DrvOrderDetailVC'.") }
        if _R.storyboard.main().drvOrderMainVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drvOrderMainVC' could not be loaded from storyboard 'Main' as 'DrvOrderMainVC'.") }
        if _R.storyboard.main().drvPastOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drvPastOrderVC' could not be loaded from storyboard 'Main' as 'DrvPastOrderVC'.") }
        if _R.storyboard.main().drvRatingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drvRatingVC' could not be loaded from storyboard 'Main' as 'DrvRatingVC'.") }
        if _R.storyboard.main().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Main' as 'EditProfileVC'.") }
        if _R.storyboard.main().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'Main' as 'ForgotPasswordVC'.") }
        if _R.storyboard.main().homeMainVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeMainVC' could not be loaded from storyboard 'Main' as 'HomeMainVC'.") }
        if _R.storyboard.main().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'Main' as 'HomeVC'.") }
        if _R.storyboard.main().landingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landingVC' could not be loaded from storyboard 'Main' as 'LandingVC'.") }
        if _R.storyboard.main().leftSideMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leftSideMenuVC' could not be loaded from storyboard 'Main' as 'LeftSideMenuVC'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if _R.storyboard.main().myAddressVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myAddressVC' could not be loaded from storyboard 'Main' as 'MyAddressVC'.") }
        if _R.storyboard.main().myFavouriteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myFavouriteVC' could not be loaded from storyboard 'Main' as 'MyFavouriteVC'.") }
        if _R.storyboard.main().myOffersVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myOffersVC' could not be loaded from storyboard 'Main' as 'MyOffersVC'.") }
        if _R.storyboard.main().myProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myProfileVC' could not be loaded from storyboard 'Main' as 'MyProfileVC'.") }
        if _R.storyboard.main().myReviewsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myReviewsVC' could not be loaded from storyboard 'Main' as 'MyReviewsVC'.") }
        if _R.storyboard.main().orderMainVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderMainVC' could not be loaded from storyboard 'Main' as 'OrderMainVC'.") }
        if _R.storyboard.main().otpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpVC' could not be loaded from storyboard 'Main' as 'OtpVC'.") }
        if _R.storyboard.main().pastOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pastOrderVC' could not be loaded from storyboard 'Main' as 'PastOrderVC'.") }
        if _R.storyboard.main().paymentGatewayVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentGatewayVC' could not be loaded from storyboard 'Main' as 'PaymentGatewayVC'.") }
        if _R.storyboard.main().placeOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'placeOrderVC' could not be loaded from storyboard 'Main' as 'PlaceOrderVC'.") }
        if _R.storyboard.main().primaryMainVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'primaryMainVC' could not be loaded from storyboard 'Main' as 'PrimaryMainVC'.") }
        if _R.storyboard.main().productDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productDetailVC' could not be loaded from storyboard 'Main' as 'ProductDetailVC'.") }
        if _R.storyboard.main().productVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productVC' could not be loaded from storyboard 'Main' as 'ProductVC'.") }
        if _R.storyboard.main().resChooseTimeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resChooseTimeVC' could not be loaded from storyboard 'Main' as 'ResChooseTimeVC'.") }
        if _R.storyboard.main().resCurrentOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resCurrentOrderVC' could not be loaded from storyboard 'Main' as 'ResCurrentOrderVC'.") }
        if _R.storyboard.main().resEditProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resEditProfileVC' could not be loaded from storyboard 'Main' as 'ResEditProfileVC'.") }
        if _R.storyboard.main().resHomeMainVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resHomeMainVC' could not be loaded from storyboard 'Main' as 'ResHomeMainVC'.") }
        if _R.storyboard.main().resHomeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resHomeVC' could not be loaded from storyboard 'Main' as 'ResHomeVC'.") }
        if _R.storyboard.main().resLeftSideMenu() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resLeftSideMenu' could not be loaded from storyboard 'Main' as 'ResLeftSideMenu'.") }
        if _R.storyboard.main().resMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resMenuVC' could not be loaded from storyboard 'Main' as 'ResMenuVC'.") }
        if _R.storyboard.main().resMyEarningsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resMyEarningsVC' could not be loaded from storyboard 'Main' as 'ResMyEarningsVC'.") }
        if _R.storyboard.main().resMyWalletVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resMyWalletVC' could not be loaded from storyboard 'Main' as 'ResMyWalletVC'.") }
        if _R.storyboard.main().resNotificationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resNotificationVC' could not be loaded from storyboard 'Main' as 'ResNotificationVC'.") }
        if _R.storyboard.main().resOpenOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resOpenOrderVC' could not be loaded from storyboard 'Main' as 'ResOpenOrderVC'.") }
        if _R.storyboard.main().resPastOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resPastOrderVC' could not be loaded from storyboard 'Main' as 'ResPastOrderVC'.") }
        if _R.storyboard.main().resPrintVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resPrintVC' could not be loaded from storyboard 'Main' as 'ResPrintVC'.") }
        if _R.storyboard.main().resReviewVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resReviewVC' could not be loaded from storyboard 'Main' as 'ResReviewVC'.") }
        if _R.storyboard.main().resTimeSelVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resTimeSelVC' could not be loaded from storyboard 'Main' as 'ResTimeSelVC'.") }
        if _R.storyboard.main().resUpdateVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resUpdateVC' could not be loaded from storyboard 'Main' as 'ResUpdateVC'.") }
        if _R.storyboard.main().resWithdrawalVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resWithdrawalVC' could not be loaded from storyboard 'Main' as 'ResWithdrawalVC'.") }
        if _R.storyboard.main().restAvailableDriverVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restAvailableDriverVC' could not be loaded from storyboard 'Main' as 'RestAvailableDriverVC'.") }
        if _R.storyboard.main().restOrderDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restOrderDetailVC' could not be loaded from storyboard 'Main' as 'RestOrderDetailVC'.") }
        if _R.storyboard.main().restaurantInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restaurantInfoVC' could not be loaded from storyboard 'Main' as 'RestaurantInfoVC'.") }
        if _R.storyboard.main().restaurantMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restaurantMenuVC' could not be loaded from storyboard 'Main' as 'RestaurantMenuVC'.") }
        if _R.storyboard.main().signupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupVC' could not be loaded from storyboard 'Main' as 'SignupVC'.") }
        if _R.storyboard.main().termsAndCondVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsAndCondVC' could not be loaded from storyboard 'Main' as 'TermsAndCondVC'.") }
        if _R.storyboard.main().termsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsVC' could not be loaded from storyboard 'Main' as 'TermsVC'.") }
        if _R.storyboard.main().topRatedRestVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'topRatedRestVC' could not be loaded from storyboard 'Main' as 'TopRatedRestVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
